<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>http://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.26wmf1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2600" case="first-letter">Topic</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Category:Wikipedia books on computer science</title>
    <ns>14</ns>
    <id>27537394</id>
    <revision>
      <id>545925690</id>
      <parentid>503819094</parentid>
      <timestamp>2013-03-21T08:09:13Z</timestamp>
      <contributor>
        <username>Addbot</username>
        <id>6569922</id>
      </contributor>
      <minor/>
      <comment>[[User:Addbot|Bot:]] Migrating 1 interwiki links, now provided by [[Wikipedia:Wikidata|Wikidata]] on [[d:q7580294]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="222">[[Category:Wikipedia books on applied sciences|Computer science]]
[[Category:Wikipedia books on formal sciences|Computer science]]
[[Category:Wikipedia books on computing|Computer science]]
[[Category:Computer science|β]]</text>
      <sha1>gh1ge33ev4zc69uhzlurt7eemjeetjb</sha1>
    </revision>
  </page>
  <page>
    <title>Computer science in sport</title>
    <ns>0</ns>
    <id>25852537</id>
    <revision>
      <id>642737201</id>
      <parentid>638304702</parentid>
      <timestamp>2015-01-16T09:15:55Z</timestamp>
      <contributor>
        <username>Yobot</username>
        <id>7328338</id>
      </contributor>
      <minor/>
      <comment>/* Historical background */[[WP:CHECKWIKI]] error fixes using [[Project:AWB|AWB]] (10770)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="8721">'''Computer science in sport''' is an interdisciplinary discipline that has its goal in combining the theoretical as well as practical aspects and methods of the areas of [[Information technology|informatics]] and [[sport science]]. The main emphasis of the [[interdisciplinarity]] is placed on the application and use of computer-based but also mathematical techniques in sport science, aiming in this way at the support and advancement of theory and practice in sports.&lt;ref&gt;{{cite web|author=Daniel Link &amp; Martin Lames|title=Sport Informatics – Historical Roots, Interdisciplinarity and Future Developments|year=2009}} IJCSS Volume 8 Edition 2, 68-87.&lt;/ref&gt; The reason why [[computer science]] has become an important partner for sport science is mainly connected with “the fact that the use of data and media, the design of models, the analysis of systems etc. increasingly requires the support of suitable tools and concepts which are developed and available in computer science”.&lt;ref&gt;{{cite web|author=Arnold Baca|title=Computer science in sport: an overview of history, present fields and future applications (part I)|year=2006}} IJCSS Special Edition 2/2006, 25-35.&lt;/ref&gt;

== Historical background ==
Going back in history, computers in sports were used for the first time in the 1960s, when the main purpose was to accumulate sports information. [[Database]]s were created and expanded in order to launch documentation and dissemination of publications like articles or books that contain any kind of knowledge related to sports science. Until the mid-1970s also the first organization in this area called IASI (International Association for Sports Information) was formally established. Congresses and meetings were organized more often with the aim of standardization and rationalization of sports documentation. Since at that time this area was obviously less computer-oriented, specialists talk about sports information rather than sports informatics when mentioning the beginning of this field of science.

Based on the progress of computer science and the invention of more powerful computer hardware in the 1970s, also the real history of computer science in sport began.&lt;ref&gt;{{cite web|author=Jürgen Perl|title=Computer science in sport: an overview of history, present fields and future applications (part II)|year=2006}} IJCSS Special Edition 2/2006, 36-46.&lt;/ref&gt; This was as well the first time when this term was officially used and the initiation of a very important evolution in sports science.

In the early stages of this area statistics on biomechanical data, like different kinds of forces or rates, played a major role. Scientists started to analyze sports games by collecting and looking at such values and features in order to interpret them. Later on, with the continuous improvement of computer hardware - in particular microprocessor speed – many new scientific and computing paradigms were introduced, which were also integrated in computer science in sport. Specific examples are [[Computer model|modeling]] as well as [[simulation]], but also [[pattern recognition]], design, and (sports) [[data mining]].&lt;ref&gt;{{cite journal|author=Bahadorreza Ofoghi, John Zeleznikow, Clare MacMahon, and Markus Raab|title=[http://www.tandfonline.com/doi/abs/10.1080/1091367X.2013.805137#.VI-ipE103Dc Data mining in elite sports: A review and a framework] |year=2013 |journal=Measurement in Physical Education and Exercise Science | volume=17 | issue=3}}&lt;/ref&gt;

As another result of this development, the term 'computer science in sport' has been added in the encyclopedia of sports science in 2004.

== Areas of research ==
The importance and strong influence of computer science as an interdisciplinary partner for sport and sport science is mainly proven by the research activities in computer science in sport. The following IT concepts are thereby of particular interest:

* [[Data acquisition]] and [[data processing]]
* Databases and [[expert system]]s
* Modelling (mathematical, IT based, biomechanical, physiological)
* Simulation (interactive, animation etc.)
* Presentation

Based on the fields from above, the main areas of research in computer science in sport include amongst others:

* [[Training]] and coaching
* [[Biomechanics]]
* [[Sports equipment]] and technology
* Computer-aided applications (software, hardware) in sports
* [[Ubiquitous computing]] in sports
* [[Multimedia]] and [[Internet]]
* Documentation
* Education

== Research communities ==
A clear demonstration for the evolution and propagation towards computer science in sport is also the fact that nowadays people do research in this area all over the world. Since the 1990s many new national and international organizations regarding the topic of computer science in sport were established. These associations are regularly organizing congresses and workshops with the aim of dissemination as well as exchange of scientific knowledge and information on all sort of topics regarding the interdisciplinary discipline.

=== Historical survey ===
As a first example, in [[Australia]] and [[New Zealand]] scientists have built up the MathSport group of [[ANZIAM]] (Australia and New Zealand Industrial and Applied Mathematics), which since 1992 organizes biennial meetings, initially under the name “Mathematics and Computers in Sport Conferences”, and now &quot;[[MathSport]]&quot;.&lt;ref&gt;[http://www.anziam.org.au/MathSport MathSport], www.anziam.org.au&lt;/ref&gt; Main topics are mathematical models and computer applications in sports, as well as coaching and teaching methods based on informatics.

The European community was also among the leading motors of the emergence of the field. Some workshops on this topic were successfully organized in Germany since the late 1980s. In 1997 the first international meeting on computer science in sport was held in Cologne. The main aim was to spread out and share applications, ideas and concepts of the use of computers in sports, which should also make a contribution to the creation of internationalization and thus to boost research work in this area.

Since then, such international symposia took place every two years all over Europe. As the first conferences were a raving success, it was decided to go even further and the foundation of an organization was the logical consequence. This step was accomplished in 2003, when the International Association of Computer Science in Sport (IACSS) was established during the 4th international symposium in Barcelona, when Prof. Jürgen Perl was also chosen as the first president. A few years earlier, the first international e-journal on this topic (International Journal of Computer Science in Sport) was released already. The internationalization is confirmed moreover by the fact that three conferences already took place outside of Europe - in [[Calgary]] ([[Canada]]) in 2007, [[Canberra]] ([[Australia]]) in 2009 and [[Shanghai]] ([[China]]) in 2011. During the symposium in Calgary additionally the president position changed - it has been assigned to Prof. Arnold Baca, who has been re-elected in 2009 and 2011. The 9th Symposium on Computer Science in Sport took place in Europe again, in [[Istanbul]] ([[Turkey]]) in 2013. During this conference Prof. Martin Lames was elected as the new president of the IACSS.

=== National organizations ===
In addition to the international associations from above, currently the following national associations on computer science in sport exist (if available, the web addresses are also given):

* Austrian Association of Computer Science in Sport - http://www.sportinformatik.at
* British Association of Computer Science in Sport and Exercise
* Chinese Association of Computer Science in Sport
* Croatian Association of Computer Science in Sport
* Section Computer Science in Sport of the German Association of Sport Science - http://www.dvs-sportinformatik.de (in German)
* Indian Federation of Computer Science in Sport - http://www.ifcss.in
* Portuguese Association of Computer Science in Sport
* Turkish Association of Computer Science in Sport - http://www.tacss.com/

== References ==
{{reflist|2}}

== Further reading ==
* Dabnichki P. &amp; Baca, A. (2008). Computers in Sport, WIT Press. ISBN 978-1-84564-064-4

== External links ==
* [http://www.anziam.org.au/MathSport/ MathSport - ANZIAM (Australia and New Zealand Industrial and Applied Mathematics)]
* [http://www.ecss.de ECSS (European College of Sport Science)]
* [http://www.sportsengineering.co.uk ISEA (International Sports Engineering Association)]
* [http://www.iacss.org IACSS (International Association of Computer Science in Sport)]

{{DEFAULTSORT:Computer Science In Sport}}
[[Category:Computer science]]</text>
      <sha1>g8drn9o80s8amlepi1qps0bohrmwapp</sha1>
    </revision>
  </page>
  <page>
    <title>Outline of computer science</title>
    <ns>0</ns>
    <id>169633</id>
    <revision>
      <id>637340023</id>
      <parentid>635863390</parentid>
      <timestamp>2014-12-09T16:51:31Z</timestamp>
      <contributor>
        <username>DemocraticLuntz</username>
        <id>7627388</id>
      </contributor>
      <comment>/* Communication and Security */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9991">The following [[Outline (list)|outline]] is provided as an overview of and topical guide to computer science:

'''[[Computer science]]''' (also called '''computing science''') is the study of the theoretical foundations of [[information]] and [[computation]] and their implementation and application in [[computer system]]s. One well known subject classification system for [[computer science]] is the [[ACM Computing Classification System]] devised by the [[Association for Computing Machinery]].


{{TOC limit|limit=2}}

== What ''type'' of thing is computer science? ==
Computer science can be described as all of the following:

* [[Academic discipline]]
* [[Science]]
** [[Applied science]]

== Subfields ==

=== Web Programming &amp; Web Designing ===

* [[Web programming]]
* [[Web designing]]

=== Mathematical foundations ===

* [[Coding theory]] – Useful in networking and other areas where computers communicate with each other.
* [[Game theory]] – Useful in artificial intelligence and [[cybernetics]].
* [[Graph theory]] – Foundations for data structures and searching algorithms.
* [[Mathematical logic]] – [[Boolean logic]] and other ways of [[mathematical model|modeling]] logical queries; the uses and limitations of formal proof methods
* [[Number theory]] – Theory of the [[integer]]s.  Used in [[cryptography]] as well as a test domain in [[artificial intelligence]].

=== Algorithms and data structures ===

* [[Algorithms]] – Sequential and parallel computational procedures for solving a wide range of problems.
* [[Data structure]]s – The organization and manipulation of data.

=== Artificial intelligence ===

* [[Artificial intelligence]] – The implementation and study of systems that exhibit an autonomous intelligence or behavior of their own.
*  [[Automated reasoning]] – Solving engines, such as used in [[Prolog]], which produce steps to a result given a query on a fact and rule database, and [[Automated theorem proving|automated theorem provers]] that aim to prove [[mathematical theorem]]s with some assistance from a programmer.
*  [[Computer vision]] – Algorithms for identifying three-dimensional objects from a two-dimensional picture.
*  [[Machine learning]] – Automated creation of a set of rules and axioms based on input.
*  [[Natural language processing]] - Building systems and algorithms that analyze, understand, and generate natural (human) languages.
*  [[Robotics]] – Algorithms for controlling the behavior of robots.

=== Communication and Security===

*  [[Computer networking|Networking]] – Algorithms and protocols for reliably communicating data across different shared or dedicated media, often including [[error correction]].
*  [[Computer security]] – Practical aspects of securing computer systems and computer networks.
*  [[Cryptography]] – Applies results from complexity, probability, algebra and number theory to invent and [[cryptoanalysis|break codes]], and analyze the security of [[cryptographic protocols]].

=== Computer architecture ===

* [[Computer architecture]] – The design, organization, optimization and verification of a computer system, mostly about [[CPU]]s and [[Memory (computers)|Memory]] subsystem (and the bus connecting them).
*  [[Operating system]]s – Systems for managing computer programs and providing the basis of a usable system.

=== Computer graphics ===

*  [[Computer graphics]] – Algorithms both for generating visual images synthetically, and for integrating or altering visual and spatial information sampled from the real world.
*  [[Image processing]] – Determining information from an image through computation.

=== Concurrent, parallel, and distributed systems ===

* [[Concurrency (computer science)|Concurrency]] – The theory and practice of simultaneous computation; data safety in any multitasking or multithreaded environment.
* [[Parallel computing]] – Computing using multiple concurrent threads of execution, devising algorithms for solving problems on multiple processors to achieve maximal speed-up compared to sequential execution.
* [[Distributed computing]] – Computing using multiple computing devices over a network to accomplish a common objective or task and thereby reducing the latency involved in single processor contributions for any task.

=== Databases ===

* [[Relational databases]] – the [[set theory|set theoretic]] and algorithmic foundation of databases.
* [[Structured Storage]] - non-relational databases such as [[NoSQL]] databases. 
* [[Data mining]] – Study of algorithms for searching and processing information in documents and databases; closely related to [[information retrieval]].

=== Programming languages and compilers ===

* [[Compiler theory]] – Theory of [[compiler]] design, based on [[Automata theory]].
* [[Programming language|Programming language pragmatics]] – Taxonomy of programming languages, their strength and weaknesses. Various [[programming paradigm]]s, such as [[object-oriented programming]].
* [[Programming language theory]]
* [[Formal semantics of programming languages|Formal semantics]] – rigorous mathematical study of the meaning of programs.
* [[Type theory]] – Formal analysis of the types of data, and the use of these types to understand properties of programs — especially program safety.

=== Scientific computing ===
* [[Computational science]] &amp;ndash; constructing [[scientific modeling|mathematical model]]s and [[numerical analysis|quantitative analysis]] techniques and using computers to analyze and solve [[scientific]] problems.
* [[Numerical analysis]] – Approximate numerical solution of mathematical problems such as [[Root-finding algorithm|root-finding]], [[Numerical integration|integration]], the [[Numerical ordinary differential equations|solution of ordinary differential equations]]; the approximation of [[special functions]].
* [[Symbolic computation]] – Manipulation and solution of expressions in symbolic form, also known as [[Computer algebra]].
* [[Computational physics]] – Numerical simulations of large non-analytic systems
* [[Computational chemistry]] – Computational modelling of theoretical chemistry in order to determine chemical structures and properties
* [[Bioinformatics]] and [[Computational biology]] – The use of computer science to maintain, analyse, store [[biological data]] and to assist in solving biological problems such as [[Protein folding]], function prediction and [[Phylogeny]].
* [[Computational neuroscience]] – Computational modelling of [[neurophysiology]].

=== Software engineering ===

* [[Formal methods]] – Mathematical approaches for describing and reasoning about software designs.
* [[Software engineering]] – The principles and practice of designing, developing, and testing programs, as well as proper engineering practices.
*  [[Algorithm design]] – Using ideas from algorithm theory to creatively design solutions to real tasks.
*  [[Computer programming]] – The practice of using a programming language to implement algorithms.
*  [[Human–computer interaction]] – The study and design of computer interfaces that people use.
* [[Reverse engineering]] – The application of the scientific method to the understanding of arbitrary existing software.

=== Theory of computation ===
{{main | Theory of computation}}
* [[Automata theory]] – Different logical structures for solving problems.
* [[Computability theory (computer science)|Computability theory]] – What is calculable with the current models of computers. Proofs developed by [[Alan Turing]] and others provide insight into the possibilities of what may be computed and what may not.
** [[List of unsolved problems in computer science]]
* [[Computational complexity theory]] – Fundamental bounds (especially time and storage space) on classes of computations.
* [[Quantum computing]] theory – Explores computational models involving [[quantum superposition]] of bits.

== History ==

[[History of computer science]]
== Vocations ==
* [[Programmer]]
* [[Software engineer]]
* [[Software architect]]
* [[Software developer]]
* [[Software tester]]
* [[Interaction designer]]

== Basic concepts ==
=== Data and data structures===
* [[Data structure]]
* [[Datatype|Data type]]
* [[Associative array]] and [[Hash table]]
* [[Array data structure|Array]]
* [[List (computing)|List]]
* [[Tree (data structure)|Tree]]
* [[String (computer science)|String]]
* [[Matrix (computer science)]]
* [[Databases|Database]]

===Other ===
* [[Abstraction (computer science)|Abstraction]]
* [[Big O notation]]
* [[Closure (computer science)|Closure]]
* [[Compiler]]

==Programming paradigms==

* [[Imperative programming]]/[[Procedural programming]]
* [[Functional programming]]
* [[Logic programming]]
* [[Object oriented programming]]
** [[Class (computer science)|Class]]
** [[Inheritance (computer science)|Inheritance]]
** [[Object (computer science)|Object]]

== See also ==
{{portal|Computer science}}

* [[Cognitive science]]

== External links ==
{{sisterlinks|Computer science}}

* {{dmoz|Computers/Computer_Science/}}
* [http://www.acm.org//education/curricula/ComputerScience2008.pdf [[Association for Computing Machinery|ACM]] report on a recommended computer science curriculum (2008)]
* [http://www.lecturefox.com/computerscience/ Directory of free university lectures in Computer Science]
* [http://liinwww.ira.uka.de/bibliography/ Collection of Computer Science Bibliographies]
* [http://se.ethz.ch/~meyer/gallery/ Photographs of computer scientists] ([[Bertrand Meyer]]'s gallery)

; Webcasts
* [http://www.oid.ucla.edu/webcasts/courses/2006-2007/2006fall/cs1 UCLA Computer Science 1 Freshman Computer Science Seminar Section 1]
* [http://webcast.berkeley.edu/course_details.php?seriesid=1906978395 Berkeley Introduction to Computers]

{{Outline footer}}

[[Category:Outlines|Computer science]]
[[Category:Computer science| Outline]]
[[Category:Computing-related lists|Computer science topics]]</text>
      <sha1>gff4l2ax92lkc7kxs418fi8k8p4l9eo</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Unsolved problems in computer science</title>
    <ns>14</ns>
    <id>1866234</id>
    <revision>
      <id>583776010</id>
      <parentid>548178928</parentid>
      <timestamp>2013-11-29T11:23:38Z</timestamp>
      <contributor>
        <username>NotWith</username>
        <id>15476594</id>
      </contributor>
      <comment>Category:Scientific problems</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="177">{{Cat more|List of open problems in computer science}}

[[Category:Computer science]]
[[Category:Theoretical computer science]]
[[Category:Scientific problems|Computer science]]</text>
      <sha1>rltsva461hhkk2p0toer2ejy5kym11x</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Philosophy of computer science</title>
    <ns>14</ns>
    <id>30759626</id>
    <revision>
      <id>437341304</id>
      <parentid>427638067</parentid>
      <timestamp>2011-07-02T04:43:43Z</timestamp>
      <contributor>
        <username>Gregbard</username>
        <id>1193764</id>
      </contributor>
      <comment>added [[Category:Philosophy of science]] using [[WP:HC|HotCat]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="166">{{catmain}}

[[Category:Computer science]]
[[Category:Philosophy by field|Computer science]]
[[Category:Philosophy of mathematics]]
[[Category:Philosophy of science]]</text>
      <sha1>3x6g637jya527gl7ljvvrswwh56n2hj</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Computer science organizations</title>
    <ns>14</ns>
    <id>2977994</id>
    <revision>
      <id>547393875</id>
      <parentid>452471018</parentid>
      <timestamp>2013-03-28T06:00:47Z</timestamp>
      <contributor>
        <username>Addbot</username>
        <id>6569922</id>
      </contributor>
      <minor/>
      <comment>[[User:Addbot|Bot:]] Migrating 7 interwiki links, now provided by [[Wikipedia:Wikidata|Wikidata]] on [[d:q8408023]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="131">[[Category:Science organizations by topic]]
[[Category:Computer-related organizations]]
[[Category:Computer science|Organizations]]</text>
      <sha1>nmir9ea3ukib9fpjbsyh2js6xgx3zqp</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Computer science literature</title>
    <ns>14</ns>
    <id>3179625</id>
    <revision>
      <id>547394789</id>
      <parentid>490388165</parentid>
      <timestamp>2013-03-28T06:08:42Z</timestamp>
      <contributor>
        <username>Addbot</username>
        <id>6569922</id>
      </contributor>
      <minor/>
      <comment>[[User:Addbot|Bot:]] Migrating 1 interwiki links, now provided by [[Wikipedia:Wikidata|Wikidata]] on [[d:q8408001]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="157">==See also==
* [[:Category:Computer science conferences|Computer science conferences]]

[[Category:Computer science|Literature]]
[[Category:Science writing]]</text>
      <sha1>gn8ho45q194adcvm93cwryq9dxyy2kg</sha1>
    </revision>
  </page>
  <page>
    <title>Category:History of computer science</title>
    <ns>14</ns>
    <id>30730499</id>
    <revision>
      <id>546093687</id>
      <parentid>545093782</parentid>
      <timestamp>2013-03-21T21:45:46Z</timestamp>
      <contributor>
        <username>Addbot</username>
        <id>6569922</id>
      </contributor>
      <minor/>
      <comment>[[User:Addbot|Bot:]] Migrating 3 interwiki links, now provided by [[Wikipedia:Wikidata|Wikidata]] on [[d:q7469795]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="250">{{cat main}}

{{DEFAULTSORT:Computer Science, History}}
[[Category:Computer science|History]]
[[Category:History of computing|Science]]
[[Category:History of mathematics]]
[[Category:History of science by discipline]]
[[Category:History of software]]</text>
      <sha1>td9bwanbhcffwffdyuh7emxb1dmx4ds</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Computer science awards</title>
    <ns>14</ns>
    <id>2379705</id>
    <revision>
      <id>646789588</id>
      <parentid>544083656</parentid>
      <timestamp>2015-02-12T12:28:22Z</timestamp>
      <contributor>
        <username>Horcrux92</username>
        <id>10845682</id>
      </contributor>
      <comment>added [[Category:Science and engineering awards]] using [[WP:HC|HotCat]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="134">[[Category:Computer science|Awards]]
[[Category:Computer-related awards]]
[[Category:Science and engineering awards|Computer science]]</text>
      <sha1>cee0vr0jd3x8xu9pa37qx9gnsn5y623</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Areas of computer science</title>
    <ns>14</ns>
    <id>33240744</id>
    <revision>
      <id>636443580</id>
      <parentid>546230588</parentid>
      <timestamp>2014-12-03T10:42:18Z</timestamp>
      <contributor>
        <username>Jdaloner</username>
        <id>4460044</id>
      </contributor>
      <minor/>
      <comment>Changed how this is sorted in &quot;Subfields by academic discipline&quot; category.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="142">{{Commons category|Areas of computer science}}

[[Category:Computer science| ]]
[[Category:Subfields by academic discipline|Computer science]]</text>
      <sha1>0gmo0km4sad6hzknemrxbwy4zswa9zx</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Computer scientists</title>
    <ns>14</ns>
    <id>694790</id>
    <revision>
      <id>609457033</id>
      <parentid>598888038</parentid>
      <timestamp>2014-05-21T00:38:14Z</timestamp>
      <contributor>
        <username>Cydebot</username>
        <id>1215485</id>
      </contributor>
      <minor/>
      <comment>Robot - Moving category Scholars by subject to [[:Category:Scholars and academics by subject]] per [[WP:CFD|CFD]] at [[Wikipedia:Categories for discussion/Log/2014 May 13]].</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="777">{{catdiffuse}}
{{Notice|[[:Category:Computer scientists]] are people who do &quot;''research''&quot; in the field of computer science, which is distinct from people who primarily work on &quot;''developing''&quot; computer software, who would be better placed in [[:Category:Software engineers]] or [[:Category:Computer programmers]].}}

This category of [[Computer scientist]]s consists of people who do research in the field of [[computer science]]: university professors, researchers employed by industry research laboratories, and independent researchers.

{{Category TOC|numerals=no}}
{{Commons cat|Computer scientists}}

[[Category:Computer science| ]]
[[Category:People in information technology]]
[[Category:Scholars and academics by subject]]
[[Category:Mathematical science occupations]]</text>
      <sha1>r5u90i1h8geye50f209zq7zaiu1em85</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Computer science conferences</title>
    <ns>14</ns>
    <id>2977953</id>
    <revision>
      <id>588223396</id>
      <parentid>549346285</parentid>
      <timestamp>2013-12-29T16:03:56Z</timestamp>
      <contributor>
        <username>BotMultichill</username>
        <id>4080734</id>
      </contributor>
      <minor/>
      <comment>Adding Commons category link to [[:Commons:Category:Computer science conferences|category with the same name]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="364">{{Commons category|Computer science conferences}}
[[Academic conference]]s in the field of computer science.

==See also==
* [[:Category:Computer science journals]]

[[Category:Academic conferences]]
[[Category:Computer conferences]]
[[Category:Science conferences]]
[[Category:Computer science|Conferences]]
[[Category:Computer science organizations|Conferences]]</text>
      <sha1>akpnzhngqg6mq13f2z7k67l4lxkxtzt</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Computer science stubs</title>
    <ns>14</ns>
    <id>1859318</id>
    <revision>
      <id>624334193</id>
      <parentid>563250978</parentid>
      <timestamp>2014-09-05T20:47:19Z</timestamp>
      <contributor>
        <username>DexDor</username>
        <id>11025703</id>
      </contributor>
      <comment>rm wikiproject parent category tag (this category contains articles, not wikiproject pages or talk pages)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="285">{{WPSS-cat}}
{{Stub Category|article=[[computer science]]|newstub=comp-sci-stub|category=Computer science}}
{{Category TOC|numerals=no}}

{{see also|Category:Computer science articles needing expert attention}}

[[Category:Computing stubs|Science]]
[[Category:Science stubs| Computer]]</text>
      <sha1>64w2mqqpnk8tyoaxbpnlvw6gi9bgnu5</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Computer science education</title>
    <ns>14</ns>
    <id>2275290</id>
    <revision>
      <id>549843833</id>
      <parentid>548115600</parentid>
      <timestamp>2013-04-11T13:38:24Z</timestamp>
      <contributor>
        <username>Pichpich</username>
        <id>6196463</id>
      </contributor>
      <minor/>
      <comment>[[Help:Reverting|Reverted]] edits by [[Special:Contributions/Careeritcollege|Careeritcollege]] ([[User talk:Careeritcollege|talk]]) to last version by EmausBot</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="221">{{Wikiversity}}

[[Category:Computer science|Education]]
[[Category:Computer science organizations|Education]]
[[Category:Education by subject]]
[[Category:Science education]]
[[Category:Information technology education]]</text>
      <sha1>o5f0r8mw0pfoum4ho1trs5jot9v52bm</sha1>
    </revision>
  </page>
  <page>
    <title>Similarity measure</title>
    <ns>0</ns>
    <id>40275701</id>
    <revision>
      <id>595336957</id>
      <parentid>582356492</parentid>
      <timestamp>2014-02-13T19:00:59Z</timestamp>
      <contributor>
        <username>Rjwilmsi</username>
        <id>203434</id>
      </contributor>
      <minor/>
      <comment>Journal cites, added 1 DOI using [[Project:AWB|AWB]] (9904)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2063">{{merge from|Similarity matrix|discuss=Talk:Similarity measure#Proposed merge with Similarity matrix|date=October 2013}}
In [[computer science]], a '''similarity measure''' or '''similarity function''' is a [[real-valued function]] that quantifies the similarity between two objects. Although no single definition of a similarity measure exists, usually similarity measures are in some sense the inverse of [[Metric (mathematics)|distance metric]]s: they take on large values for similar objects and either zero or a negative value for very dissimilar objects. E.g., in the context of [[cluster analysis]], Frey and Dueck suggest defining a similarity measure

:&lt;math&gt;s(x_i, x_k) = -||x_i - x_k||_2^2&lt;/math&gt;

where &lt;math&gt;||x_i - x_k||_2^2&lt;/math&gt; is the [[Euclidean distance#Squared Euclidean distance|squared Euclidean distance]].&lt;ref&gt;{{cite journal |author1=Brendan J. Frey |author2=Delbert Dueck |title=Clustering by passing messages between data points |journal=[[Science (journal)|Science]] |volume=315 |year=2007 |pages=972–976|pmid=17218491 |doi=10.1126/science.1136800}}&lt;/ref&gt;

In [[information retrieval]], [[cosine similarity]] is a commonly used similarity measure, defined on vectors arising from the [[bag of words]] model. In [[machine learning]], common [[Kernel trick|kernel functions]] such as the [[Radial basis function kernel|RBF kernel]] can be viewed as similarity functions.&lt;ref name=&quot;primer&quot;&gt;{{cite book|author1=Vert, Jean-Philippe|author2=Koji Tsuda|author3=Bernhard Schölkopf|authorlink3=Bernhard Schölkopf|year=2004|chapter=A primer on kernel methods|title=Kernel Methods in Computational Biology|url=http://www.eecis.udel.edu/~lliao/cis841s06/primer_on_kernel_methods_vert.pdf}}&lt;/ref&gt;

==References==
{{reflist|1}}
* {{cite journal |author1=F. Gregory Ashby|author2=Daniel M. Ennis|year=2007 |title=Similarity measures |journal=Scholarpedia |volume=2 |number=12 |doi=10.4249/scholarpedia.4116}}

==See also==
* [[Semantic similarity]]
* [[String metric]]
* [[Affinity propagation]]

[[Category:Computer science]]


{{comp-sci-stub}}</text>
      <sha1>pq471sh99g3oiw3qgepa9124bomxlye</sha1>
    </revision>
  </page>
  <page>
    <title>Story-driven modeling</title>
    <ns>0</ns>
    <id>40378553</id>
    <revision>
      <id>624663115</id>
      <parentid>624662749</parentid>
      <timestamp>2014-09-08T12:21:09Z</timestamp>
      <contributor>
        <username>Azuendorf</username>
        <id>19610126</id>
      </contributor>
      <comment>/* Summary */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9627">{{Multiple issues|{{more footnotes|date=February 2014}}{{essay-like|date=February 2014}}}}

Story-driven modeling&lt;ref name=SDMBook&gt;{{cite book|last=Norbisrath Zündorf Jubeh|first=Ulrich Albert Ruben|title=Story Driven Modeling|year=2013|publisher=Amazon Createspace|isbn=9781483949253|pages=333|url=http://www.amazon.de/Story-Driven-Modeling-Ulrich-Norbisrath/dp/1483949257}}&lt;/ref&gt;&lt;ref name=ZSW99&gt;{{cite journal|last=Zündorf|first=Albert|author2=A. Schürr |author3=A. J. Winter |title=Story Driven Modeling|journal=University of Paderborn|year=1999|volume=Technical Report|issue=tr-ri-99-211}}&lt;/ref&gt;&lt;ref name=DGZ04&gt;{{cite journal|last=Diethelm|first=Ira|author2=L. Geiger |author3=A. Zündorf |title=Systematic story driven modeling: a case study|journal=Third International Workshop on Scenarios and State Machines|date=January 2004|pages=65–70}}&lt;/ref&gt;   is an [[Object-oriented modeling]] technique.&lt;ref&gt;{{cite journal|last=van Gorp|first=Pieter|title=Evaluation of the Story Driven Modeling Methodology: From Towers to Models|journal=Technical Report University of Antwerp|year=2008}}&lt;/ref&gt;&lt;ref name=EGHZ12&gt;{{cite journal|last=Eickhoff|first=Christoph|author2=N. Geiger |author3=M. Hahn |author4=A. Zündorf |title=Developing Enterprise Web Applications Using the Story Driven Modeling Approach|journal=Current Trends in Web Engineering|year=2012|series=LNCS|issue=7059|pages=196–210}}&lt;/ref&gt; Other forms of [[Object-oriented modeling]] focus on [[class diagram]]s. 
Class diagrams describe the static structure of a program, i.e. the building blocks of a program and how they relate to each other. 
Class diagrams also model data structures, but with an emphasis on rather abstract concepts like types and type features.

Instead of abstract static structures, story-driven modeling focuses on concrete example scenarios&lt;ref&gt;{{cite journal|last=Ryser|first=J.|author2=M. Glinz |title=Improving the Quality of Requirements with Scenarios|journal=Proceedings of the Second World Congress on Software Quality. Yokohama|date=2000|page=55-60}}&lt;/ref&gt; and on how the steps of the example scenarios 
may be represented as [[object diagram]]s and how these object diagrams evolve during scenario execution.

== In a nutshell ==
Story-driven modeling proposes the following software development approach:

# '''Textual scenarios''': For the feature you want to implement, develop a textual scenario description for the most common case. Look on only one example at a time. Try to use specific terms and individual names instead of general terms and e.g. role names: 
#:  Scenario Go-Dutch barbecue
#*Start: This Sunday Peter, Putri, and Peng meet at the park for a go-Dutch barbecue. They use the Group Account app to do the accounting. 
#*Step 1: Peter brings the meat for 12$. Peter adds this item to the Group Account app. 
#*Step 2: Putri brings salad for 9$. Peter adds this item, too. The app shows that by now the average share is 7$ and that Peng still have to bring these 7$ while Peter gets 5$ out and Putri gets 2$ out.  
#*Step 3: ...
# '''GUI mock-ups''': To illustrate the [[graphical user interface]] (GUI) for the desired feature, you may add some wireframe models or GUI mock-ups to your scenario:
#:  Scenario Go-Dutch barbecue
#*Start: This Sunday Peter, Putri, and Peng meet at the park for a go-Dutch barbecue. They use the Group Account app to do the accounting. 
#*Step 1: Peter brings the meat for 12$. Peter adds this item to the Group Account app. 
#*Step 2: Putri brings salad for 9$. Peter adds this item, too. The app shows that by now the average share is 7$ and that Peng still have to bring these 7$ while Peter gets 5$ out and Putri gets 2$ out: &lt;br/&gt;[[File:WikipediaGoDutchMockup.png|WikipediaGoDutchMockup]]  
#*Step 3: ...
# '''Storyboarding''': Next, you think about how a certain situation, i.e. a certain step of a scenario may be represented within a computer by a runtime object structure. This is done by adding [[object diagram]]s to the scenario. In story driven modeling, a scenario with object diagrams is also called a storyboard. 
#:  Scenario Go-Dutch barbecue
#*Start: This Sunday Peter, Putri, and Peng meet at the park for a go-Dutch barbecue. They use the Group Account app to do the accounting. 
#*Step 1: Peter brings the meat for 12$. Peter adds this item to the Group Account app. 
#*Step 2: Putri brings salad for 9$. Peter adds this item, too. The app shows that by now the average share is 7$ and that Peng still have to bring these 7$ while Peter gets 5$ out and Putri gets 2$ out: &lt;br/&gt;[[File:WikipediaGoDutchMockup.png|WikipediaGoDutchMockup]][[File:WikepediaObjectDiagramGoDutchBarbeque.png|Object diagram modeling a go-Dutch barbecue]]
#*Step 3: ...
# '''Class diagram derivation''': Now it is fairly straight forward to derive a [[class diagram]] from the object diagrams used in the storyboards.&lt;br/&gt;[[File:WikipediaGoDutchClassDiag.png|Class diagram for a go-Dutch barbecue]]&lt;br/&gt;Note, the class diagram serves as a common reference for all object diagrams. This ensures that overall the same types and attributes are used. Using a [[Unified Modeling Language|UML]] tool, you may generate a first implementation from this class diagram. 
# '''Algorithm design''': So far you have modeled and implemented that object structures that are deployed in your application. Now you need to add behavior, i.e. algorithms and method bodies. Programming the behavior of an application is a demanding task. To facilitate it, you should first outline the behavior in [[pseudocode]] notation. You might do this, e.g. with an object game. For example, to update the saldo attributes of all persons you look at our object structure and from the point of view of the GroupAccount object you do the following: 
#: Update the saldo of all persons:
#* visit each item 
#** for each item add the value to the total value and add 1 to the number of items
#* compute the average share of each person by dividing the total value by the number of persons
#* visit each person
#** for each person reset the saldo 
#** for each person visit each item bought by this person
#*** for each item add the value to the saldo of the current person
#** for each person subtract the share from the saldo 
# '''Behavior implementation''': Once you have refined your algorithm [[pseudocode]] down to the level of operations on object structures it is straight forward to derive source code that executes the same operations on your object model implementation.
# '''Testing''': Finally, the scenarios may be used to derive automatic [[JUnit]] tests. The pseudocode for a test for our example might look like: 
#: Test update the saldo of all persons: 
#* create a group account object
#* add a person object with name Peter and a person object with name Putri and a person object with name Peng to the group account object
#* add an item object with buyer Peter, description Meat, and value 12$ to the group account object
#* add an item object with buyer Putri, description Salad, and value 9$ to the group account object
#* call method update the saldo of all persons on the group account object
#* ensure that the saldo of the Peter object is 5$
#* ensure that the saldo of the Putri object is 2$
#* ensure that the saldo of the Peter object is -7$
#* ensure that the sum of all saldos is 0$
: Such automatic tests ensure that in the example situation the behavior implementation actually does what is outlined in the storyboard. While these tests are pretty simple and may not identify all kinds of bugs, these tests are very useful to document the desired behavior and the usage of the new features and these tests ensure that the corresponding functionality is not lost due to future changes.

== Summary ==
Story driven modeling has proven to work very well for the cooperation with non IT experts.&lt;ref&gt;{{cite journal|last=Zündorf|first=Albert|author2=J. Leohold |author3=D. Müller |author4=R. Gemmerich |author5=C. Reckord |author6=C. Schneider |author7=S. Semmelroth |title=Using object scenarios for requirements analysis - an experience report|journal=Modellierung 2006|year=2006|pages=269–278}}&lt;/ref&gt;  People from other domains usually have difficulties to describe their needs in general terms (i.e. classes) and general rules (pseudocode). Similarly, normal people have problems to understand pseudocode or to judge, whether their needs are properly addressed or not. However, these people know their business very well and with the help of concrete examples and scenarios it is very easy for normal people to spot problematic cases and to judge whether their needs have been addressed properly.

Story Driven Modeling has matured since its beginning in 1997. In 2013 it is used for teaching e.g. in Kassel University, Paderborn University, Tartu University, Antwerp University, Nazarbayev University Astana, Hasso Platner Institute Potsdam, University of Victoria, ...

Story driven modeling is supported by various tools, e.g. 
* [http://www.fujaba.de/ Fujaba]
* [http://sdmlib.org SDMLib]
* [http://www.uml-lab.com/de/uml-lab/ UMLLab]
* [http://www.hpi.uni-potsdam.de/giese/gforge/mdelab/ MDELab]
* ...

In 2013 a first text book on story driven modeling has been published.&lt;ref name=SDMBook /&gt;

== See also ==
* [[Agile Modeling]]
* [[Agile software development]]
* [[Class-responsibility-collaboration card]]
* [[Object-oriented analysis and design]]
* [[Object-oriented modeling]]
* [[Test-driven development]]
* [[Unified Modeling Language]]

== References ==
{{reflist}}

[[Category:Computer science]]
[[Category:Object-oriented programming]]
[[Category:Software design]]</text>
      <sha1>86uaana4ist77pc5ou2471iuxur56q6</sha1>
    </revision>
  </page>
  <page>
    <title>Open collaboration</title>
    <ns>0</ns>
    <id>41844429</id>
    <revision>
      <id>655478805</id>
      <parentid>651680126</parentid>
      <timestamp>2015-04-08T08:35:44Z</timestamp>
      <contributor>
        <username>Yobot</username>
        <id>7328338</id>
      </contributor>
      <minor/>
      <comment>[[WP:CHECKWIKI]] error fixes using [[Project:AWB|AWB]] (10900)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5838">Open Collaboration is a pattern of collaboration, innovation, and production.&lt;ref name=&quot;doi.org&quot;&gt;Levine, Sheen S., &amp; Prietula, M. J. (2013). Open Collaboration for Innovation: Principles and Performance. ''Organization Science'', doi: 10.1287/orsc.2013.0872 http://doi.org/rfb&lt;/ref&gt; It was observed prominently in [[open source software]], but can also be found in many other instances, such as in [[internet forum]]s,&lt;ref name=&quot;Lakhani, Karim R. 2003&quot;&gt;Lakhani, Karim R., &amp; von Hippel, Eric (2003). How Open Source Software Works: Free User to User Assistance. ''Research Policy'', 32, 923–943&lt;/ref&gt; [[mailing list]]s&lt;ref name=&quot;Jarvenpaa, S. L. 2008&quot;&gt;Jarvenpaa, S. L., &amp; Majchrzak, Ann (2008). Knowledge Collaboration Among Professionals Protecting National Security: Role of Transactive Memories in Ego-Centered Knowledge Networks. ''Organization Science'', 19(2), 260-276&lt;/ref&gt; and internet [[community|communities]].&lt;ref name=&quot;Faraj, S. 2011&quot;&gt;Faraj, S., Jarvenpaa, S. L., &amp; Majchrzak, Ann (2011). Knowledge Collaboration in Online Communities. ''Organization Science'', 22(5), 1224-1239&lt;/ref&gt; Open Collaboration is also thought to be the operating principle underlining a gamut of diverse ventures, including [[BitCoin]], [[TEDx]], and [[Wikipedia]].&lt;ref name=&quot;kurzweilai.net&quot;&gt;http://www.kurzweilai.net/open-collaboration-leading-to-novel-organizations&lt;/ref&gt;

In a 2009 paper, Riehle et al. define open collaboration as collaboration based on three principles of egalitarianism, meritocracy, and self-organization.&lt;ref name=&quot;Riehel et al&quot;&gt;{{Cite journal| doi = 10.1109/MS.2009.44| issn = 0740-7459| volume = 26| issue = 2| pages = 52–58| last1 = Riehle| first1 = D.| last2 = Ellenberger| first2 = J.| last3 = Menahem| first3 = T.| last4 = Mikhailovski| first4 = B.| last5 = Natchetoi| first5 = Y.| last6 = Naveh| first6 = B.| last7 = Odenwald| first7 = T.| title = Open Collaboration within Corporations Using Software Forges| journal = IEEE Software| date = 2009-03}}&lt;/ref&gt;  In a 2013 paper, Levine and Prietula define open collaboration  as &quot;any system of innovation or production that relies on goal-oriented yet loosely coordinated participants who interact to create a product (or service) of economic value, which they make available to contributors and noncontributors alike.&quot; &lt;ref name=&quot;doi.org&quot;/&gt; This definition captures multiple instances, all joined by similar principles. For example, all of the elements—goods of economic value, open access to contribute and consume, interaction and exchange, purposeful yet loosely coordinated work—are present in an open source software project, in Wikipedia, or in a user forum or community. They can also be present in a commercial website that is based on user-generated content. In all of these instances of Open Collaboration, anyone can contribute and anyone can freely partake in the fruits of sharing, which are produced by interacting participants who are loosely coordinated.

Open collaboration is the principle underlying [[Peer Production]], [[Mass Collaboration]], and [[Wikinomics]].&lt;ref name=&quot;doi.org&quot;/&gt; It was observed initially in [[open source software]], but can also be found in many other instances, such as in [[internet forum]]s,&lt;ref name=&quot;Lakhani, Karim R. 2003&quot;/&gt; [[mailing list]]s,&lt;ref name=&quot;Jarvenpaa, S. L. 2008&quot;/&gt; internet [[community|communities]],&lt;ref name=&quot;Faraj, S. 2011&quot;/&gt; and many instances of [[open content]], such as [[creative commons]]. Open Collaboration is also thought to be the operating principle underlining a gamut of diverse ventures, including [[BitCoin]], [[TEDx]], and [[Wikipedia]].&lt;ref name=&quot;kurzweilai.net&quot;/&gt; It also explains some instances of [[Crowdsourcing]], [[Collaborative Consumption]], and [[Open Innovation]].&lt;ref name=&quot;Levine2013&quot;&gt;
{{Cite journal
| doi = 10.1287/orsc.2013.0872
| issn = 1047-7039
| pages = 131230050407004
| last = Levine
| first = Sheen S.
|author2=Michael J. Prietula
 | title = Open Collaboration for Innovation: Principles and Performance
| journal = Organization Science
| accessdate = 2014-08-31
| date = 2013-12-30
| url = http://pubsonline.informs.org/doi/abs/10.1287/orsc.2013.0872
}}
&lt;/ref&gt;

An annual conference dedicated to the research and practice of open collaboration is the International Symposium on Open Collaboration ([[OpenSym]], formerly [[WikiSym]]).&lt;ref&gt;http://www.opensym.org/about-us/&lt;/ref&gt; As per its website, the group defines open collaboration as &quot;collaboration that is egalitarian (everyone can join, no principled or artificial barriers to participation exist), meritocratic (decisions and status are merit-based rather than imposed) and self-organizing (processes adapt to people rather than people adapt to pre-defined processes).&quot;&lt;ref name=&quot;Opensym&quot;&gt;&quot;.
{{Cite web
| title = Definition of Open Collaboration
| work = The Joint International Symposium on Open Collaboration
| author = Dirk Riehle
| quote =&quot;Open collaboration is collaboration that is egalitarian （everyone can join, no principled or artificial barriers to participation exist）, meritocratic （decisions and status are merit-based rather than imposed） and self-organizing （processes adapt to people rather than people adapt to pre-defined processes）.&quot;
| accessdate = 2013-03-26
| url = http://www.wikisym.org/2012/09/28/definition-of-open-collaboration/
}}&lt;/ref&gt;

==References==
{{reflist}}
&lt;!--- After listing your sources please cite them using inline citations and place them after the information they cite. Please see http://en.wikipedia.org/wiki/Wikipedia:REFB for instructions on how to add citations. ---&gt;

{{Open navbox|state=collapsed}}

[[Category:Collaboration]]
[[Category:Crowdsourcing]]
[[Category:Computer programming]]
[[Category:Computer science]]
[[Category:Information technology]]
[[Category:Sociology]]
[[Category:Psychology]]
[[Category:Computational economics]]</text>
      <sha1>5jc9ht44anxolvefbm7czbzhznl44cx</sha1>
    </revision>
  </page>
  <page>
    <title>Visualizing Energy Resources Dynamically on the Earth</title>
    <ns>0</ns>
    <id>42176435</id>
    <revision>
      <id>604892649</id>
      <parentid>603903953</parentid>
      <timestamp>2014-04-19T15:55:57Z</timestamp>
      <contributor>
        <username>Hebrides</username>
        <id>1264145</id>
      </contributor>
      <comment>clean up, punctuation, remove orphan tag using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2328">'''VERDE (Visualizing Energy Resources Dynamically on the Earth)''' is a visualization and analysis capability of the [[United States Department of Energy]] (DOE). The system, developed and maintained by [[Oak Ridge National Laboratory]] (ORNL), provides wide-area situational understanding of the U.S. electric grid. Enabling grid monitoring, weather impacts prediction and analysis, VERDE supports preparedness and response to potentially large outage events. As a real-time geo-visualization capability, it characterizes the dynamic behavior of the grid over interconnects giving views into bulk transmission lines as well as county-level power distribution status. By correlating grid behaviors with cyber events, the platform also enables a method to link cyber-to-infrastructure dependencies.

VERDE integrates different data elements from other available on-line services, databases, and social media. The [[Tennessee Valley Authority]] (TVA) and other major utilities spanning multiple regions across the electric grid interconnection provide real-time status of their systems. Social media sources such as Twitter provide additional data-sources for visualization and analyses.

The VERDE software, which was developed by the Computational Sciences and Engineering Division (CSED) of ORNL, is used outside of the DOE for a number of related national security requirements.

== References ==

*Shankar, M., Stovall, J., Sorokine, A., Bhaduri, B., King, T. (Date 20–24 July 2008) Power and Energy Society General Meeting - Conversion and Delivery of Electrical Energy in the 21st Century, 2008 IEEE ''[http://ieeexplore.ieee.org/xpls/icp.jsp?arnumber=4596282 Visualizing Energy Resources Dynamically on Earth]

== Further reading ==

*Palmer, Katie. (26 September 2011) IEEE Spectrum. ''[http://spectrum.ieee.org/computing/software/grid-visualization-efforts-helped-heal-after-hurricane Multilayer mapping software sped grid restoration from Hurricane Irene damage]

== External links ==
*[http://web.ornl.gov/sci/electricdelivery/research_verde.shtml ORNL VERDE website]
*[http://techportal.eere.energy.gov/technology.do/techID=17 VERDE on the DOE Energy Innovation Portal]

[[Category:Computer science]]
[[Category:Scientific modeling]]
[[Category:Visualization (graphic)]]
[[Category:Geographic information systems]]</text>
      <sha1>ritnhj9kps7862yosxqqpcgv8mi52ep</sha1>
    </revision>
  </page>
  <page>
    <title>Peptide computing</title>
    <ns>0</ns>
    <id>7528959</id>
    <revision>
      <id>641057636</id>
      <parentid>607896179</parentid>
      <timestamp>2015-01-05T08:20:37Z</timestamp>
      <contributor>
        <username>Pietro13</username>
        <id>19017050</id>
      </contributor>
      <comment>Tagged - no footnotes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2423">{{no footnotes|date=January 2015}}
'''Peptide computing''' is a form of [[computing]] which uses [[peptide]]s and [[molecular biology]], instead of traditional [[silicon]]-based computer technologies. The basis of this computational model is the affinity of [[antibodies]] towards peptide sequences. Similar to [[DNA computing]], the parallel interactions of peptide sequences and antibodies have been used by this model to solve a few [[NP-complete]] problems.  Specifically, the [[hamiltonian path problem]] (HPP) and some versions of the [[set cover problem]] are a few NP-complete problems which have been solved using this computational model so far. This model of computation has also been shown to be [[Turing completeness|computationally universal]] (or Turing complete).

This model of computation has some critical advantages over [[DNA computing]]. For instance, while [[DNA]] is made of four building blocks, [[peptide]]s are made of twenty building blocks. The peptide-antibody interactions are also more flexible with respect to recognition and affinity than an interaction between a DNA strand and its reverse complement. However, unlike DNA computing, this model is yet to be practically realized. The main limitation is the availability of specific [[monoclonal antibodies]] required by the model.

== See also ==
*[[Biocomputers]]
*[[Computational gene]]
*[[Computational complexity theory]]
*[[DNA computing]]
*[[Molecular electronics]]
*[[Parallel computing]]

== References ==
*{{cite journal
 |  doi = 10.1007/3-540-48017-X_27
 |  author = M. Sakthi Balan, Kamala Krithivasan, Y. Sivasubramanyam
 |    year = 2001
 |   title = Peptide Computing - Universality and Complexity
 | journal = Lecture Notes in Computer Science
 |  volume = 2340
 |   issue = 
 |   pages = 290&amp;ndash;299
 |     url = http://www.csd.uwo.ca/~sakthi/hpp_revised.ps
 |  series = Lecture Notes in Computer Science
 |  isbn = 978-3-540-43775-8
 }} 

*{{cite journal
 |  author = Hubert Hug and Rainer Schuler
 |    year = 2001
 |   title = Strategies for the development of a peptide computer
 | journal = Bioinformatics
 |  volume = 17
 |   issue = 4
 |   pages = 364&amp;ndash;368
 |     url = http://bioinformatics.oxfordjournals.org/cgi/reprint/17/4/364
 |   doi = 10.1093/bioinformatics/17.4.364
| pmid=11301306}}

[[Category:Classes of computers]]
[[Category:Computer science]]
[[Category:Molecular biology]]


{{Comp-sci-stub}}</text>
      <sha1>09029871ctwfyfhza73js6qr2mmgaz2</sha1>
    </revision>
  </page>
  <page>
    <title>Piranha (software)</title>
    <ns>0</ns>
    <id>42440937</id>
    <revision>
      <id>641275298</id>
      <parentid>630108064</parentid>
      <timestamp>2015-01-06T18:21:58Z</timestamp>
      <contributor>
        <username>Chris the speller</username>
        <id>525927</id>
      </contributor>
      <minor/>
      <comment>replaced: spin off → spin-off using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3812">{{Orphan|date=June 2014}}

'''Piranha''' is a [[text mining]] system developed for the [[United States Department of Energy]] (DOE) by [[Oak Ridge National Laboratory]] (ORNL).  The software processes large volumes of unrelated free-text documents and shows relationships amongst them, a technique valuable across numerous scientific and data domains, from health care fraud to national security.  The results are presented in clusters of prioritized relevance to business and government analysts.  Piranha has six main strengths: 
'''Collecting and Extracting''': Millions of documents from numerous sources such as databases and social media can be collected and text extracted from hundreds of file formats; This info. can then be translated to any number of languages.
'''Storing and indexing''': Documents in search servers, relational databases, etc. can be stored and indexed at will.
'''Recommending''': Recommending the most valuable information for particular users.
'''Categorizing''': Grouping items via supervised and semi-supervised machine learning methods and targeted search lists.
'''Clustering''': Similarity is used to create a hierarchical group of documents.
'''Visualizing''': Showing relationships among documents so that users can quickly recognize connections.

This work has resulted in four issued ( 7,072,883 7,315,858 7,693,9037,805,446) and four pending patents, several commercial licenses (including Pro2Serve and TextOre), a spin-off company (Global Security Information Analysts LLC (GSIA)), an R&amp;D 100 Awards, and scores of peer reviewed research publications.

== References ==
* Cui, X., Beaver, J., St. Charles, J., Potok, T. (September 2008). Proceedings of the IEEE Swarm Intelligence Symposium, St. Louis, Mo. ''[http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4668309 Dimensionality Reduction for High Dimensional Particle Swarm Clustering].
* Yasin, Rutrell (Nov 29, 2012) GCN. ''[http://gcn.com/articles/2012/11/29/energy-lab-piranha-text-analysis.aspx Energy lab's Piranha puts teeth into text analysis]
* Franklin Jr., Curtis (Nov 30, 2012) Enterprise Efficiency.  ''[http://www.enterpriseefficiency.com/author.asp?section_id=1129&amp;doc_id=255261 Piranha Brings Affordable Big-Data to Government]
* Breeden II, John (Dec 7, 2012) GCN. ''[http://gcn.com/articles/2012/12/07/testing-oak-ridge-piranha-text-analysis-tool.aspx Swimming with Piranha: Testing Oak Ridge's text analysis tool]
* Kirby, Bob (Summer 2013) FedTech. ''[http://www.fedtechmagazine.com/article/2013/08/big-data-can-help-federal-government-move-mountains-heres-how Big Data Can Help the Federal Government Move Mountains. Here's How.]

== Awards ==
* 2007 R&amp;D 100 Magazine’s Award ''[http://www.rdmag.com/award-winners/2007/08/digital-feeding-frenzy Piranha (software)]

== Patents ==
* {{US patent|7072883}} – ''System for gathering and summarizing internet information''
* {{US patent|7315858}} – ''Method for gathering and summarizing internet information''
* {{US patent|7693903}}
* {{US patent|7805446}} – ''Agent-based method for distributed clustering of textual information''
* {{US patent|7937389}} – ''Dynamic reduction of dimensions of a document vector in a document search and retrieval system''
* {{US patent|8473314}} – ''Method and system for determining precursors of health abnormalities from processing medical records''

== External links ==
* DOE Energy Innovlation Portal (2014) ''[http://techportal.eere.energy.gov/technology.do/techID=933 Agent-Based Software for Gathering and Summarizing Textual and Internet Information].
* [http://cda.ornl.gov/piranha.shtml ORNL Piranha website]

[[Category:Computer science]]
[[Category:Cluster computing]]
[[Category:Data mining and machine learning software]]
[[Category:Agent-based software]]


{{software-stub}}</text>
      <sha1>8mca1g9w5rwj3l79c6w4s6nfbzr2f8t</sha1>
    </revision>
  </page>
  <page>
    <title>Browser-based computing</title>
    <ns>0</ns>
    <id>43683250</id>
    <revision>
      <id>632895592</id>
      <parentid>632445561</parentid>
      <timestamp>2014-11-08T00:27:21Z</timestamp>
      <contributor>
        <username>Stesmo</username>
        <id>98915</id>
      </contributor>
      <comment>Removed external links in the body of the article [[WP:EL]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1799">'''Browser-based computing''' is a term denoting use of the [[web browsers]] to perform computing tasks. Opportunities for computing on the Web have been noted as far back as 1997.&lt;ref&gt;{{cite journal |author=Furmanski W|title= Petaops and Exaops: Super-computing on the Web. |journal=IEEE Internet Computing |year=1997 |volume=1 |pages=38–46 | doi=10.1109/4236.601097}}&lt;/ref&gt; Computing over the web was described in 2000.&lt;ref&gt;{{cite journal |author=Fox G|title= Introduction to Web computing |journal=Computing in Science &amp; Engineering |year=2001 |volume=3 |pages=52–53 | url=http://www.researchgate.net/publication/3422394_Introduction_to_web_computing/links/0deec51dc46769b7de000000}}&lt;/ref&gt; Applications include [[distributed computing]] for [[web worker]]s as illustrated by CrowdProcess, the use of the browser's stack in QMachine,&lt;ref&gt;{{cite journal |author=Wilkinson SR, Almeida JS |title= QMachine: commodity supercomputing in web browsers. |journal=BMC bioinformatics |year=2014 |volume=15 |pages=176 | pmid=24913605}}&lt;/ref&gt; the embedding of web applications as semantic [[hypermedia]] components&lt;ref&gt;{{cite journal |author=Verborgh R |title=Serendipitous web applications through semantic hypermedia |journal=Sort |year=2014 |volume=100 | url=http://ruben.verborgh.org/phd/ruben-verborgh-phd.pdf}}&lt;/ref&gt; and  the Signaling Server in [[Peer-to-peer]] networks set via [[WebRTC]].&lt;ref&gt;{{Cite web|url = http://www.webrtc.org|title = WebRTC|date = |accessdate = |website = |publisher = |last = |first = }}&lt;/ref&gt; Browser-based computing complements [[Cloud Computing|cloud computing]], because they reduce server-side computational load, often using cloud-hosted, [[RESTful]] [[web services]].  

==References==
{{Reflist}}

[[Category:Computer science]]

{{cat improve|date=September 2014}}</text>
      <sha1>4xrifoa1gcyccgs4i1nla0ymyjn8151</sha1>
    </revision>
  </page>
  <page>
    <title>Category:CS50</title>
    <ns>14</ns>
    <id>43926234</id>
    <revision>
      <id>626698138</id>
      <timestamp>2014-09-23T00:14:25Z</timestamp>
      <contributor>
        <username>Hatashe</username>
        <id>6801363</id>
      </contributor>
      <comment>Category cs50 created</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="659">This category ''CS50'' is computer science program at School of Engineering and Applied Sciences in Harvard University. Which course code is cs50. 

{{CategoryTOC}}

[[Category:Computer science]]
[[Category:People in information technology]]
[[Category:Scholars and academics by subject]]
[[Category:Mathematical science occupations]] 
[[Category:Computing]]
[[Category:Applied sciences]]
[[Category:Universities and colleges in Massachusetts]]
[[Category:Ivy League]]
[[Category:Colonial Colleges]]
[[Category:Wikipedia categories named after universities and colleges in the United States]]
[[Category:Universities and colleges in Cambridge, Massachusetts]]</text>
      <sha1>qhy7ph11ctjeg8j2kdo8jzx4s72gq23</sha1>
    </revision>
  </page>
  <page>
    <title>Michael D. Smith (computer scientist)</title>
    <ns>0</ns>
    <id>7488498</id>
    <revision>
      <id>626698549</id>
      <parentid>555880135</parentid>
      <timestamp>2014-09-23T00:18:27Z</timestamp>
      <contributor>
        <username>Hatashe</username>
        <id>6801363</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1499">{{other people|Michael Smith}}

'''Michael D. Smith''' is the Dean of the Faculty of Arts and Sciences at [[Harvard University]].  He is also the John H. Finley, Jr. Professor of Engineering and Applied Sciences in the School of Engineering and Applied Sciences.  In addition to his academic position, Smith was the Chief Scientist and co-founder of [[Liquid Machines]], Inc., a provider of enterprise rights management software.

Smith received his Ph.D. in electrical engineering from [[Stanford University]] in 1993, his master of science degree from [[Worcester Polytechnic Institute]] in 1985, and his bachelor of science in electrical engineering and computer science from [[Princeton University]] in June 1983.

==External links==
*[http://www.eecs.harvard.edu/~smith/ Profile at Harvard University]

{{Persondata &lt;!-- Metadata: see [[Wikipedia:Persondata]]. --&gt;
| NAME              = Smith, Michael D.
| ALTERNATIVE NAMES =
| SHORT DESCRIPTION = American computer scientist
| DATE OF BIRTH     =
| PLACE OF BIRTH    =
| DATE OF DEATH     =
| PLACE OF DEATH    =
}}

{{Computer science}}
{{Technology}}

{{DEFAULTSORT:Smith, Michael D.}}
[[Category:American computer scientists]]
[[Category:Harvard University faculty]]
[[Category:Living people]]
[[Category:Stanford University alumni]]
[[Category:Princeton University alumni]]
[[Category:Worcester Polytechnic Institute alumni]]
[[Category:Computer science]]
[[Category:Harvard University]]
[[Category:Computer scientists]]
[[Category:CS50]]</text>
      <sha1>h42s7ub4sckazvwgadmwx9a9m0zq48k</sha1>
    </revision>
  </page>
  <page>
    <title>Matt Welsh (computer scientist)</title>
    <ns>0</ns>
    <id>2630919</id>
    <revision>
      <id>630535074</id>
      <parentid>626698555</parentid>
      <timestamp>2014-10-21T16:49:59Z</timestamp>
      <contributor>
        <ip>108.66.129.231</ip>
      </contributor>
      <comment>/* The Social Network */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="5359">{{ infobox scientist
| name = Matt Welsh
| thesis_title = An Architecture for Highly Concurrent, Well-Conditioned Internet Services
| thesis_year = 2002
| thesis_url = http://www.eecs.harvard.edu/~mdw/papers/mdw-phdthesis.pdf
| alma_mater = [[Cornell University]]&lt;br /&gt;[[University of California, Berkeley]]
| doctoral_advisor = [[David Culler]]
}}

'''Matthew David &quot;Matt&quot; Welsh''' is a [[computer scientist]] and [[software engineer]] at [[Google]]. He was the [[Gordon McKay]] [[Professor]] of [[Computer Science]] at [[Harvard University]] and author of several books about the [[Linux]] operating system, several Linux [[How-to|HOWTOs]],&lt;ref&gt;[http://www.google.com/custom?hl=en&amp;safe=off&amp;client=google-coop-np&amp;cof=FORID%3A13%3BAH%3Aleft%3BS%3Ahttp%3A%2F%2Ftldp.org%3BCX%3ATLDP%2520Search%2520Engine%3BL%3Ahttp%3A%2F%2Ftldp.org%2Flogos%2Fldp2.jpg%3BLH%3A100%3BLP%3A1%3BVLC%3A%23551a8b%3BGFNT%3A%23666666%3BDIV%3A%23cccccc%3B&amp;adkw=AELymgVCfmdB-2w4LcO_LRL563JmPpZ_buycpilePnuKeRW-2G-lDt39Q3qj4EQLHDoQf2VDhjcpZCx2Tj8IQBhgn8VwznD5kHOoxlXl6DqbTI3czdYiaRdRyhbVT_xhgU0nOtpnFOKv&amp;boostcse=0&amp;q=matt+welsh&amp;btnG=Search&amp;cx=017644269519104757279%3Agm62gtzaoky Google internal search for Matt Welsh] at [[The Linux Documentation Project]]&lt;/ref&gt; the [[LinuxDoc]] format&lt;ref&gt;Announcement [http://www.w3.org/Tools/Linuxdoc-SGML.html &quot;Linuxdoc-SGML v1.1 now available&quot;] 1994-06-07&lt;/ref&gt; and articles in the [[Linux Journal]].&lt;ref name=&quot;O'Reilly&quot;&gt;{{cite book|last1= Welsh |first1= Matt |last2= Kaufman |first2= Lar |editor1-first= Andy |editor1-last= Oram |title= Running Linux |url= |format= |accessdate= |edition= 2nd |date=August 1996 |origyear= 1995 |publisher= [[O'Reilly Media|O'Reilly &amp; Associates]] |location= [[Sebastopol, California]] |isbn= 1-56592-151-8 |oclc= |doi= |id= |page= 631 |chapter= About the authors |chapterurl= |quote= |ref= |bibcode= }}&lt;/ref&gt;

In November 2010, five months after being granted [[tenure (academic)|tenure]],&lt;ref&gt;[http://www.seas.harvard.edu/news-events/press-releases/matt-welsh-promoted-to-full-professor-granted-tenure Matt Welsh promoted to full professor; granted tenure]&lt;/ref&gt; Welsh announced that he was leaving Harvard.&lt;ref&gt;[http://matt-welsh.blogspot.com/2010/11/why-im-leaving-harvard.html Why I'm leaving Harvard]&lt;/ref&gt;

He is a 1992 graduate of the [[North Carolina School of Science and Mathematics]].&lt;ref&gt;{{cite web|last=Welsh|first=Matt|title=NCSSM and how it saved my life|url=http://matt-welsh.blogspot.com/2012/10/ncssm-and-how-it-saved-my-life.html|work=Volatile and Decentralized}}&lt;/ref&gt;

Welsh received a BS from [[Cornell University]] in 1996 and MS and PhD degrees from the [[University of California, Berkeley]] in 1999 and 2002, respectively.&lt;ref name=&quot;harvard-welsh&quot;&gt;{{cite web | publisher = Harvard University | year = 2007 | url = http://www.eecs.harvard.edu/~mdw/ | title = Matt Welsh | accessdate = 2007-11-26}}&lt;/ref&gt; He spent the 1996-7 school year at the [[University of Cambridge Computer Laboratory]] and at the [[University of Glasgow]].&lt;ref name=&quot;O'Reilly&quot;/&gt;

== The Social Network ==
Welsh taught the [[operating system]] class in Harvard in which [[Mark Zuckerberg]] was a student. Welsh was later portrayed by actor [[Brian Palermo]] in the movie [[The Social Network]] featuring Zuckerberg and the founding of [[Facebook]]. Welsh was reportedly paid $200 for his powerpoint slides used in the movie &lt;ref&gt;{{cite web|title=NCSSM commencement speech |url=http://new.livestream.com/ncssmlivestream/commencement2014/videos/52485109}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=In Defense of Mark Zuckerberg|url=http://matt-welsh.blogspot.com/2010/10/in-defense-of-mark-zuckerberg.html}}&lt;/ref&gt;

== Publications ==
*{{cite book|last1= Dalheimer|first1= Matthias Kalle |last2= Welsh |first2= Matt |editor1-first= |editor1-last= |title= Running Linux |url= http://shop.oreilly.com/product/9780596007607.do |accessdate= 2013-08-23 |edition= 5th |year= 2005 |origyear=  |publisher= [[O'Reilly Media]] |location= |isbn= 978-0596007607 |oclc= |doi= |id= |ref= |bibcode= }}

*{{cite book|last1= Welsh |first1= Matt |last2= Hughes |first2= Phil |last3= Bandel |first3= David |last4= Beletsky |first4= Boris |last5= Dreilinger |first5= Sean |last6= Kiesling |first6= Robert |last7= Liebovitch |first7= Evan |last8= Pierce |first8= Henry |editor1-first= |editor1-last= |title= Linux Installation and Getting Started |url= http://tldp.org/LDP/gs/gs.html |accessdate= 2009-08-14 |edition= 2nd |year= 1998 |origyear= 1992-1996 |publisher= [[Specialized Systems Consultants]] |location= |isbn= 1-57831-001-6 |oclc= |doi= |id= |ref= |bibcode= }}
*See footnotes below

== References ==
{{Reflist|1}}
==External Links==
*http://www.mdw.la/

{{Authority control|VIAF=9961354}}
{{Persondata &lt;!-- Metadata: see [[Wikipedia:Persondata]]. --&gt;
| NAME              =Welsh, Matt
| ALTERNATIVE NAMES =
| SHORT DESCRIPTION = Computer scientist
| DATE OF BIRTH     =
| PLACE OF BIRTH    =
| DATE OF DEATH     =
| PLACE OF DEATH    =
}}

{{Computer science}}
{{Technology}}

{{DEFAULTSORT:Welsh, Matt}}
[[Category:Cornell University alumni]]
[[Category:University of California, Berkeley alumni]]
[[Category:Harvard University faculty]]
[[Category:Living people]]
[[Category:Year of birth missing (living people)]]
[[Category:Computer science]]
[[Category:Harvard University]]
[[Category:Computer scientists]]
[[Category:CS50]]

{{compu-bio-stub}}</text>
      <sha1>a5s0fdncz9si5vf7fmgelcbm22m8ye2</sha1>
    </revision>
  </page>
  <page>
    <title>Off-line programming (robotics)</title>
    <ns>0</ns>
    <id>36926314</id>
    <revision>
      <id>652837181</id>
      <parentid>652740667</parentid>
      <timestamp>2015-03-21T05:07:46Z</timestamp>
      <contributor>
        <username>BG19bot</username>
        <id>14508071</id>
      </contributor>
      <minor/>
      <comment>[[WP:CHECKWIKI]] error fix for #64.  Do [[Wikipedia:GENFIXES|general fixes]] if a problem exists. - using [[Project:AWB|AWB]] (10839)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1846">'''Off-line programming''' (OLP) is a [[robotics simulator|robot programming]] method where the [[robot software|robot program]] is created independent from the actual robot cell. The robot program is then uploaded to the real [[robot]] for execution.
In off-line programming the robot cell is commonly represented through a graphical 3D model. Nowadays OLP and [[simulation]] tools help robot integrators create the optimal program paths for the robot to perform a specific task.&lt;ref&gt;Bennett Brumson, Robotic Simulation and Off-line Programming: From Academia to Industry, 11/02/2009, http://www.robotics.org/content-detail.cfm/Industrial-Robotics-Featured-Articles/Robotic-Simulation-and-Off-line-Programming-From-Academia-to-Industry/content_id/1825 ,retr. 29.August 2014&lt;/ref&gt;  Robot movements, reachability analysis, collision and near-miss detection and cycle time reporting can be included when simulating the robot program.
OLP does not interfere with production as the program for the robot is created outside the production process on an external computer.&lt;ref&gt;http://www.delfoi.com/web/solutions/robotiikka/en_GB/offline/, Delfoi, 2014 retr. 29.August 2014&lt;/ref&gt;
This method contradicts to the traditional programming of [[industrial robot]]s where a robot teach pendant is used for programming the robot manually.&lt;ref&gt;http://www.globalspec.com/learnmore/motion_controls/operator_interfaces/teach_pendants, retr. 29.August 2014 Globalspec, 2014&lt;/ref&gt;

== Free Offline simulators ==
* [https://www.robodk.com/ RoboDK]: A robot development kit to simulate industrial robots. RoboDK allows you to program any robot using [https://www.python.org/ Python]. RoboDK is free for educational purposes.

== See also ==
* [[Robotics simulator]]

== Notes ==
{{Reflist}}

[[Category:Computer science]]
[[Category:Robotics]]
[[Category:Automation]]</text>
      <sha1>nb6awvleffvxpzzxkto7jtyxmfi3uvc</sha1>
    </revision>
  </page>
  <page>
    <title>Technology transfer in computer science</title>
    <ns>0</ns>
    <id>44409131</id>
    <revision>
      <id>635876536</id>
      <parentid>635012361</parentid>
      <timestamp>2014-11-29T09:26:32Z</timestamp>
      <contributor>
        <username>Greenrd</username>
        <id>15476</id>
      </contributor>
      <minor/>
      <comment>/* Examples */ added citation for Riak</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4807">'''Technology transfer in computer science''' refers to the [[technology transfer|transfer of technology]] developed in [[computer science]] or applied computing research, from universities and governments to the [[private sector]]. These technologies may be abstract, such as [[algorithms]] and [[data structures]], or concrete, such as [[open source software]] packages.

== Examples ==
{{Incomplete list|date=November 2014}}Notable examples of technology transfer in computer science include:
{| class=&quot;wikitable&quot;
!Year of transfer
!Technology
!
Field(s)
!Originally developed at
!Transfer method(s)
!Commercialised at
!Patented
!Used by
|-
|c. 1964
|[[BASIC]]
|[[Programming languages]]
|{{Flagdeco|US}}[[Dartmouth College]]
|[[Freeware]]
|Computer manufacturers and others
|No
|Numerous [[BASIC dialects]]
|-
|1974 (Internet Protocol published)

1992 (interconnection)
|[[The Internet]]
|[[Computer networking]]

[[The Internet]]
|{{Flagdeco|US}}[[DARPA|Advanced Research Projects Agency]]
|[[Request for Comments|RFC]]

1992 law permitting commercial interconnection
|Numerous companies
|No
|Millions of [[web sites]] and other internet properties
|-
|1981
|[[KMS (hypertext)|KMS]]
|[[Hypertext]]
|{{Flagdeco|US}}[[Carnegie Mellon University]]
|Spin-out
|Knowledge Systems
|No
|?
|-
|1984
|[[MATLAB]]
|[[Programming languages]]

[[Scientific computing]]

[[List of numerical analysis software|Numerical computing]]
|{{Flagdeco|US}}[[University of New Mexico]]&lt;ref name=&quot;:0&quot;&gt;{{Cite web|url = http://uk.mathworks.com/company/newsletters/articles/the-origins-of-matlab.html|title = The Origins of MATLAB|date = 2004|accessdate = 19 November 2014|website = Mathworks.com|publisher = |last = Moler|first = Cleve}}&lt;/ref&gt;
|Incorporation and rewrite&lt;ref name=&quot;:0&quot; /&gt;
|{{Flagdeco|US}}[[MathWorks]]
|No (original)

Yes (from 2001)&lt;ref&gt;{{Cite web|url = http://uk.mathworks.com/company/aboutus/policies_statements/patents.html|title = Patents|date = |accessdate = 19 November 2014|website = Mathworks.com|publisher = |last = |first = }}&lt;/ref&gt;
|Millions of users
|-
|c. 1985
|[[HyperTIES]]
|[[Hypertext]]
|{{Flagdeco|US}}[[University of Maryland]]&lt;ref name=&quot;:1&quot;&gt;{{Cite web|url = http://www.cs.umd.edu/hcil/hyperties/|title = Hypertext Research: The Development of HyperTIES|date = |accessdate = 22 November 2014|website = Human Computer Interaction Lab|publisher = University of Maryland|last = |first = }}&lt;/ref&gt;
|[[Intellectual property license|Licensing]]&lt;ref name=&quot;:1&quot; /&gt;
|{{Flagdeco|US}}[[Cognetics Corporation]]
|?
|[[Union Carbide]], [[Hewlett-Packard]], others&lt;ref name=&quot;cognetics-hyperties&quot;&gt;{{cite web|url=http://www.leadersintheknow.biz/AboutUs/OurHistory/tabid/174/Default.aspx|title=Cognetics History|publisher=[[Cognetics Corporation]]|accessdate = 22 November 2014}}&lt;/ref&gt;
|-
|1990 (initial software)

1994 (Netscape)&lt;ref&gt;{{Cite web|url = http://arstechnica.com/business/2011/10/before-netscape-forgotten-web-browsers-of-the-early-1990s/|title = Before Netscape: the forgotten Web browsers of the early 1990s|date = 11 October 2011|accessdate = 22 November 2014|website = [[Ars Technica]]|publisher = |last = Lasar|first = Matthew}}&lt;/ref&gt;
|[[World Wide Web]]
|[[Hypertext]]

[[World Wide Web]]
|{{Flagdeco|Switzerland}}[[CERN]]
|Unfettered use (no patents)
[[W3C|Consortium]] (to create recommended standards)
|{{Flagdeco|US}}[[Netscape]] and others
|No
|Millions of [[web sites]]
|-
|1991
|[[Gopher (protocol)|Gopher]]
|[[Computer networking]]

[[The Internet]]

[[Information retrieval]]
|{{Flagdeco|US}}[[University of Minnesota]]
|[[Request for Comments|RFC]]

[[Freeware]]
|Numerous companies
|No
|Numerous Gopher sites
|-
|1998
|[[PageRank]]
|[[Information retrieval]]

[[World Wide Web]]

[[Algorithms]]
|{{Flagdeco|US}}[[Stanford University]]
|[[Spin-out]]
|{{Flagdeco|US}}[[Google Inc.|Google]]
|Yes
|[[Google Search]]
|-
|2004 (software)

2011 (incorporation)
|[[Scala (programming language)|Scala]]
|[[Programming languages]]

[[Object-oriented programming]]
|{{Flagdeco|Switzerland}}[[École Polytechnique Fédérale de Lausanne]]
|Open source
|{{Flagdeco|US}}[[Typesafe Inc.]] and others
|?
|[[Play framework|Play]], [[Akka (toolkit)|Akka]] and others
|-
|2013
|[[Conflict-free replicated data types|CRDTs]]
|[[Distributed computing]]
|{{Flagdeco|France}}[[INRIA]] and others
|?
|{{Flagdeco|US}}[[Basho Technologies]]&lt;ref name=&quot;:2&quot;&gt;{{Cite web|url = http://basho.com/introducing-riak-2-0/|title = Introducing Riak 2.0: Data Types, Strong Consistency, Full-Text Search, and Much More|date = 29 October 2013|accessdate = 29 November 2014|website = |publisher = [[Basho Technologies]]|last = |first = }}&lt;/ref&gt;
|No
|[[Riak]]&lt;ref name=&quot;:2&quot; /&gt;
|}

== References ==
&lt;references /&gt;[[Category:Technology transfer|Computer science]]
[[Category:Computer science]]
[[Category:Computing-related lists]]</text>
      <sha1>7p9mwpljz0fc2d68kpm13hdmdej7kez</sha1>
    </revision>
  </page>
  <page>
    <title>Mpack (Unix)</title>
    <ns>0</ns>
    <id>44370337</id>
    <revision>
      <id>635880088</id>
      <parentid>635796797</parentid>
      <timestamp>2014-11-29T10:25:09Z</timestamp>
      <contributor>
        <username>Yobot</username>
        <id>7328338</id>
      </contributor>
      <minor/>
      <comment>/* External links */[[WP:CHECKWIKI]] error fixes using [[Project:AWB|AWB]] (10503)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="618">'''mpack''' and '''munpack''' are utilities used to encode and decode [[binary file|binaries]] for use in [[email|mail messages]] following the [[MIME]] standard.  It was originally written by John Gardiner Myers of [[Carnegie Mellon University]] in 1993, and has been ported to [[Mac OS]] and [[Microsoft Windows|Windows]].

== External links ==

* [ftp://ftp.andrew.cmu.edu/pub/mpack Unix source]
* [http://sourceforge.net/projects/mpack-win Windows port]

[[Category:Software]]
[[Category:Email]]
[[Category:Technology]]
[[Category:Computer science]]
[[Category:1993]]
[[Category:Microsoft Windows]]


{{unix-stub}}</text>
      <sha1>2xvyin11ykp5g4c1f0ovwcsx8kcy1pz</sha1>
    </revision>
  </page>
  <page>
    <title>Electronic engineering</title>
    <ns>0</ns>
    <id>28923910</id>
    <revision>
      <id>655757438</id>
      <parentid>655370237</parentid>
      <timestamp>2015-04-10T00:18:40Z</timestamp>
      <contributor>
        <ip>69.130.148.151</ip>
      </contributor>
      <comment>/* Education and training */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="25423">[[File:Componentes.JPG|thumb|right|[[Electronic components]]]]
[[Image:Silego clock generator.JPG|thumb|right|[[Printed circuit board]]]]
{{see also|Electrical engineering}}

'''Electronics engineering''', or '''electronic engineering''', is an [[engineering]] discipline which utilizes non-linear and [[active component|active]] electrical components (such as [[Electron tube (disambiguation)|electron tubes]], and [[semiconductor device]]s, especially [[transistors]], [[diode]]s and [[integrated circuits]]) to design [[electronic circuit]]s, [[electronic device|devices]] and [[electronic system|systems]]. The discipline typically also designs [[passive component|passive]] electrical components, usually based on [[printed circuit board]]s.

The term &quot;electronic engineering&quot; denotes a broad engineering field that covers subfields such as [[analog electronics]], [[digital electronics]], [[consumer electronics]], [[embedded systems]] and [[power electronics]]. [[Electronics]] engineering deals with implementation of applications, principles and algorithms developed within many related fields, for example [[solid-state physics]], [[radio engineering]], [[telecommunications]], [[control systems]], [[signal processing]], [[systems engineering]], [[computer engineering]], [[instrumentation engineering]], [[electric power control]], [[robotics]], and many others.

The [[Institute of Electrical and Electronics Engineers]] (IEEE) is one of the most important and influential organizations for electronics engineers.

== Relationship to electrical engineering ==
Electronics is a subfield within the wider [[electrical engineering]] academic subject. An academic degree with a major in electronics engineering can be acquired from some universities, while other universities use electrical engineering as the subject. The term [[electrical engineer]] is still used in the academic world to include electronic engineers.&lt;ref&gt;Allan R. Hambley ''Electrical Engineering'', pp. 3, 441, Prentice Hall, 2004 ISBN 978-0-13-147046-0&lt;/ref&gt; However, some people consider the term 'electrical engineer' should be reserved for those having specialized in power and heavy current or high voltage engineering, while others consider that power is just one subset of electrical engineering and (and indeed the term '[[power engineering]]' is used in that industry) as well as '[[electrical distribution]] engineering'. Again, in recent years there has been a growth of new separate-entry degree courses such as '[[information engineering]]', '[[systems engineering]]' and '[[communication systems engineering]]', often followed by academic departments of similar name, which are typically not considered as subfields of electronics engineering but of electrical engineering.&lt;ref&gt;{{cite book|url=http://books.google.com/books?id=X6dEAAAAIAAj&amp;dq=electrical+vs+electronic+engineering&amp;lr= |title=Principles of Electrical Engineering |publisher=Books.google.com |date= |accessdate=2012-10-29}}&lt;/ref&gt;&lt;ref&gt;Anthony J. Pansini ''Electrical Distribution Engineering'', p. xiv, The Fairmont Press Inc., 2006 ISBN 978-0-88173-546-8&lt;/ref&gt;

== History ==
{{Main|History of electronic engineering}}
Electronic engineering as a profession sprang from technological improvements in the [[telegraph]] industry in the late 19th century and the [[radio]] and the [[telephone]] industries in the early 20th century. People were attracted to radio by the technical fascination it inspired, first in receiving and then in transmitting. Many who went into broadcasting in the 1920s were only 'amateurs' in the period before [[World War I]].&lt;ref&gt;Erik Barnouw ''A Tower in Babel'', p. 28, Oxford University Press US, 1966 ISBN 978-0-19-500474-8&lt;/ref&gt;

To a large extent, the modern discipline of electronic engineering was born out of telephone, radio, and [[television]] equipment development and the large amount of electronic systems development during [[World War II]] of [[radar]], [[sonar]], communication systems, and advanced munitions and weapon systems. In the interwar years, the subject was known as [[radio engineering]] and it was only in the late 1950s that the term '''electronic engineering''' started to emerge.&lt;ref&gt;{{cite book|url=http://books.google.com/books?id=zhdDAAAAIAAJ&amp;dq=radio+engineering&amp;lr= |title=Radio Engineering Principles |publisher=Books.google.com |date= |accessdate=2012-10-29}}&lt;/ref&gt;

== Electronics ==
{{main|Electronics}}
In the field of electronic engineering, engineers design and test [[Electronic circuit|circuits]] that use the [[Electromagnetism|electromagnetic]] properties of [[electrical element|electrical components]] such as [[resistor]]s, [[capacitor]]s, [[inductor]]s, [[diode]]s and [[transistor]]s to achieve a particular functionality. The [[Tuner (electronics)|tuner circuit]], which allows the user of a radio to [[electronic filter|filter]] out all but a single station, is just one example of such a circuit.

In designing an integrated circuit, electronics engineers first construct circuit [[schematic]]s that specify the electrical components and describe the interconnections between them. When completed, [[very-large-scale integration|VLSI]] engineers convert the schematics into actual layouts, which map the layers of various [[conductor (material)|conductor]] and [[semiconductor]] materials needed to construct the circuit. The conversion from schematics to layouts can be done by [[software]] (see [[electronic design automation]]) but very often requires human fine-tuning to decrease space and power consumption. Once the layout is complete, it can be sent to a [[fabrication plant]] for manufacturing.

[[Integrated circuit]]s and other electrical components can then be assembled on [[printed circuit board]]s to form more complicated circuits. Today, printed circuit boards are found in most electronic devices including [[television]]s, [[computer]]s and [[digital audio player|audio player]]s.&lt;ref&gt;Charles A. Harper ''High Performance Printed Circuit Boards'', pp. xiii–xiv, McGraw-Hill Professional, 2000 ISBN 978-0-07-026713-8&lt;/ref&gt;

== Subfields ==

Electronic engineering has many subfields. This section describes some of the most popular subfields in electronic engineering; although there are engineers who focus exclusively on one subfield, there are also many who focus on a combination of subfields.

'''Signal processing''' deals with the analysis and manipulation of [[signal (information theory)|signals]]. Signals can be either [[analog signal|analog]], in which case the signal varies continuously according to the information, or [[digital signal|digital]], in which case the signal varies according to a series of discrete values representing the information.

For analog signals, signal processing may involve the [[Amplifier|amplification]] and [[audio filter|filtering]] of audio signals for audio equipment or the [[modulation]] and [[demodulation]] of signals for [[telecommunication]]s. For digital signals, signal processing may involve the [[Data compression|compression]], [[error checking]] and [[error detection]] of digital signals.

'''Telecommunications engineering''' deals with the [[transmission (telecommunications)|transmission]] of [[information]] across a [[channel (communications)|channel]] such as a [[coax cable|co-axial cable]], [[optical fiber]] or [[free space]].

Transmissions across free space require information to be encoded in a [[carrier wave]] in order to shift the information to a [[Carrier wave|carrier frequency]] suitable for transmission, this is known as [[modulation]]. Popular analog modulation techniques include [[amplitude modulation]] and [[frequency modulation]]. The choice of modulation affects the cost and performance of a system and these two factors must be balanced carefully by the engineer.

Once the transmission characteristics of a system are determined, telecommunication engineers design the [[transmitter]]s and [[receiver (radio)|receivers]] needed for such systems. These two are sometimes combined to form a two-way communication device known as a [[transceiver]]. A key consideration in the design of transmitters is their [[power consumption]] as this is closely related to their [[signal strength]]. If the signal strength of a transmitter is insufficient the signal's information will be corrupted by [[signal noise|noise]].

'''Control engineering''' has a wide range of applications from the flight and propulsion systems of [[Airliner|commercial airplanes]] to the [[cruise control]] present in many modern [[automobile|cars]]. It also plays an important role in [[industrial automation]].

Control engineers often utilize [[feedback]] when designing [[control system]]s. For example, in a [[automobile|car]] with [[cruise control]] the vehicle's [[speed]] is continuously monitored and fed back to the system which adjusts the [[Internal combustion engine|engine's]] power output accordingly. Where there is regular feedback, [[control theory]] can be used to determine how the system responds to such feedback.

'''Instrumentation engineering''' deals with the design of devices to measure physical quantities such as [[pressure]], [[Mass flow rate|flow]] and [[temperature]]. These devices are known as [[instrumentation]].

The design of such instrumentation requires a good understanding of [[physics]] that often extends beyond [[electromagnetism|electromagnetic theory]]. For example, [[radar gun]]s use the [[Doppler effect]] to measure the speed of oncoming vehicles. Similarly, [[thermocouple]]s use the [[Peltier–Seebeck effect]] to measure the temperature difference between two points.

Often instrumentation is not used by itself, but instead as the [[sensor]]s of larger electrical systems. For example, a thermocouple might be used to help ensure a furnace's temperature remains constant. For this reason, instrumentation engineering is often viewed as the counterpart of control engineering.

'''Computer engineering''' deals with the design of [[computer]]s and computer systems. This may involve the design of new [[computer hardware]], the design of [[personal digital assistant|PDAs]] or the use of computers to control an [[manufacturing|industrial plant]]. Development of [[embedded systems]]—systems made for specific tasks (e.g., mobile phones)—is also included in this field.  This field includes the [[micro controller]] and its applications.
Computer engineers may also work on a system's [[software]]. However, the design of complex software systems is often the domain of [[software engineering]], which is usually considered a separate discipline.

'''VLSI design engineering''' [[VLSI]] stands for ''very large scale integration''. It deals with fabrication of ICs and various electronics components.

== Typical undergraduate syllabus ==

Apart from electromagnetics and network theory, other items in the syllabus are particular to ''electronics'' engineering course. ''Electrical'' engineering courses have other specialisms such as [[machines]], [[power generation]] and [[Electricity distribution|distribution]]. This list does not include the extensive [[engineering mathematics]] curriculum that is a prerequisite to a degree.&lt;ref&gt;Rakesh K. Garg/Ashish Dixit/Pavan Yadav ''Basic Electronics'', p. 1, Firewall Media, 2008 ISBN 978-81-318-0302-8&lt;/ref&gt;&lt;ref&gt;Sachin S. Sharma ''Power Electronics'', p. ix, Firewall Media, 2008 ISBN 978-81-318-0350-9&lt;/ref&gt;

=== Electromagnetics ===

Elements of [[vector calculus]]: [[divergence]] and [[Curl (mathematics)|curl]]; [[Gauss theorem|Gauss']] and [[Stokes' theorem]]s, [[Maxwell's equations]]: differential and integral forms. [[Wave equation]], [[Poynting vector]]. [[Plane waves]]: propagation through various media; [[Reflection (physics)|reflection]] and [[refraction]]; [[phase velocity|phase]] and [[group velocity]]; [[skin depth]]. [[Transmission lines]]: [[characteristic impedance]]; impedance transformation; [[Smith chart]]; [[impedance matching]]; pulse excitation. [[Waveguides]]: modes in rectangular waveguides; [[boundary conditions]]; [[cut-off frequency|cut-off frequencies]]; [[dispersion relation]]s. Antennas: [[Dipole antenna]]s; [[antenna array]]s; radiation pattern; reciprocity theorem, [[antenna gain]].&lt;ref&gt;Edward J. Rothwell/Michael J. Cloud ''Electromagnetics'', CRC Press, 2001 ISBN 978-0-8493-1397-4&lt;/ref&gt;&lt;ref&gt;Joseph Edminister Schaum's Outlines ''Electromagnetics'', McGraw Hill Professional, 1995 ISBN 978-0-07-021234-3&lt;/ref&gt;

=== Network analysis ===

Network graphs: matrices associated with graphs; incidence, fundamental cut set and fundamental circuit matrices. Solution methods: nodal and mesh analysis. Network theorems: superposition, Thevenin and Norton's maximum power transfer, Wye-Delta transformation.&lt;ref&gt;J. O. Bird ''Electrical Circuit Theory and Technology'', pp. 372–443, Newness, 2007 ISBN 978-0-7506-8139-1&lt;/ref&gt; Steady state sinusoidal analysis using phasors. Linear constant coefficient differential equations; time domain analysis of simple RLC circuits, Solution of network equations using [[Laplace transform]]: frequency domain analysis of RLC circuits. 2-port network parameters: driving point and transfer functions. State equations for networks.&lt;ref&gt;Alan K. Walton ''Network Analysis and Practice'', Cambridge University Press, 1987 ISBN 978-0-521-31903-4&lt;/ref&gt;

=== Electronic devices and circuits ===

'''Electronic devices''': Energy bands in silicon, intrinsic and extrinsic silicon. Carrier transport in silicon: diffusion current, drift current, mobility, resistivity. Generation and recombination of carriers. [[p-n junction]] diode, [[Zener diode]], [[tunnel diode]], [[BJT]], [[JFET]], [[MOS capacitor]], [[MOSFET]], [[LED]], [[p-i-n diode|p-i-n]] and [[avalanche photo-diode|avalanche photo diode]], LASERs. Device technology: [[integrated circuit fabrication]] process, oxidation, diffusion, [[ion implantation]], photolithography, n-tub, p-tub and twin-tub CMOS process.&lt;ref&gt;David K. Ferry/Jonathan P. Bird ''Electronic Materials and Devices'', Academic Press, 2001 ISBN 978-0-12-254161-2&lt;/ref&gt;&lt;ref&gt;Jimmie J. Cathey Schaum's Outline of ''Theory and Problems of Electronic Devices and Circuits'', McGraw Hill, 2002 ISBN 978-0-07-136270-2&lt;/ref&gt;

'''Analog circuits''': Equivalent circuits (large and small-signal) of diodes, BJTs, JFETs, and MOSFETs. Simple diode circuits, clipping, clamping, rectifier. Biasing and bias stability of transistor and FET amplifiers. Amplifiers: single-and multi-stage, differential, operational, feedback and power. Analysis of amplifiers; frequency response of amplifiers. Simple [[op-amp]] circuits. Filters. Sinusoidal oscillators; criterion for oscillation; single-transistor and op-amp configurations. Function generators and wave-shaping circuits, Power supplies.&lt;ref&gt;Wai-Kai Chen ''Analog Circuits and Devices'', CRC Press, 2003 ISBN 978-0-8493-1736-1&lt;/ref&gt;

'''Digital circuits''': [[Boolean algebra|Boolean functions]] ([[NOT gate|NOT]], [[AND gate|AND]], [[OR gate|OR]], [[XOR gate|XOR]],...).  Logic gates digital IC families ([[DTL]], [[Transistor–transistor logic|TTL]], [[Emitter-coupled logic|ECL]], [[metal-oxide-silicon|MOS]], [[CMOS]]). Combinational circuits: arithmetic circuits, code converters, [[multiplexers]] and [[decoders]]. [[Sequential circuit]]s: latches and flip-flops, counters and shift-registers. Sample and hold circuits, [[Analog-to-digital converter|ADC]]s, [[Digital-to-analog converter|DAC]]s. [[Semiconductor memories]]. [[Microprocessor 8086]]: architecture, programming, memory and I/O interfacing.&lt;ref&gt;Ronald C. Emery ''Digital Circuits: Logic and Design'', CRC Press, 1985 ISBN 978-0-8247-7397-7&lt;/ref&gt;&lt;ref&gt;Anant Agarwal/Jeffrey H. Lang ''Foundations of Analog and Digital Electronic Circuits'', Morgan Kaufmann, 2005 ISBN 978-1-55860-735-4&lt;/ref&gt;

=== Signals and systems ===

Definitions and properties of [[Laplace transform]], continuous-time and discrete-time [[Fourier series]], continuous-time and discrete-time [[Fourier Transform]], [[z-transform]]. [[Sampling theorem]]s. [[LTI system theory|Linear Time-Invariant (LTI) Systems]]: definitions and properties; causality, stability, impulse response, convolution, poles and zeros frequency response, group delay, phase delay. Signal transmission through LTI systems. Random signals and noise: [[probability]], [[random variables]], [[probability density function]], autocorrelation, [[power spectral density]], function analogy between vectors &amp; functions.&lt;ref&gt;Michael J. Roberts ''Signals and Systems'', p. 1, McGraw–Hill Professional, 2003 ISBN 978-0-07-249942-1&lt;/ref&gt;&lt;ref&gt;Hwei Piao Hsu  Schaum's Outline of ''Theory and Problems of Signals and Systems'', p. 1, McGraw–Hill Professional, 1995 ISBN 978-0-07-030641-7&lt;/ref&gt;

=== Control systems ===
Basic control system components; block diagrammatic description, reduction of block diagrams&amp;nbsp;— [[Mason's rule]]. Open loop and closed loop (negative unity feedback) systems and stability analysis of these systems. Signal flow graphs and their use in determining transfer functions of systems; transient and steady state analysis of LTI control systems and frequency response. Analysis of steady-state disturbance rejection and noise sensitivity.

Tools and techniques for LTI control system analysis and design: root loci, [[Routh-Hurwitz stability criterion]], Bode and [[Nyquist plot]]s. Control system compensators: elements of lead and lag compensation, elements of [[Proportional-Integral-Derivative controller]] (PID). Discretization of continuous time systems using [[Zero-order hold]] ([[ZOH]]) and ADCs for digital controller implementation. Limitations of digital controllers: aliasing. State variable representation and solution of state equation of LTI control systems. Linearization of Nonlinear dynamical systems with state-space realizations in both frequency and time domains. Fundamental concepts of controllability and observability for [[MIMO]] LTI systems. State space realizations: observable and controllable canonical form. [[Jürgen Ackermann|Ackermann's]] formula for state-feedback pole placement. Design of full order and reduced order estimators.&lt;ref&gt;Gerald Luecke, ''Analog and Digital Circuits for Electronic Control System Applications'', Newnes, 2005. ISBN 978-0-7506-7810-0.&lt;/ref&gt;&lt;ref&gt;Joseph J. DiStefano, Allen R. Stubberud, and Ivan J. Williams, Schaum's Outline of ''Theory and Problems of Feedback and Control Systems'', [[McGraw-Hill Professional]], 1995. ISBN 978-0-07-017052-0.&lt;/ref&gt;

=== Communications ===

'''Analog communication systems:''' [[amplitude modulation|amplitude]] and [[angle modulation]] and demodulation systems, [[spectrum analyzer|spectral analysis]] of these operations, [[superheterodyne]] noise conditions.

'''Digital communication systems:''' [[pulse code modulation|pulse code modulation (PCM)]], [[Differential Pulse Code Modulation]] ([[DPCM]]), [[Delta modulation]] (DM), digital modulation schemes-amplitude, phase and frequency shift keying schemes ([[Amplitude-shift keying|ASK]], [[Phase shift keying|PSK]], [[Frequency-shift keying|FSK]]), matched filter receivers, bandwidth consideration and probability of error calculations for these schemes, [[GSM]], [[Time division multiple access|TDMA]].&lt;ref&gt;Shanmugam, ''Digital and Analog Communication Systems'', Wiley-India, 2006. ISBN 978-81-265-0914-0.&lt;/ref&gt;&lt;ref&gt;Hwei Pia Hsu, Schaum's Outline of ''Analog and Digital Communications'', McGraw–Hill Professional, 2003. ISBN 978-0-07-140228-6.&lt;/ref&gt;

== Education and training ==

Electronics engineers typically possess an [[academic degree]] with a major in electronic engineering. The length of study for such a degree is usually three or four years and the completed degree may be designated as a Bachelor of Engineering, Bachelor of Science, Bachelor of Applied Science, or Bachelor of Technology depending upon the university.  Many UK universities also offer Master of Engineering ([[MEng]]) degrees at undergraduate level.

The degree generally includes units covering [[physics]], [[chemistry]], [[mathematics]], [[project management]] and specific topics in [[electrical engineering]]. Initially such topics cover most, if not all, of the subfields of electronic engineering. Students then choose to specialize in one or more subfields towards the end of the degree.

Some electronics engineers also choose to pursue a [[postgraduate]] degree such as a Master of Science ([[MSc]]), Doctor of Philosophy in Engineering ([[PhD]]), or an Engineering Doctorate ([[EngD]]). The Master degree is being introduced in some European and American Universities as a first degree and the differentiation of an engineer with graduate and postgraduate studies is often difficult. In these cases, experience is taken into account. The Master's degree may consist of either research, coursework or a mixture of the two. The Doctor of Philosophy consists of a significant research component and is often viewed as the entry point to academia.

In most countries, a Bachelor's degree in engineering represents the first step towards certification and the degree program itself is certified by a professional body. After completing a certified degree program the engineer must satisfy a range of requirements (including work experience requirements) before being certified. Once certified the engineer is designated the title of Professional Engineer (in the United States, Canada and South Africa), Chartered Engineer or Incorporated Engineer (in the United Kingdom, Ireland, India and Zimbabwe), Chartered Professional Engineer (in Australia and New Zealand) or European Engineer (in much of the European Union).

Fundamental to the discipline are the sciences of physics and mathematics as these help to obtain both a qualitative and quantitative description of how such systems will work. Today most engineering work involves the use of computers and it is commonplace to use [[computer-aided design]] and [[simulation software]] programs when designing electronic systems.
Although most electronic  engineers will understand basic circuit theory, the theories employed by engineers generally depend upon the work they do. For example, [[quantum mechanic]]s and [[solid state physics]] might be relevant to an engineer working on [[VLSI]] but are largely irrelevant to engineers working with macroscopic electrical systems.

== Professional bodies ==

Professional bodies of note for electrical engineers include the [[Institute of Electrical and Electronics Engineers]] (IEEE) and the [[Institution of Electrical Engineers]] (IEE) (now renamed the [[Institution of Engineering and Technology]] or IET). Member of the Institution of Engineering and Technology (MIET) is recognised in Europe as  Electrical and computer (technology) engineer. The IEEE claims to produce 30 percent of the world's literature in electrical/electronic engineering, has over 370,000 members, and holds more than 450 IEEE sponsored or cosponsored conferences worldwide each year.

== Project engineering ==
For most engineers not involved at the cutting edge of system design and development, technical work accounts for only a fraction of the work they do. A lot of time is also spent on tasks such as discussing proposals with clients, preparing budgets and determining project schedules. Many senior engineers manage a team of technicians or other engineers and for this reason project management skills are important. Most engineering projects involve some form of documentation and strong written communication skills are therefore very important.

The workplaces of electronics engineers are just as varied as the types of work they do. Electronics engineers may be found in the pristine laboratory environment of a fabrication plant, the offices of a consulting firm or in a research laboratory. During their working life, electronics engineers may find themselves supervising a wide range of individuals including scientists, electricians, computer programmers and other engineers.

Obsolescence of technical skills is a serious concern for electronics engineers. Membership and participation in technical societies, regular reviews of periodicals in the field and a habit of continued learning are therefore essential to maintaining proficiency. And these are mostly used in the field of consumer electronics products.&lt;ref&gt;Homer L. Davidson, ''Troubleshooting and Repairing Consumer Electronics'', p. 1, McGraw–Hill Professional, 2004. ISBN 978-0-07-142181-2.&lt;/ref&gt;

== See also ==
{{Portal|Electronics}}
*[[Analog signal processing]]
*[[Digital signal processing]]
*[[Electronics engineering technology]]
*[[History of radio]]
*[[List of electrical engineering topics (alphabetical)]]
*[[List of electrical engineers]]
*[[Muntzing]]
*[[Timeline of electrical and electronic engineering]]
*[[List of mechanical, electrical and electronic equipment manufacturing companies by revenue]]

== References ==
{{reflist|35em}}

== External links ==
{{Sister project links|Category:Electronics}}
* [http://www.ieee.org/about/index.html Institute of Electrical and Electronics Engineers] (IEEE)
{{Engineering fields}}
{{Technology}}
{{Use dmy dates|date=March 2011}}

{{DEFAULTSORT:Electronic Engineering}}
[[Category:Electrical engineering]]
[[Category:Electronic engineering| ]]
[[Category:Computer engineering]]
[[Category:Computer science]]
[[Category:Engineering disciplines]]</text>
      <sha1>9kmcpyh02y0btsf7gnjokm3voa8mzfp</sha1>
    </revision>
  </page>
  <page>
    <title>Electrical engineering</title>
    <ns>0</ns>
    <id>9531</id>
    <revision>
      <id>656769781</id>
      <parentid>656765895</parentid>
      <timestamp>2015-04-16T15:45:48Z</timestamp>
      <contributor>
        <username>Fountains of Bryn Mawr</username>
        <id>2700175</id>
      </contributor>
      <comment>Undid revision 656765895 by [[Special:Contributions/50.194.74.177|50.194.74.177]] ([[User talk:50.194.74.177|talk]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="61170">{{redirect|Electrical and computer engineering|contents about computer engineering|Computer engineering}}
{{Use dmy dates|date=July 2012}}
[[File:Power plant.jpg|thumb|Electrical engineers design complex power systems&amp;nbsp;...]]
[[File:Silego clock generator.JPG|thumb|...&amp;nbsp;and electronic circuits.]]
'''Electrical engineering''' is a field of [[engineering]] that generally deals with the study and application of [[electricity]], [[electronics]], and [[electromagnetism]]. This field first became an identifiable occupation in the latter half of the 19th century after commercialization of the electric [[telegraph]], the [[telephone]], and [[electric power]] distribution and use. Subsequently, [[broadcasting]] and [[recording media]] made electronics part of daily life.  The invention of the [[transistor]] and, subsequently, the [[integrated circuit]] brought down the cost of electronics to the point where they can be used in almost any household object.

Electrical engineering has now subdivided into a wide range of subfields including [[electronics]], [[digital computers]], [[power engineering]], [[telecommunication]]s, [[control systems]], [[radio-frequency engineering]], [[signal processing]], [[instrumentation]], and [[microelectronics]].  The subject of [[electronic engineering]] is often treated as its own subfield but it intersects with all the other subfields, including the [[power electronics]] of power engineering.

Electrical engineers typically hold a [[academic degree|degree]] in electrical engineering or electronic engineering.  Practicing engineers may have [[professional certification]] and be members of a [[professional body]].  Such bodies include the [[Institute of Electrical and Electronic Engineers]] (IEEE) and the [[Institution of Engineering and Technology]] (IET).

Electrical engineers work in a very wide range of industries and the skills required are likewise variable.  These range from basic circuit theory to the management skills required of [[project manager]].  The tools and equipment that an individual engineer may need are similarly variable, ranging from a simple [[voltmeter]] to a top end analyzer to sophisticated design and manufacturing software.

==History==
{{Main|History of electrical engineering}}

[[Electricity]] has been a subject of scientific interest since at least the early 17th century. The first electrical engineer was probably [[William Gilbert (astronomer)|William Gilbert]] who designed the [[versorium]]: a device that detected the presence of statically charged objects. He was also the first to draw a clear distinction between magnetism and static electricity and is credited with establishing the term electricity.{{sfn|Martinsen|Grimnes|2011|p=411}} In 1775 [[Alessandro Volta]]'s scientific experimentations devised the [[electrophorus]], a device that produced a static electric charge, and by 1800  Volta developed the [[voltaic pile]], a forerunner of the electric battery.{{sfn|Walker|2007|p=23}}

===19th century===
[[File:Faraday Cochran Pickersgill.jpg|thumb|right|upright|The discoveries of [[Michael Faraday]] formed the foundation of electric motor technology]]
However, it was not until the 19th century that research into the subject started to intensify. Notable developments in this century include the work of [[Georg Ohm]], who in 1827 quantified the relationship between the [[electric current]] and [[potential difference]] in a [[Electrical conductor|conductor]], of [[Michael Faraday]], the discoverer of [[electromagnetic induction]] in 1831, and of [[James Clerk Maxwell]], who in 1873 published a unified [[Maxwell's equations|theory]] of electricity and [[magnetism]] in his treatise ''Electricity and Magnetism''.{{sfn|Lambourne|2010|p=11}}

Beginning in the 1830s, efforts were made to apply electricity to practical use in the [[telegraph]]. By the end of the 19th century the world had been forever changed by the rapid communication made possible by the engineering development of land-lines, [[submarine communications cable|submarine cable]]s, and, from about 1890, [[wireless telegraphy]].

Practical applications and advances in such fields created an increasing need for standardized units of measure. They led to the international standardization of the units [[volt]], [[ampere]], [[coulomb]], [[ohm]], [[farad]], and [[henry (unit)|henry]]. This was achieved at an international conference in Chicago in 1893.{{Sfn|Rosenberg|2008|p=9}} The publication of these standards formed the basis of future advances in standardisation in various industries, and in many countries the definitions were immediately recognised in relevant legislation.{{sfn|Tunbridge|1992}}

During these years, the study of electricity was largely considered to be a subfield of [[physics]]. It was not until about 1885 that [[universities]] and [[institutes of technology]] such as [[Massachusetts Institute of Technology]] (MIT) and [[Cornell University]] started to offer [[bachelor's degree]]s in electrical engineering. The [[Darmstadt University of Technology]] founded the first department of electrical engineering in the world in 1882. In that same year, under Professor Charles Cross, MIT began offering the first option of electrical engineering within its [[physics]] department.{{Sfn|Wildes|Lindgren|1985|p=19}} In 1883, [[Darmstadt University of Technology]] and Cornell University introduced the world's first bachelor's degree courses of study in electrical engineering, and in 1885 [[University College London]] founded the first chair of electrical engineering in [[Great Britain]].&lt;ref&gt;{{cite book|title=The Electrical Engineer|url=http://books.google.com/books?id=TLLmAAAAMAAJ|year=1911|page=54}}&lt;/ref&gt; The [[University of Missouri]] established the first department of electrical engineering in the United States in 1886.{{sfn|Wildes|Lindgren|1985|p=23}} Several other schools soon followed suit, including Cornell and the [[Georgia School of Technology]] in [[Atlanta, Georgia]].
&lt;gallery widths=120px perrow=4&gt;
File:Thomas Edison, 1878.jpg|[[Thomas Edison]], electric light and (DC) power supply networks
File:ZBD team.jpg|[[Károly Zipernowsky]], [[Ottó Bláthy]], [[Miksa Déri]], the ZDB transformer
File:William-Stanley_jr.jpg|[[William Stanley, Jr.]], transformers
File:Galileo_Ferraris.jpg|[[Galileo Ferraris]], electrical theory, induction motor
File:Tesla_Sarony.jpg|[[Nikola Tesla]], practical polyphase (AC) and induction motor designs
File:Doliwo-Dobrowolsky.jpg|[[Mikhail Dolivo-Dobrovolsky]] developed standard 3-phase (AC) systems
File:Charlesproteussteinmetz.jpg|[[Charles Proteus Steinmetz]], AC mathematical theories for engineers
File:Oheaviside.jpg|[[Oliver Heaviside]], developed theoretical models for electric circuits 
&lt;/gallery&gt;
During these decades use of electrical engineering increased dramatically. In 1882, [[Thomas Edison]] switched on the world's first large-scale electric power network that provided 110 volts — [[direct current]] (DC) — to 59 customers on [[Manhattan Island]] in [[New York City]]. In 1884, [[Charles Algernon Parsons|Sir Charles Parsons]] invented the [[steam turbine]] allowing for more efficient electric power generation. [[Alternating current]], with its ability to transmit power more efficiently over long distances via the use of [[transformer]]s,  developed rapidly in the 1880s and 1890s with transformer designs by [[Károly Zipernowsky]], [[Ottó Bláthy]] and [[Miksa Déri]] (later called ZBD transformers), [[Lucien Gaulard]], [[John Dixon Gibbs]] and [[William Stanley, Jr.]]. Practical [[AC motor]] designs including [[induction motor]]s were independently invented by [[Galileo Ferraris]] and [[Nikola Tesla]] and further developed into a practical [[three-phase]] form by [[Mikhail Dolivo-Dobrovolsky]] and [[Charles Eugene Lancelot Brown]].{{Sfn|Heertje|Perlman|1990|p=138}} [[Charles Steinmetz]] and [[Oliver Heaviside]] contributed to the theoretical basis of alternating current engineering.&lt;ref&gt;[http://books.google.com/books?id=f5FqsDPVQ2MC&amp;pg=PA1229&amp;dq=theoretical++alternating+current++Oliver+Heaviside&amp;hl=en&amp;sa=X&amp;ei=bifsUOmuLKio0AHXtIGoBg&amp;ved=0CFUQ6AEwBg#v=onepage&amp;q=theoretical%20%20alternating%20current%20%20Oliver%20Heaviside&amp;f=false I. Grattan-Guinness, History and Philosophy of the Mathematical Sciences - 2003, Page 1229]&lt;/ref&gt;&lt;ref&gt;[http://books.google.com/books?id=lew5IC5piCwC&amp;pg=PA329&amp;dq=theoretical++alternating+current++Charles+Steinmetz&amp;hl=en&amp;sa=X&amp;ei=viTsUMiiLKWa0QHMw4HAAg&amp;ved=0CEMQ6AEwAzgU#v=onepage&amp;q=theoretical%20%20alternating%20current%20%20Charles%20Steinmetz&amp;f=false Jeff Suzuki, Mathematics in Historical Context - 2009, page 329]&lt;/ref&gt; The spread in the use of AC set off in the United States what has been called the ''[[War of Currents]]'' between a [[George Westinghouse]] backed AC system and a Thomas Edison backed DC power system, with AC being adopted as the overall standard.{{sfn|Severs|Leise|2011|p=145}}

===More modern developments===
[[File:Guglielmo Marconi.jpg|upright|right|thumb|[[Guglielmo Marconi]] known for his pioneering work on long distance radio transmission]]
During the [[invention of radio|development of radio]], many scientists and [[inventor]]s contributed to [[radio communications|radio technology]] and electronics. The mathematical work of [[James Clerk Maxwell]] during the 1850s had shown the relationship of different forms of [[electromagnetic radiation]] including possibility of invisible airborne waves (later called &quot;radio waves&quot;). In his classic physics experiments of 1888, [[Heinrich Hertz]] proved Maxwell's theory by transmitting [[radio wave]]s with a [[spark-gap transmitter]], and detected them by using simple electrical devices. Other physicists experimented with these new waves and in the process developed devices for transmitting and detecting them. In 1895 [[Guglielmo Marconi]] began work on a way to adapt the known methods of transmitting and detecting these &quot;Hertzian waves&quot; into a purpose built commercial [[Wireless telegraphy|wireless telegraphic]] system. Early on, he sent wireless signals over a distance of one and a half miles. In December 1901, he sent wireless waves that were not affected by the curvature of the Earth. Marconi later transmitted the wireless signals across the Atlantic between Poldhu, Cornwall, and St. John's, Newfoundland, a distance of {{convert|2100|mi|km}}.&lt;ref&gt;[http://nobelprize.org/nobel_prizes/physics/laureates/1909/marconi-bio.html Marconi's biography at Nobelprize.org] retrieved 21 June 2008.&lt;/ref&gt;

In 1897, [[Karl Ferdinand Braun]] introduced the [[cathode ray tube]] as part of an [[oscilloscope]], a crucial enabling technology for [[television|electronic television]].{{sfn|Abramson|1955|p=22}} [[John Ambrose Fleming|John Fleming]] invented the first radio tube, the [[diode]], in 1904. Two years later, [[Robert von Lieben]] and [[Lee De Forest]] independently developed the amplifier tube, called the [[triode]].{{Sfn|Huurdeman|2003|p=226}}

In 1920 [[Albert Hull]] developed the [[Cavity magnetron|magnetron]] which would eventually lead to the development of the [[microwave oven]] in 1946 by [[Percy Spencer]].&lt;ref&gt;{{cite web | title = Albert W. Hull (1880–1966) | work = IEEE History Center | url = http://www.ieee.org/organizations/history_center/legacies/hull.html | accessdate =22 January 2006 }}&lt;/ref&gt;&lt;ref&gt;{{cite web | title = Who Invented Microwaves? | url = http://www.gallawa.com/microtech/history.html | accessdate =22 January 2006 }}&lt;/ref&gt; In 1934 the British military began to make strides toward [[radar]] (which also uses the magnetron) under the direction of Dr Wimperis, culminating in the operation of the first radar station at [[Bawdsey]] in August 1936.&lt;ref&gt;{{cite web | title = Early Radar History | work = Peneley Radar Archives | url = http://www.penleyradararchives.org.uk/history/introduction.htm | accessdate =22 January 2006 }}&lt;/ref&gt;

In 1941 [[Konrad Zuse]] presented the [[Z3 (computer)|Z3]], the world's first fully functional and programmable computer using electromechanical parts.  In 1943 [[Tommy Flowers]] designed and built the [[Colossus (computer)|Colossus]], the world's first fully functional, electronic, digital and programmable computer.&lt;ref&gt;{{cite encyclopedia |first=Raúl |last=Rojas |contribution=The history of Konrad Zuse's early computing machines |page=237 |editor1-first=Raúl |editor1-last=Rojas |editor2-first=Ulf |editor2-last=Hashagen |title=The First Computers—History and Architectures History of Computing |publisher=MIT Press |year=2002 |isbn=0-262-68137-4}}&lt;br/&gt;{{cite encyclopedia |first=Anthony E. |last=Sale |contribution=The Colossus of Bletchley Park |pages=354–355 |editor1-first=Raúl |editor1-last=Rojas |editor2-first=Ulf |editor2-last=Hashagen |title=The First Computers—History and Architectures History of Computing |publisher=MIT Press |year=2002 |isbn=0-262-68137-4}}&lt;/ref&gt; In 1946 the [[ENIAC]] (Electronic Numerical Integrator and Computer) of [[John Presper Eckert]] and [[John Mauchly]] followed, beginning the computing era. The arithmetic performance of these machines allowed engineers to develop completely new technologies and achieve new objectives, including the [[Apollo program]] which culminated in [[moon landing|landing astronauts on the Moon]].&lt;ref&gt;{{cite web | title = The ENIAC Museum Online | url = http://www.seas.upenn.edu/~museum/guys.html | accessdate =18 January 2006 }}&lt;/ref&gt;

===Solid-state transistors===
The invention of the [[transistor]] in late 1947 by [[William B. Shockley]], [[John Bardeen]], and [[Walter Brattain]] of the [[Bell Telephone Laboratories]] opened the door for more compact devices and led to the development of the [[integrated circuit]] in 1958 by [[Jack Kilby]] and independently in 1959 by [[Robert Noyce]].&lt;ref&gt;{{cite web | title = Electronics Timeline | work = Greatest Engineering Achievements of the Twentieth Century | url = http://www.greatachievements.org/?id=3956 | accessdate =18 January 2006 }}&lt;/ref&gt; Starting in 1968, [[Marcian Hoff|Ted Hoff]] and a team at the [[Intel Corporation]] invented the first commercial [[microprocessor]], which foreshadowed the [[personal computer]]. The [[Intel 4004]] was a four-bit processor released in 1971, but in 1973 the [[Intel 8080]], an eight-bit processor, made the first personal computer, the [[Altair 8800]], possible.&lt;ref&gt;{{cite web | title = Computing History (1971–1975) | url = http://mbinfo.mbdesign.net/1971-75.htm | accessdate =18 January 2006 }}&lt;/ref&gt;

==Subdisciplines==
Electrical engineering has many subdisciplines, the most common of which are listed below. Although there are electrical engineers who focus exclusively on one of these subdisciplines, many deal with a combination of them. Sometimes certain fields, such as electronic engineering and [[computer engineering]], are considered separate disciplines in their own right.

===Power===
{{Main|Power engineering}}
[[File:Power pole.jpg|thumb|right|[[Utility pole|Power pole]]]]
Power engineering deals with the [[electricity generation|generation]], [[electric power transmission|transmission]] and [[electric power distribution|distribution]] of [[electricity]] as well as the design of a range of related devices.{{Sfn|Grigsby|2012}} These include [[transformer]]s, [[electric generator]]s, [[electric motor]]s, high voltage engineering, and [[power electronics]]. In many regions of the world, governments maintain an electrical network called a [[power grid]] that connects a variety of generators together with users of their energy. Users purchase electrical energy from the grid, avoiding the costly exercise of having to generate their own. Power engineers may work on the design and maintenance of the power grid as well as the power systems that connect to it.&lt;ref name=&quot;UNESCO&quot;/&gt; Such systems are called ''on-grid'' power systems and may supply the grid with additional power, draw power from the grid or do both. Power engineers may also work on systems that do not connect to the grid, called ''off-grid'' power systems, which in some cases are preferable to on-grid systems. The future includes Satellite controlled power systems, with feedback in real time to prevent power surges and prevent blackouts.

===Control===
{{Main|Control engineering}}
[[File:Space Shuttle Columbia launching.jpg|thumb|right|[[Control systems]] play a critical role in [[space flight]].]]
[[Control engineering]] focuses on the [[mathematical model|modeling]] of a diverse range of [[dynamic system]]s and the design of [[controller (control theory)|controllers]] that will cause these systems to behave in the desired manner.{{sfn|Bissell|1996|p=17}} To implement such controllers electrical engineers may use [[Electronic circuit|electrical circuits]], [[digital signal processing|digital signal processors]], [[microcontroller]]s and [[Programmable logic controller|PLCs]] (Programmable Logic Controllers). [[Control engineering]] has a wide range of applications from the flight and propulsion systems of [[Airliner|commercial airliners]] to the [[cruise control]] present in many modern [[automobile]]s.{{sfn|McDavid|Echaore-McDavid|2009|p=95}} It also plays an important role in [[industrial automation]].

Control engineers often utilize [[feedback]] when designing [[control system]]s. For example, in an [[automobile]] with [[cruise control]] the vehicle's [[speed]] is continuously monitored and fed back to the system which adjusts the [[Internal combustion engine|motor's]] [[Power (physics)|power]] output accordingly. Where there is regular feedback, [[control theory]] can be used to determine how the system responds to such feedback.{{sfn|Fairman|1998|p=119}}

===Electronics===
{{Main|Electronic engineering}}

[[File:Componentes.JPG|thumb|left|[[Electronic components]]]]
Electronic engineering involves the design and testing of [[electronic circuit]]s that use the properties of [[electrical element|components]] such as [[resistor]]s, [[capacitor]]s, [[inductor]]s, [[diode]]s and [[transistor]]s to achieve a particular functionality.&lt;ref name=&quot;UNESCO&quot;&gt;{{cite book|title=Engineering: Issues, Challenges and Opportunities for Development|url=http://books.google.com/books?id=09i67GgGPCYC&amp;pg=PA128|year=2010|publisher=UNESCO|isbn=978-92-3-104156-3|pages=127–8}}&lt;/ref&gt; The [[tuned circuit]], which allows the user of a [[radio]] to [[electronic filter|filter]] out all but a single station, is just one example of such a circuit. Another example (of a pneumatic signal conditioner) is shown in the adjacent photograph.

Prior to the Second World War, the subject was commonly known as ''radio engineering'' and basically was restricted to aspects of communications and [[radar]], [[radio|commercial radio]] and [[television|early television]].&lt;ref name=&quot;UNESCO&quot;/&gt; Later, in post war years, as consumer devices began to be developed, the field grew to include modern television, audio systems, [[computer]]s and [[microprocessors]]. In the mid-to-late 1950s, the term ''radio engineering'' gradually gave way to the name ''electronic engineering''.

Before the invention of the [[integrated circuit]] in 1959,{{Sfn|Thompson|2006|p=4}} electronic circuits were constructed from discrete components that could be manipulated by humans. These discrete circuits consumed much space and [[electric power|power]] and were limited in speed, although they are still common in some applications. By contrast, [[integrated circuit]]s packed a large number—often millions—of tiny electrical components, mainly [[transistor]]s,{{Sfn|Merhari|2009|p=233}} into a small chip around the size of a [[coin]]. This allowed for the powerful [[computer]]s and other electronic devices we see today.

===Microelectronics===
{{Main|Microelectronics}}
[[File:80486dx2-large.jpg|thumb|right|[[Microprocessor]]]]
[[Microelectronics]] engineering deals with the design and [[microfabrication]] of very small electronic circuit components for use in an [[integrated circuit]] or sometimes for use on their own as a general electronic component.{{Sfn|Bhushan|1997|p=581}} The most common microelectronic components are [[semiconductor]] [[transistor]]s, although all main electronic components ([[resistor]]s, [[capacitor]]s etc.) can be created at a microscopic level.  [[Nanoelectronics]] is the further scaling of devices down to [[nanometer]] levels. Modern devices are already in the nanometer regime, with below 100&amp;nbsp;nm processing having been standard since about 2002.{{Sfn|Mook|2008|p=149}}

Microelectronic components are created by chemically fabricating wafers of semiconductors such as silicon (at higher frequencies, [[compound semiconductor]]s like gallium arsenide and indium phosphide) to obtain the desired transport of electronic charge and control of current. The field of microelectronics involves a significant amount of chemistry and material science and requires the electronic engineer working in the field to have a very good working knowledge of the effects of [[quantum mechanics]].{{sfn|Sullivan|2012}}

===Signal processing===
{{Main|Signal processing}}
[[File:Bayer pattern on sensor.svg|thumb|left|A [[Bayer filter]] on a [[Charge-coupled device|CCD]] requires signal processing to get a red, green, and blue value at each pixel.]]
[[Signal processing]] deals with the analysis and manipulation of [[signal (information theory)|signals]].{{Sfn|Tuzlukov|2010|p=20}} Signals can be either [[analog signal|analog]], in which case the signal varies continuously according to the information, or [[digital signal|digital]], in which case the signal varies according to a series of discrete values representing the information. For analog signals, signal processing may involve the [[amplifier|amplification]] and [[Filter (signal processing)|filtering]] of audio signals for audio equipment or the [[modulation]] and [[demodulation]] of signals for [[telecommunication]]s. For digital signals, signal processing may involve the [[Data compression|compression]], [[error detection]] and [[error correction]] of digitally sampled signals.{{Sfn|Manolakis|Ingle|2011|p=17}}

Signal Processing is a very mathematically oriented and intensive area forming the core of [[digital signal processing]] and it is rapidly expanding with new applications in every field of electrical engineering such as communications, control, radar, [[audio engineer]]ing, [[broadcast engineering]], power electronics and bio-medical engineering as many already existing analog systems are replaced with their digital counterparts.  [[Analog signal processing]] is still important in the design of many [[control system]]s.

DSP processor ICs are found in every type of modern electronic systems and products including, [[SDTV]] | [[HDTV]] sets,{{sfn|Bayoumi|Swartzlander|1994|p=25}} radios and mobile communication devices, [[Hi-Fi]] audio equipment, [[Dolby]] [[noise reduction]] algorithms, [[GSM]] mobile phones, [[mp3]] multimedia players, camcorders and digital cameras, automobile control systems, [[noise cancelling]] headphones, digital [[spectrum analyzer]]s, intelligent missile guidance, [[radar]], [[GPS]] based cruise control systems and all kinds of [[image processing]], [[video processing]], [[audio signal processing|audio processing]] and [[speech processing]] systems.{{Sfn|Khanna|2009|p=297}}

===Telecommunications===
{{Main|Telecommunications engineering}}
[[File:Erdfunkstelle Raisting 2a.jpg|thumb|right|[[Satellite dish]]es are a crucial component in the analysis of satellite information.]]
[[Telecommunications|Telecommunications engineering]] focuses on the [[transmission (telecommunications)|transmission]] of [[information]] across a [[channel (communications)|channel]] such as a [[coax cable]], [[optical fiber]] or [[free space optical communications|free space]].{{sfn|Tobin|2007|p=15}} Transmissions across free space require information to be encoded in a [[carrier wave]] to shift the information to a carrier frequency suitable for transmission, this is known as [[modulation]]. Popular analog modulation techniques include [[amplitude modulation]] and [[frequency modulation]].{{Sfn|Chandrasekhar|2006|p=21}} The choice of modulation affects the cost and performance of a system and these two factors must be balanced carefully by the engineer.

Once the transmission characteristics of a system are determined, telecommunication engineers design the [[transmitter]]s and [[receiver (radio)|receivers]] needed for such systems. These two are sometimes combined to form a two-way communication device known as a [[transceiver]]. A key consideration in the design of transmitters is their [[power consumption]] as this is closely related to their [[signal strength]].{{sfn|Smith|2007|p=19}}{{sfn|Zhang|Hu|Luo|2007|p=448}} If the signal strength of a transmitter is insufficient the signal's information will be corrupted by [[signal noise|noise]].

===Instrumentation===
{{Main|Instrumentation engineering}}
[[File:F-18E cockpit m02006112600499.jpg|thumb|right|[[Flight instruments]] provide pilots with the tools to control aircraft analytically.]]
[[Instrumentation engineering]] deals with the design of devices to measure physical quantities such as [[pressure]], [[Volumetric flow rate|flow]] and [[temperature]].{{Sfn|Grant|Bixley|2011|p=159}} The design of such instrumentation requires a good understanding of [[physics]] that often extends beyond [[electromagnetism|electromagnetic theory]]. For example, [[flight instruments]] measure variables such as [[wind speed]] and [[altitude]] to enable pilots the control of aircraft analytically. Similarly, [[thermocouple]]s use the [[Peltier-Seebeck effect]] to measure the temperature difference between two points.{{sfn|Fredlund|Rahardjo|Fredlund|2012|p=346}}

Often instrumentation is not used by itself, but instead as the [[sensor]]s of larger electrical systems. For example, a thermocouple might be used to help ensure a furnace's temperature remains constant.&lt;ref&gt;{{cite book|title=Manual on the Use of Thermocouples in Temperature Measurement|url=http://books.google.com/books?id=Pos-MXDWb6MC&amp;pg=PA154|date=1 January 1993|publisher=ASTM International|isbn=978-0-8031-1466-1|page=154}}&lt;/ref&gt; For this reason, instrumentation engineering is often viewed as the counterpart of control engineering.

===Computers===
{{Main|Computer engineering}}
[[File:MEGWARE.CLIC.jpg|thumb|right|[[Supercomputer]]s are used in fields as diverse as [[computational biology]] and [[geographic information systems]].]]
Computer engineering deals with the design of [[computer]]s and [[computer system]]s. This may involve the design of new [[computer hardware|hardware]], the design of [[personal digital assistant|PDAs]], tablets and [[supercomputers]] or the use of computers to control an [[manufacturing|industrial plant]].{{sfn|Obaidat|Denko|Woungang|2011|p=9}} Computer engineers may also work on a system's [[software]]. However, the design of complex software systems is often the domain of [[software engineering]], which is usually considered a separate discipline.{{sfn|Jalote|2006|p=22}} [[Desktop computer]]s represent a tiny fraction of the devices a computer engineer might work on, as computer-like architectures are now found in a range of devices including [[video game console]]s and [[DVD player]]s.

===Related disciplines===
[[File:VIP Bird2.jpg|thumb|left|The Bird VIP Infant ventilator]]
[[Mechatronics]] is an engineering discipline which deals with the convergence of electrical and [[machine|mechanical]] systems. Such combined systems are known as [[electromechanical]] systems and have widespread adoption. Examples include [[automation|automated manufacturing systems]],{{sfn|Mahalik|2003|p=569}} [[HVAC|heating, ventilation and air-conditioning systems]]{{sfn|Leondes|2000|p=199}} and various subsystems of [[aircraft]] and [[automobile]]s.
{{sfn|Shetty|Kolk|2010|p=36}}

The term ''mechatronics'' is typically used to refer to [[macroscopic]] systems but [[Futures studies|futurists]] have predicted the emergence of very small electromechanical devices. Already such small devices, known as [[Microelectromechanical systems]] (MEMS), are used in automobiles to tell [[airbag]]s when to deploy,{{sfn|Maluf|Williams|2004|p=3}} in [[digital projector]]s to create sharper images and in [[inkjet printer]]s to create nozzles for high definition printing. In the future it is hoped the devices will help build tiny implantable medical devices and improve [[optical communication]].{{Sfn|Iga|Kokubun|2010|p=137}}

[[Biomedical engineering]] is another related discipline, concerned with the design of [[medical equipment]]. This includes fixed equipment such as [[ventilator]]s, [[MRI|MRI scanners]]{{Sfn|Dodds|Kumar|Veering|2014|p=274}} and [[electrocardiograph|electrocardiograph monitors]] as well as mobile equipment such as [[cochlear implant]]s, [[artificial pacemaker]]s and [[artificial heart]]s.

[[Aerospace engineering]] and [[robotics]] an example is the most recent [[electric propulsion]] and ion propulsion.

==Education==
{{Main|Education and training of electrical and electronics engineers}}
[[File:Osciloscopio locomotora.jpg|thumb|250px|[[Oscilloscope]]]]
Electrical engineers typically possess an [[academic degree]] with a major in electrical engineering, [[electronics engineering]], [[electrical engineering technology]],&lt;ref name=BLS3&gt;{{cite web|title=Electrical and Electronic Engineer|url=http://www.bls.gov/ooh/architecture-and-engineering/electrical-and-electronics-engineers.htm#tab-4|work=Occupational Outlook Handbook, 2012-13 Edition|publisher=Bureau of Labor Statistics, U.S. Department of Labor|accessdate=November 15, 2014}}&lt;/ref&gt; or electrical and electronic engineering.{{Sfn|Chaturvedi|1997|p=253}}&lt;ref&gt;{{cite web | title = What is the difference between electrical and electronic engineering? | work = FAQs - Studying Electrical Engineering | url = http://www.ieee.org/portal/site/mainsite/menuitem.818c0c39e85ef176fb2275875bac26c8/index.jsp?&amp;pName=corp_level1&amp;path=education/faqs&amp;file=faqs1.xml&amp;xsl=generic.xsl | accessdate =20 March 2012 }}&lt;/ref&gt; The same fundamental principles are taught in all programs, though emphasis may vary according to title. The length of study for such a degree is usually four or five years and the completed degree may be designated as a Bachelor of Science in Electrical/Electronics Engineering Technology, [[Bachelor of Engineering]], [[Bachelor of Science]], [[Bachelor of Technology]], or [[Bachelor of Applied Science]] depending on the university. The [[bachelor's degree]] generally includes units covering [[physics]], [[mathematics]], [[computer science]], [[project management]], and a [[list of electrical engineering topics|variety of topics in electrical engineering]].&lt;ref name=&quot;Enterprise1986&quot;&gt;{{cite book|title=Computerworld|url=http://books.google.com/books?id=uVHbRM6mU9gC&amp;pg=PA97|date=25 August 1986|publisher=IDG Enterprise|page=97}}&lt;/ref&gt; Initially such topics cover most, if not all, of the subdisciplines of electrical engineering. At some schools, the students can then choose to emphasize one or more subdisciplines towards the end of their courses of study.

[[File:LM317 typical schematic.svg|thumb|left|Typical [[circuit diagram|electrical engineering diagram]] used as a [[troubleshooting]] tool]]

At many schools, electronic engineering is included as part of an electrical award, sometimes explicitly, such as a Bachelor of Engineering (Electrical and Electronic), but in others electrical and electronic engineering are both considered to be sufficiently broad and complex that separate degrees are offered.&lt;ref&gt;{{cite web|title=Electrical and Electronic Engineering|url=http://www.flinders.edu.au/science_engineering/csem/disciplines/eee/|accessdate=8 December 2011}}&lt;/ref&gt;

Some electrical engineers choose to study for a postgraduate degree such as a [[Master of Engineering]]/[[Master of Science]] (M.Eng./M.Sc.), a Master of [[Engineering Management]], a [[Doctor of Philosophy]] (Ph.D.) in Engineering, an [[Engineering Doctorate]] (Eng.D.), or an [[Engineer's degree]]. The master's and engineer's degrees may consist of either [[research]], [[coursework]] or a mixture of the two. The Doctor of Philosophy and Engineering Doctorate degrees consist of a significant research component and are often viewed as the entry point to [[academia]]. In the United Kingdom and some other European countries, Master of Engineering is often considered to be an undergraduate degree of slightly longer duration than the Bachelor of Engineering rather than postgraduate.&lt;ref&gt;Various including graduate degree requirements [http://www.eecs.mit.edu/grad/degrees.html at MIT], study guide [http://www.ecm.uwa.edu.au/students/study-guides-2012/be-elec-mech at UWA], the curriculum [http://www.queensu.ca/calendars/appsci/pg219.html at Queen's] and unit tables [http://www.abdn.ac.uk/registry/calendar/requirements/07H50116.doc at Aberdeen]&lt;/ref&gt;

==Practicing engineers==
[[File:Belgium. Belgian electrical engineers Georges Jean L. Van Antro, left, Georges H. Marchal, center, and Jacques de... - NARA - 541661.tif|thumb|right|Belgian electrical engineers inspecting the rotor of a 40,000 kilowatt [[turbine]] of the [[General Electric Company]] in New York City]]
In most countries, a Bachelor's degree in engineering represents the first step towards [[professional certification]] and the degree program itself is certified by a [[professional body]].&lt;ref name=&quot;Labor2008&quot;&gt;{{cite book|title=Occupational Outlook Handbook, 2008–2009|url=http://books.google.com/books?id=F4ZS7UQ1QZoC|date=1 March 2008|publisher=U S Department of Labor, Jist Works|isbn=978-1-59357-513-7|page=148}}&lt;/ref&gt; After completing a certified degree program the engineer must satisfy a range of requirements (including work experience requirements) before being certified. Once certified the engineer is designated the title of [[Professional Engineer]] (in the United States, Canada and South Africa), [[Chartered engineer|Chartered Engineer]] or [[Incorporated Engineer]]  (in India, Pakistan, the United Kingdom, Ireland and [[Zimbabwe]]), Chartered Professional Engineer (in Australia and New Zealand) or [[European Engineer]] (in much of the [[European Union]]).

[[File:3 Park Avenue.JPG|thumb|left|The [[IEEE]] corporate office is on the 17th floor of [[3 Park Avenue]] in [[New York City]]]]
The advantages of certification vary depending upon location. For example, in the United States and Canada &quot;only a licensed engineer may seal engineering work for public and private clients&quot;.&lt;ref&gt;{{cite web | title = Why Should You Get Licensed? | work = National Society of Professional Engineers | url = http://www.nspe.org/lc1-why.asp | accessdate =11 July 2005 | archiveurl = http://web.archive.org/web/20050604085233/http://www.nspe.org/lc1-why.asp| archivedate = 4 June 2005}}&lt;/ref&gt; This requirement is enforced by state and provincial legislation such as [[Quebec|Quebec's]] Engineers Act.&lt;ref&gt;{{cite web | title = Engineers Act | work = Quebec Statutes and Regulations (CanLII) | url = http://www2.publicationsduquebec.gouv.qc.ca/dynamicSearch/telecharge.php?type=2&amp;file=//I_9/I9_A.htm | accessdate =24 July 2005 }}&lt;/ref&gt; In other countries, no such legislation exists. Practically all certifying bodies maintain a [[ethical code|code of ethics]] that they expect all members to abide by or risk expulsion.&lt;ref&gt;{{cite web | title = Codes of Ethics and Conduct | work = Online Ethics Center | url = http://onlineethics.org/CMS/profpractice/ethcodes.aspx | accessdate =24 July 2005 }}&lt;/ref&gt; In this way these organizations play an important role in maintaining ethical standards for the profession. Even in jurisdictions where certification has little or no legal bearing on work, engineers are subject to [[contract law]]. In cases where an engineer's work fails he or she may be subject to the [[negligence|tort of negligence]] and, in extreme cases, the charge of [[criminal negligence]]. An engineer's work must also comply with numerous other rules and regulations such as [[building codes]] and legislation pertaining to [[environmental law]].

Professional bodies of note for electrical engineers include the [[Institute of Electrical and Electronics Engineers]] (IEEE) and the [[Institution of Engineering and Technology]] (IET).  The IEEE claims to produce 30% of the world's literature in electrical engineering, has over 360,000 members worldwide and holds over 3,000 conferences annually.&lt;ref&gt;{{cite web | title = About the IEEE | work = IEEE | url = http://www.ieee.org/about/ | accessdate =11 July 2005 }}&lt;/ref&gt; The IET publishes 21 journals, has a worldwide membership of over 150,000, and claims to be the largest professional engineering society in Europe.&lt;ref&gt;{{cite web | title = About the IET | work = The IET | url = http://www.theiet.org/about/ | accessdate =11 July 2005 }}&lt;/ref&gt;&lt;ref&gt;{{cite web | title = Journal and Magazines | work = The IET | url = http://www.theiet.org/publishing/journals/ | accessdate =11 July 2005 }}&lt;/ref&gt; Obsolescence of technical skills is a serious concern for electrical engineers. Membership and participation in technical societies, regular reviews of periodicals in the field and a habit of continued learning are therefore essential to maintaining proficiency. MIET(Member of the Institution of Engineering and Technology) is recognised in Europe as Electrical and computer (technology) engineer.&lt;ref&gt;{{cite web | title = Electrical and Electronics Engineers, except Computer | work = Occupational Outlook Handbook | url = http://www.bls.gov/oco/ocos031.htm | accessdate =16 July 2005|archiveurl=http://web.archive.org/web/20050713014728/http://www.bls.gov/oco/ocos031.htm|archivedate=13 July 2005}} (see [[work of the United States Government|here]] regarding copyright)&lt;/ref&gt;

In Australia, Canada and the United States electrical engineers make up around 0.25% of the labor force (see [[#demographics|&lt;span id=&quot;demographics_back&quot;&gt;note&lt;/span&gt;]]).

==Tools and work==

From the [[Global Positioning System]] to [[electricity generation|electric power generation]], electrical engineers have contributed to the development of a wide range of technologies. They design, develop, test and supervise the deployment of electrical systems and electronic devices. For example, they may work on the design of [[telecommunication|telecommunication systems]], the operation of [[power station|electric power stations]], the [[lighting]] and [[electrical wiring|wiring]] of [[building]]s, the design of [[home appliance|household appliances]] or the electrical [[control theory|control]] of industrial machinery.&lt;ref&gt;{{cite web | title = Electrical and Electronics Engineers, except Computer | work = Occupational Outlook Handbook | url = http://www.bls.gov/oco/ocos031.htm | accessdate =16 July 2005 |archiveurl = https://web.archive.org/web/20050713014728/http://www.bls.gov/oco/ocos031.htm &lt;!-- Bot retrieved archive --&gt; |archivedate = 13 July 2005}} (see {{Wayback |date= |url=www.bls.gov/oco/ocos031.htm }})&lt;/ref&gt;

[[File:Molnya-1 Musee du Bourget P1010442.jpg|thumb|left|[[Communications satellite|Satellite communications]] is typical of what electrical engineers work on.]]
Fundamental to the discipline are the sciences of [[physics]] and [[mathematics]] as these help to obtain both a [[Qualitative data|qualitative]] and [[Quantity|quantitative]] description of how such systems will work. Today most [[engineering]] work involves the use of [[computers]] and it is commonplace to use [[computer-aided design]] programs when designing electrical systems. Nevertheless, the ability to sketch ideas is still invaluable for quickly communicating with others.

[[File:Shadow Hand Bulb large.jpg|thumb|right|The [[Shadow Hand|Shadow robot hand]] system]]
Although most electrical engineers will understand basic [[circuit theory]] (that is the interactions of elements such as [[resistor]]s, [[capacitor]]s, [[diode]]s, [[transistor]]s and [[inductor]]s in a circuit), the theories employed by engineers generally depend upon the work they do. For example, [[quantum mechanics]] and [[solid state physics]] might be relevant to an engineer working on [[VLSI]] (the design of integrated circuits), but are largely irrelevant to engineers working with macroscopic electrical systems. Even [[circuit theory]] may not be relevant to a person designing telecommunication systems that use [[commercial off-the-shelf|off-the-shelf]] components. Perhaps the most important technical skills for electrical engineers are reflected in university programs, which emphasize [[numeracy|strong numerical skills]], [[computer literacy]] and the ability to understand the [[technical terminology|technical language and concepts]] that relate to electrical engineering.{{Sfn|Taylor|2008|p=241}}

[[File:Laser in fibre.jpg|thumb|A [[laser]] bouncing down an [[poly(methyl methacrylate)|acrylic]] rod, illustrating the total internal reflection of light in a multi-mode optical fiber.]]

A wide range of instrumentation is used by electrical engineers.  For simple control circuits and alarms, a basic [[multimeter]] measuring [[voltage]], [[electric current|current]] and [[electrical resistance|resistance]] may suffice.  Where time-varying signals need to be studied, the [[oscilloscope]] is also an ubiquitous instrument.  In [[RF engineering]] and high frequency telecommunications [[spectrum analyzer]]s and [[Network analyzer (electrical)|network analyzer]]s are used.  In some disciplines safety can be a particular concern with instrumentation.  For instance medical electronics designers must take into account that much lower voltages than normal can be dangerous when electrodes are directly in contact with internal body fluids.{{sfn|Leitgeb|2010|P=122}} Power transmission engineering also has great safety concerns due to the high voltages used; although [[voltmeter]]s may in principle be similar to their low voltage equivalents, safety and calibration issues make them very different.&lt;ref&gt;{{harvnb|Naidu|Kamaraju|2009|p=210}}&lt;/ref&gt;  Many disciplines of electrical engineering use tests specific to their discipline.  Audio electronics engineers use [[audio system measurements|audio test sets]] consisting of a signal generator and a meter, principally to measure level but also other parameters such as [[harmonic distortion]] and [[noise (electronics)|noise]].  Likewise information technology have their own test sets, often specific to a particular data format, and the same is true of television broadcasting.

[[File:Navy-Radome.jpg|left|260px|thumbnail|[[Radome]] at the Misawa Air Base Misawa Security Operations Center, Misawa, Japan]]
For many engineers, technical work accounts for only a fraction of the work they do. A lot of time may also be spent on tasks such as discussing proposals with clients, preparing [[budget]]s and determining [[schedule (project management)|project schedules]].&lt;ref&gt;Trevelyan, James; (2005). ''What Do Engineers Really Do?''. University of Western Australia. (seminar with [http://www.mech.uwa.edu.au/jpt/Engineering%20Roles%20050503.pdf slides])&lt;/ref&gt; Many senior engineers manage a team of [[technician]]s or other engineers and for this reason [[project management]] skills are important. Most engineering projects involve some form of documentation and [[technical writing|strong written communication]] skills are therefore very important.

The [[Office|workplaces]] of electrical engineers are just as varied as the types of work they do. Electrical engineers may be found in the pristine lab environment of a [[fabrication plant]], the offices of a [[consulting firm]] or on site at a [[mining|mine]]. During their working life, electrical engineers may find themselves supervising a wide range of individuals including [[scientist]]s, [[electrician]]s, [[computer programmers]] and other engineers.{{Sfn|McDavid|Echaore-McDavid|2009|p=87}}

Electrical engineering has an intimate relationship with the physical sciences.  For instance the physicist [[Lord Kelvin]] played a major role in the engineering of the first [[transatlantic telegraph cable]].&lt;ref&gt;Huurdeman, pp.&amp;nbsp;95–96&lt;/ref&gt;  Conversely, the engineer [[Oliver Heaviside]] produced major work on the mathematics of transmission on telegraph cables.&lt;ref&gt;Huurdeman, p.90&lt;/ref&gt;  Electrical engineers are often required on major science projects.  For instance, large [[particle accelerator]]s such as [[CERN]] need electrical engineers to deal with many aspects of the project: from the power distribution, to the instrumentation, to the manufacture and installation of the [[superconducting electromagnet]]s.&lt;ref&gt;Schmidt, p.218&lt;/ref&gt;&lt;ref&gt;Martini, p.179&lt;/ref&gt;

==See also==
{{Portal|Electronics|Engineering}}
{{colbegin||25em}}
*[[Outline of electrical engineering]]
*[[Index of electrical engineering articles]]
*[[Electrical Technologist]]
*[[Electronic design automation]]
*[[International Electrotechnical Commission]] (IEC)
*[[List of electrical engineers]]
*[[List of Russian electrical engineers]]
*[[Occupations in electrical/electronics engineering]]
*[[Timeline of electrical and electronic engineering]]
*[[List of mechanical, electrical and electronic equipment manufacturing companies by revenue]]
{{colend}}

==Notes==
&lt;cite id=&quot;demographics&quot;&gt;[[#demographics back|Note I]]&lt;/cite&gt; - There were around 300,000 people ({{As of|2006|lc=on}}) working as electrical engineers in the US; in Australia, there were around 17,000 ({{As of|2008|lc=on}}) and in Canada, there were around 37,000 ({{As of|2007|lc=on}}), constituting about 0.2% of the labour force in each of the three countries. Australia and Canada reported that 96% and 88% of their electrical engineers respectively are male.&lt;ref&gt;{{cite web|title=Electrical Engineers | publisher=[[Bureau of Labor Statistics]] | url=http://www.bls.gov/oco/ocos027.htm | accessdate=13 March 2009}} See also: {{cite web | title=Work Experience of the Population in 2006 | publisher=[[Bureau of Labor Statistics]] | url=http://www.bls.gov/news.release/History/work_12192007.txt | accessdate=20 June 2008 }} and {{cite web | title = Electrical and Electronics Engineers | work = Australian Careers | url = http://joboutlook.gov.au/Pages/occupation.aspx?search=alpha&amp;tab=prospects&amp;cluster=&amp;code=2333| accessdate =13 March 2009}} and {{cite web | title = Electrical and Electronics Engineers|publisher =Canadian jobs service| url = http://www.jobfutures.ca/noc/2133p1.shtml| accessdate =13 March 2009}}&lt;/ref&gt;

==References==
{{Reflist|30em}}
;Bibliography

*{{cite book|last=Abramson|first=Albert|title=Electronic Motion Pictures: A History of the Television Camera|url=http://books.google.com/books?id=gu88XUOqyK8C&amp;pg=PA22|year=1955|publisher=University of California Press|ref=harv}}
*{{cite book|last1=Bayoumi|first1=Magdy A.|last2=Swartzlander|first2=Earl E.|title=VLSI Signal Processing Technology|url=http://books.google.com/books?id=jB4V7Vdo4gYC&amp;pg=PA25|date=31 October 1994|publisher=Springer|isbn=978-0-7923-9490-7|ref=harv}}
*{{cite book|last=Bhushan|first=Bharat|title=Micro/Nanotribology and Its Applications|url=http://books.google.com/books?id=AxxMzLZlu-kC&amp;pg=PA581|year=1997|publisher=Springer|isbn=978-0-7923-4386-8|ref=harv}}
*{{cite book|last=Bissell|first=Chris|title=Control Engineering, 2nd Edition|url=http://books.google.com/books?id=xc0fU7fh0wkC&amp;pg=PA17|date=25 July 1996|publisher=CRC Press|isbn=978-0-412-57710-9|ref=harv}}
*{{cite book|last=Chandrasekhar|first=Thomas|title=Analog Communication (Jntu)|url=http://books.google.com/books?id=UbZgOTSnkg4C&amp;pg=PR21|date=1 December 2006|publisher=Tata McGraw-Hill Education|isbn=978-0-07-064770-1|ref=harv}}
*{{cite book|last=Chaturvedi|first=Pradeep|title=Sustainable Energy Supply in Asia: Proceedings of the International Conference, Asia Energy Vision 2020, Organised by the Indian Member Committee, World Energy Council Under the Institution of Engineers (India), During November 15-17, 1996 at New Delhi|url=http://books.google.com/books?id=YEQBQ4CS31sC&amp;pg=PA253|year=1997|publisher=Concept Publishing Company|isbn=978-81-7022-631-4|ref=harv}}
*{{cite book|last1=Dodds|first1=Christopher|last2=Kumar|first2=Chandra|last3=Veering|first3=Bernadette|title=Oxford Textbook of Anaesthesia for the Elderly Patient|url=http://books.google.com/books?id=7pByAgAAQBAJ&amp;pg=PA275|date=March 2014|publisher=Oxford University Press|isbn=978-0-19-960499-9|ref=harv}}
*{{cite book|last=Fairman|first=Frederick Walker|title=Linear Control Theory: The State Space Approach|url=http://books.google.com/books?id=kZQ9x0WQa_IC&amp;pg=PA119|date=11 June 1998|publisher=John Wiley &amp; Sons|isbn=978-0-471-97489-5|ref=harv}}
*{{cite book|last1=Fredlund|first1=D. G.|last2=Rahardjo|first2=H.|last3=Fredlund|first3=M. D.|title=Unsaturated Soil Mechanics in Engineering Practice|url=http://books.google.com/books?id=zShHAAAAQBAJ&amp;pg=PT346|date=30 July 2012|publisher=Wiley|isbn=978-1-118-28050-8|ref=harv}}
*{{cite book|last1=Grant|first1=Malcolm Alister|last2=Bixley|first2=Paul F|title=Geothermal Reservoir Engineering|url=http://books.google.com/books?id=wjEjrFnAofUC&amp;pg=PA159|date=1 April 2011|publisher=Academic Press|isbn=978-0-12-383881-0|ref=harv}}
*{{cite book|last=Grigsby|first=Leonard L.|title=Electric Power Generation, Transmission, and Distribution, Third Edition|url=http://books.google.com/books?id=LHnwSThYS-YC|date=16 May 2012|publisher=CRC Press|isbn=978-1-4398-5628-4|ref=harv}}
*{{cite book|last1=Heertje|first1=Arnold|last2=Perlman|first2=Mark|title=Evolving technology and market structure: studies in Schumpeterian economics|url=http://books.google.com/books?id=eNy6AAAAIAAJ|year=1990|publisher=University of Michigan Press|isbn=978-0-472-10192-4|ref=harv}}
*{{cite book|last=Huurdeman|first=Anton A.|title=The Worldwide History of Telecommunications|url=http://books.google.com/books?id=SnjGRDVIUL4C&amp;pg=PA226|date=31 July 2003|publisher=John Wiley &amp; Sons|isbn=978-0-471-20505-0|ref=harv}}
*{{cite book|last1=Iga|first1=Kenichi|last2=Kokubun|first2=Yasuo|title=Encyclopedic Handbook of Integrated Optics|url=http://books.google.com/books?id=Rd_uSB7GfhEC&amp;pg=PA137|date=12 December 2010|publisher=CRC Press|isbn=978-1-4200-2781-5|ref=harv}}
*{{cite book|last=Jalote|first=Pankaj|title=An Integrated Approach to Software Engineering|url=http://books.google.com/books?id=M-mhFtxaaskC&amp;pg=PA22|date=31 January 2006|publisher=Springer|isbn=978-0-387-28132-2|ref=harv}}
*{{cite book|last=Khanna|first=Vinod Kumar|title=Digital Signal Processing|url=http://books.google.com/books?id=Vf2qXAbn58oC&amp;pg=PA297|date=1 January 2009|publisher=S. Chand|isbn=978-81-219-3095-6|ref=harv}}
*{{cite book|last=Lambourne|first=Robert J. A.|title=Relativity, Gravitation and Cosmology|url=http://books.google.com/books?id=GUySYQaDM1cC&amp;pg=PA11|date=1 June 2010|publisher=Cambridge University Press|isbn=978-0-521-13138-4|ref=harv}}
*{{cite book|last=Leitgeb|first=Norbert|title=Safety of Electromedical Devices: Law - Risks - Opportunities|url=http://books.google.com/books?id=FpSH-VM5TYkC|date=6 May 2010|publisher=Springer|isbn=978-3-211-99683-6|ref=harv}}
*{{cite book|last=Leondes|first=Cornelius T.|title=Energy and Power Systems|url=http://books.google.com/books?id=3rpu3nBramoC&amp;pg=PA199|date=8 August 2000|publisher=CRC Press|isbn=978-90-5699-677-2|ref=harv}}
*{{cite book|last=Mahalik|first=Nitaigour Premchand|title=Mechatronics: Principles, Concepts and Applications|url=http://books.google.com/books?id=7J_lqRoMrNwC&amp;pg=PA569|year=2003|publisher=Tata McGraw-Hill Education|isbn=978-0-07-048374-3|ref=harv}}
*{{cite book|last1=Maluf|first1=Nadim|last2=Williams|first2=Kirt|title=Introduction to Microelectromechanical Systems Engineering|url=http://books.google.com/books?id=20j7IaDKlOUC&amp;pg=PA3|date=1 January 2004|publisher=Artech House|isbn=978-1-58053-591-5|ref=harv}}
*{{cite book|last1=Manolakis|first1=Dimitris G.|last2=Ingle|first2=Vinay K.|title=Applied Digital Signal Processing: Theory and Practice|url=http://books.google.com/books?id=xLaST05CKlkC&amp;pg=PA17|date=21 November 2011|publisher=Cambridge University Press|isbn=978-1-139-49573-8|ref=harv}}
*Martini, L., &quot;BSCCO-2233 multilayered conductors&quot;, in ''Superconducting Materials for High Energy Colliders'', pp.&amp;nbsp;173–181, World Scientific, 2001 ISBN 981-02-4319-7.
*{{cite book|last1=Martinsen|first1=Orjan G.|last2=Grimnes|first2=Sverre|title=Bioimpedance and Bioelectricity Basics|url=http://books.google.com/books?id=v3EuUjoqwkkC&amp;pg=PA411|date=29 August 2011|publisher=Academic Press|isbn=978-0-08-056880-5|ref=harv}}
*{{cite book|last1=McDavid|first1=Richard A.|last2=Echaore-McDavid|first2=Susan|title=Career Opportunities in Engineering|url=http://books.google.com/books?id=Hx0g1_hs4N8C&amp;pg=PA95|date=1 January 2009|publisher=Infobase Publishing|isbn=978-1-4381-1070-7|ref=harv}}
*{{cite book|last=Merhari|first=Lhadi|title=Hybrid Nanocomposites for Nanotechnology: Electronic, Optical, Magnetic and Biomedical Applications|url=http://books.google.com/books?id=LNtRvFBAabYC&amp;pg=PA233|date=3 March 2009|publisher=Springer|isbn=978-0-387-30428-1|ref=harv}}
*{{cite book|last=Mook|first=William Moyer|title=The Mechanical Response of Common Nanoscale Contact Geometries|url=http://books.google.com/books?id=Wq1J5RXSNkoC&amp;pg=PA149|year=2008|publisher=ProQuest|isbn=978-0-549-46812-7|ref=harv}}
*{{cite book |last=Naidu |first=S. M.|last2=Kamaraju |first2=V. |title=High Voltage Engineering |publisher=Tata McGraw-Hill Education |year=2009 |isbn=0-07-066928-7 |ref=harv}}
*{{cite book|last1=Obaidat|first1=Mohammad S.|last2=Denko|first2=Mieso|last3=Woungang|first3=Isaac|title=Pervasive Computing and Networking|url=http://books.google.com/books?id=mLS6fAH8Sz8C&amp;pg=PA9|date=9 June 2011|publisher=John Wiley &amp; Sons|isbn=978-1-119-97043-9|ref=harv}}
*{{cite book|last=Rosenberg|first=Chaim M.|title=America at the Fair: Chicago's 1893 World's Columbian Exposition|url=http://books.google.com/books?id=-ErxIGp3QN0C&amp;pg=PR9|year=2008|publisher=Arcadia Publishing|isbn=978-0-7385-2521-1|ref=harv}}
*Schmidt, Rüdiger, &quot;The LHC accelerator and its challenges&quot;, in Kramer M.; Soler, F.J.P. (eds), ''Large Hadron Collider Phenomenology'', pp.&amp;nbsp;217–250, CRC Press, 2004 ISBN 0-7503-0986-5.
*{{cite book|last1=Severs|first1=Jeffrey|last2=Leise|first2=Christopher|title=Pynchon's Against the Day: A Corrupted Pilgrim's Guide|url=http://books.google.com/books?id=U3sVink6zisC&amp;pg=PA145|date=24 February 2011|publisher=Lexington Books|isbn=978-1-61149-065-7|ref=harv}}
*{{cite book|last1=Shetty|first1=Devdas|last2=Kolk|first2=Richard|title=Mechatronics System Design, SI Version|url=http://books.google.com/books?id=1UsIAAAAQBAJ&amp;pg=PA36|date=14 September 2010|publisher=Cengage Learning|isbn=1-133-16949-X|ref=harv}}
*{{cite book|last=Smith|first=Brian W.|title=Communication Structures|url=http://books.google.com/books?id=m-Uhn_O7O08C&amp;pg=PA19|date=January 2007|publisher=Thomas Telford|isbn=978-0-7277-3400-6|ref=harv}}
*{{cite book|last=Sullivan|first=Dennis M.|title=Quantum Mechanics for Electrical Engineers|url=http://books.google.com/books?id=cUcGtUE85GYC|date=24 January 2012|publisher=John Wiley &amp; Sons|isbn=978-0-470-87409-7|ref=harv}}
*{{cite book|last=Taylor|first=Allan|title=Energy Industry|url=http://books.google.com/books?id=9kOgsNM8OpMC&amp;pg=PA241|year=2008|publisher=Infobase Publishing|isbn=978-1-4381-1069-1|ref=harv}}
*{{cite book|last=Thompson|first=Marc|title=Intuitive Analog Circuit Design|url=http://books.google.com/books?id=d8EJP8qQQcwC&amp;pg=PA4|date=12 June 2006|publisher=Newnes|isbn=978-0-08-047875-3|ref=harv}}
*{{cite book|last=Tobin|first=Paul|title=PSpice for Digital Communications Engineering|url=http://books.google.com/books?id=QV_l-oMHXDMC&amp;pg=PA15|date=1 January 2007|publisher=Morgan &amp; Claypool Publishers|isbn=978-1-59829-162-9|ref=harv}}
*{{cite book|last=Tunbridge|first=Paul|title=Lord Kelvin, His Influence on Electrical Measurements and Units|url=http://books.google.com/books?id=bZUK624LZBMC|year=1992|publisher=IET|isbn=978-0-86341-237-0|ref=harv}}
*{{cite book|last=Tuzlukov|first=Vyacheslav|title=Signal Processing Noise|url=http://books.google.com/books?id=x6hoBG_MAYIC&amp;pg=PP20|date=12 December 2010|publisher=CRC Press|isbn=978-1-4200-4111-8|ref=harv}}
*{{cite book|last=Walker|first=Denise|title=Metals and Non-metals|url=http://books.google.com/books?id=kW2GWDDoif8C&amp;pg=PA23|year=2007|publisher=Evans Brothers|isbn=978-0-237-53003-7|ref=harv}}
*{{cite book|last1=Wildes|first1=Karl L.|last2=Lindgren|first2=Nilo A.|title=A Century of Electrical Engineering and Computer Science at MIT, 1882–1982|url=http://books.google.com/books?id=6ZX-GwvhcnkC&amp;pg=PA19|date=1 January 1985|publisher=MIT Press|isbn=978-0-262-23119-0|ref=harv}}
*{{cite book|last1=Zhang|first1=Yan|last2=Hu|first2=Honglin|last3=Luo|first3=Jijun|title=Distributed Antenna Systems: Open Architecture for Future Wireless Communications|url=http://books.google.com/books?id=2RrbB17RYxoC&amp;pg=PA448|date=27 June 2007|publisher=CRC Press|isbn=978-1-4200-4289-4|ref=harv}}

==Further reading==
{{Library resources box}}
*{{cite book|last1=Adhami|first1=Reza|last2=Meenen|first2=Peter M.|last3=Hite|first3=Denis|title=Fundamental Concepts in Electrical and Computer Engineering with Practical Design Problems|url=http://books.google.com/books?id=9nqkVbFPutYC|year=2007|publisher=Universal-Publishers|isbn=978-1-58112-971-7}}
*{{cite book|last1=Bober|first1=William|last2=Stevens|first2=Andrew|title=Numerical and Analytical Methods with MATLAB for Electrical Engineers|url=http://books.google.com/books?id=yiL6EWiWaUYC|date=27 August 2012|publisher=CRC Press|isbn=978-1-4398-5429-7}}
*{{cite book|last=Bobrow|first=Leonard S.|title=Fundamentals of Electrical Engineering|url=http://books.google.com/books?id=BEr779Z80LgC|year=1996|publisher=Oxford University Press|isbn=978-0-19-510509-4}}
*{{cite book|last=Chen|first=Wai Kai|title=The Electrical Engineering Handbook|url=http://books.google.com/books?id=qhHsSlazGrQC|date=16 November 2004|publisher=Academic Press|isbn=978-0-08-047748-0}}
*{{cite book|last1=Ciuprina|first1=G.|last2=Ioan|first2=D.|title=Scientific Computing in Electrical Engineering|url=http://books.google.com/books?id=sFVbC-e5_DkC|date=30 May 2007|publisher=Springer|isbn=978-3-540-71980-9}}
*{{cite book|last=Faria|first=J. A. Brandao|title=Electromagnetic Foundations of Electrical Engineering|url=http://books.google.com/books?id=2Xk4NO1b8CUC|date=15 September 2008|publisher=John Wiley &amp; Sons|isbn=978-0-470-69748-1}}
*{{cite book|last=Jones|first=Lincoln D.|title=Electrical Engineering: Problems and Solutions|url=http://books.google.com/books?id=jLIxyZSCfosC|date=July 2004|publisher=Dearborn Trade Publishing|isbn=978-1-4195-2131-7}}
*{{cite book|last=Karalis|first=Edward|title=350 Solved Electrical Engineering Problems|url=http://books.google.com/books?id=CP73jv-GBMkC|date=18 September 2003|publisher=Dearborn Trade Publishing|isbn=978-0-7931-8511-5}}
*{{cite book|last1=Krawczyk|first1=Andrzej|last2=Wiak|first2=S.|title=Electromagnetic Fields in Electrical Engineering|url=http://books.google.com/books?id=EwN2--zVLZsC|date=1 January 2002|publisher=IOS Press|isbn=978-1-58603-232-6}}
*{{cite book|last=Laplante|first=Phillip A.|title=Comprehensive Dictionary of Electrical Engineering|url=http://books.google.com/books?id=soSsLATmZnkC|date=31 December 1999|publisher=Springer|isbn=978-3-540-64835-2}}
*{{cite book|last=Leon-Garcia|first=Alberto|title=Probability, Statistics, and Random Processes for Electrical Engineering|url=http://books.google.com/books?id=GUJosCkbBywC|year=2008|publisher=Prentice Hall|isbn=978-0-13-147122-1}}
*{{cite book|last=Malaric|first=Roman|title=Instrumentation and Measurement in Electrical Engineering|url=http://books.google.com/books?id=9np_Rr-ahI8C|year=2011|publisher=Universal-Publishers|isbn=978-1-61233-500-1}}
*{{cite book|last1=Sahay|first1=Kuldeep|last2=Sahay|first2=Shivendra Pathak, Kuldeep|title=Basic Concepts of Electrical Engineering|url=http://books.google.com/books?id=r3c27IaomA0C|date=1 January 2006|publisher=New Age International|isbn=978-81-224-1836-1}}
*{{cite book|last=Srinivas|first=Kn|title=Basic Electrical Engineering|url=http://books.google.com/books?id=Sb6a_isNGl8C|date=1 January 2007|publisher=I. K. International Pvt Ltd|isbn=978-81-89866-34-1}}

==External links==
{{Sister project links}}
*[http://www.iec.ch/ International Electrotechnical Commission (IEC)]
*[http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/index.htm MIT OpenCourseWare] in-depth look at Electrical Engineering - online courses with video lectures.
*[http://www.ieeeghn.org/ IEEE Global History Network] A wiki-based site with many resources about the history of IEEE, its members, their professions and electrical and informational technologies and sciences.
*[http://telephone-museum.org/telephone-workshops/ Telephone Workshops] An Introduction to Electrical Engineering for Children

{{Engineering fields}}
{{Technology}}

{{DEFAULTSORT:Electrical Engineering}}
[[Category:Electrical engineering| ]]
[[Category:Electronic engineering]]
[[Category:Computer engineering]]
[[Category:Computer science]]
[[Category:Engineering disciplines]]</text>
      <sha1>4ngislomtwht59s7h4rqlwv9m0wcfv4</sha1>
    </revision>
  </page>
  <page>
    <title>Computer engineering</title>
    <ns>0</ns>
    <id>50408</id>
    <revision>
      <id>655369467</id>
      <parentid>655369431</parentid>
      <timestamp>2015-04-07T16:40:20Z</timestamp>
      <contributor>
        <username>Funandtrvl</username>
        <id>2966869</id>
      </contributor>
      <comment>new key for [[Category:Computer engineering]]: &quot; &quot; using [[WP:HC|HotCat]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="16340">{{pp-pc1}}
{{redirects here|Hardware engineering|engineering of other types of hardware|Mechanical engineering}}
[[File:Motherboard.jpg|thumb|right|The [[motherboard]] used in a typical [[personal computer]]. The result of Computer engineering efforts.]]

'''Computer engineering''' is a [[Discipline (academia)|discipline]] that integrates several fields of [[electrical engineering]] and [[computer science]] required to  develop computer hardware and software.&lt;ref&gt;{{Cite book
 | last = IEEE Computer Society
 | authorlink = IEEE Computer Society

 |author2=ACM |authorlink2=Association for Computing Machinery 
 | title = Computer Engineering 2004: Curriculum Guidelines for Undergraduate Degree Programs in Computer Engineering
 | url = http://www.acm.org/education/education/curric_vols/CE-Final-Report.pdf
 | accessdate = December 17, 2012
 |date=December 12, 2004
 | page = iii
 | quote = Computer System engineering has traditionally been viewed as a combination of
both electronic engineering (EE) and computer science (CS).
}}&lt;/ref&gt; Computer engineers usually have training in [[electronic engineering]] (or [[electrical engineering]]), [[software design]], and hardware-software integration instead of only software engineering or electronic engineering. Computer engineers are involved in many hardware and software aspects of computing, from the design of individual [[microcontroller]]s, [[microprocessor]]s, [[personal computer]]s, and [[supercomputer]]s, to [[circuit design]]. This field of engineering not only focuses on how computer systems themselves work, but also how they integrate into the larger picture.&lt;ref&gt;{{Cite web
 | last = Trinity College Dublin
 | url = http://www.tcd.ie/Engineering/about/what_is_eng/computer_eng_intro.html
 | title = What is Computer System Engineering
 | accessdate = April 21, 2006
}}, &quot;Computer engineers need not only to understand how computer systems themselves work, but also how they integrate into the larger picture. Consider the car. A modern car contains many separate computer systems for controlling such things as the engine timing, the brakes and the air bags. To be able to design and implement such a car, the computer engineer needs a broad theoretical understanding of all these various subsystems &amp; how they interact.&lt;/ref&gt;

Usual tasks involving computer engineers include writing software and [[firmware]] for [[embedded system|embedded]] [[microcontroller]]s, designing [[Very-large-scale integration|VLSI]] chips, designing analog sensors, designing mixed signal [[circuit board]]s, and designing [[operating system]]s. Computer engineers are also suited for [[robotics]] research, which relies heavily on using digital systems to control and monitor electrical systems like [[Electric motor|motor]]s, [[Computer-mediated communication|communications]], and [[sensor]]s.

In many institutions, computer engineering students are allowed to choose areas of in-depth study in their junior and senior year, because the full breadth of knowledge used in the design and application of computers is beyond the scope of an undergraduate degree. Other institutions may require engineering students to complete one year of General Engineering before declaring computer engineering as their primary focus.&lt;ref&gt;{{cite web|title=Changing Majors @ Clemson| url=http://www.registrar.clemson.edu/html/changeMjr_Curr.htm |publisher=Clemson University |accessdate=September 20, 2011}}&lt;/ref&gt;&lt;ref&gt;{{cite web |title=Declaring a College of Engineering Major |url=http://freshmanengineering.uark.edu/2041.php |publisher=University of Arkansas |accessdate=September 20, 2011}}&lt;/ref&gt;&lt;ref&gt;{{cite web |title=Degree Requirements| url=http://www.cmu.edu/me/undergraduate/degree-requirements.html |publisher=Carnegie Mellon University |accessdate=September 20, 2011}}&lt;/ref&gt;

==History==
The first computer engineering degree program in the [[United States]] was established at [[Case Western Reserve University]] in 1972. {{As of|2004|10}}, there were 170 [[Accreditation Board for Engineering and Technology|ABET]]-accredited computer engineering programs in the US.&lt;ref&gt;{{Cite book
 | last = IEEE Computer Society
 | authorlink = IEEE Computer Society
 |author2=ACM |authorlink2=Association for Computing Machinery 
 | title = Computer Engineering 2004: Curriculum Guidelines for Undergraduate Degree Programs in Computer Engineering
 | url = http://www.computer.org/portal/cms_docs_ieeecs/ieeecs/education/cc2001/CCCE-FinalReport-2004Dec12-Final.pdf
 | accessdate = April 21, 2006
 |date=December 12, 2004
 | page = 7

 | quote = In the United States, the first computer engineering program accredited by ABET (formerly the Accreditation Board for Engineering and Technology) was at Case Western Reserve University in 1972.  As of October 2004, ABET has accredited over 170 computer engineering or similarly named programs.
}}&lt;/ref&gt;
In Europe, accreditation of computer engineering schools is done by a variety of agencies part of the [[EQANIE]] network.
Due to increasing job requirements for engineers who can concurrently design hardware, [[Computer software|software]], firmware, and manage all forms of computer systems used in industry, some tertiary institutions around the world offer a [[bachelor's degree]] generally called computer engineering.  Both computer engineering and [[electronic engineering]] programs include analog and digital circuit design in their curriculum. As with most [[engineering]] disciplines, having a sound knowledge of [[mathematics]] and science is necessary for computer engineers.

==Work==
There are two major specialties in computer engineering: software and hardware.

===Computer software engineering===
{{Main|Software engineering}}
Computer software engineers develop, design, and test software. Some software engineers design, construct, and maintain computer programs for companies. Some set up networks such as &quot;[[intranets]]&quot; for companies. Others make or install new software or upgrade computer systems. Computer software engineers can also work in application design. This involves designing or coding new programs and applications to meet the needs of a business or individual. Computer software engineers can also work as freelancers and sell their software products/applications to an enterprise/individual.&lt;ref name = &quot;C.S.E.&quot;&gt;{{cite web |title=Computer Software Engineer |url=http://www.bls.gov/k12/computers04.htm |publisher=Bureau of Labor Statistics |date=March 19, 2010 |accessdate=July 20, 2012 |archiveurl=https://web.archive.org/web/20130726002354/http://www.bls.gov/k12/computers04.htm |archivedate=July 26, 2013}}&lt;/ref&gt;

===Computer hardware engineering===
Most computer hardware engineers research, develop, design, and test various computer equipment. This can range from circuit boards and microprocessors to routers. Some update existing computer equipment to be more efficient and work with newer software. Most computer hardware engineers work in research laboratories and high-tech manufacturing firms. Some also work for the federal government. According to [[Bureau of Labor Statistics|BLS]], 95% of computer hardware engineers work in metropolitan areas.{{Citation needed|date=March 2015}} They generally work full-time. Approximately 33% of their work requires more than 40 hours a week. The median salary for employed qualified computer hardware engineers (2012) was $100,920 per year or $48.52 per hour. Computer hardware engineers held 83,300 jobs in 2012.&lt;ref name = &quot;CHE&quot;&gt;{{cite web |title=Computer Hardware Engineers |url=http://www.bls.gov/ooh/architecture-and-engineering/computer-hardware-engineers.htm |date=January 8, 2014 |publisher=Bureau of Labor Statistics |accessdate=July 20, 2012}}&lt;/ref&gt;

==Specialty areas==
There are many specialty areas in the field of computer engineering.

===Coding, cryptography, and information protection===
{{Main|Information security}}
Computer engineers work in Coding, Cryptography, and Information Protection to develop new methods for protecting various information, such as digital images and music, fragmentation, copyright infringement and other forms of tampering. Examples include work on wireless communications, multi-antenna systems, optical transmission, and [[digital watermarking]].&lt;ref name=&quot;SCCC&quot;&gt;{{cite web |title=Computer Engineering Overview |url=http://www.careercornerstone.org/pdf/compeng/compeng.pdf |publisher=Sloan Career Cornerstone Center |accessdate=July 20, 2012}}&lt;/ref&gt;

===Communications and wireless networks===
{{Main|Communications networks|Wireless network}}
Those focusing on communications and wireless networks, work advancements in telecommunications systems and networks (especially wireless networks), modulation and error-control coding, and information theory. High-speed network design, interference suppression and modulation, design and analysis of [[fault-tolerant system]], and storage and transmission schemes are all a part of this specialty.&lt;ref name = &quot;SCCC&quot;/&gt;

===Compilers and operating systems===
{{Main|Compiler|Operating system}}
This specialty focuses on [[compilers]] and [[operating systems]] design and development. Engineers in this field develop new operating system architecture, program analysis techniques, and new techniques to assure quality. Examples of work in this field includes post-link-time code transformation algorithm development and new operating system development.&lt;ref name=&quot;SCCC&quot; /&gt;

===Computational science and engineering===
{{Main|Computational science and engineering}}
Computational Science and Engineering is a relatively new discipline. According to the Sloan Career Cornerstone Center, individuals working in this area, &quot;computational methods are applied to formulate and solve complex mathematical problems in engineering and the physical and the social sciences. Examples include aircraft design, the plasma processing of nanometer features on semiconductor wafers, [[VLSI]] circuit design, radar detection systems, ion transport through biological channels, and much more&quot;.&lt;ref name=&quot;SCCC&quot; /&gt;

===Computer networks, mobile computing, and distributed systems===
{{Main|Computer Network| Mobile computing| Distributed computing}}
In this specialty, engineers build integrated environments for computing, communications, and information access. Examples include shared-channel wireless networks, [[Adaptive Management|adaptive resource management]] in various systems, and improving the quality of service in mobile and ATM environments. Some other examples include work on wireless network systems and fast Ethernet cluster wired systems.&lt;ref name=&quot;SCCC&quot; /&gt;

===Computer systems: architecture, parallel processing, and dependability===
{{Main|Computer Architecture|Parallel Processing|Dependability}}
Engineers working in computer systems work on research projects that allow for reliable, secure, and high-performance computer systems. Projects such as designing processors for multi-threading and parallel processing are included in this field. Other examples of work in this field include development of new theories, algorithms, and other tools that add performance to computer systems.&lt;ref name=&quot;SCCC&quot; /&gt;

===Computer vision and robotics===
{{Main|Computer Vision|Robotics}}
In this specialty, computer engineers focus on developing [[Visual sensor network|visual sensing technology]] to sense an environment, representation of an environment, and manipulation of the environment. The gathered three-dimensional information is then implemented to perform a variety of tasks. These include, improved human modeling, image communication, and human-computer interfaces, as well as devices such as special-purpose cameras with versatile vision sensors.&lt;ref name=&quot;SCCC&quot; /&gt;

===Embedded systems===
[[File:Oxygen devices.svg|thumb|right|Examples of devices that use embedded systems.]]
{{Main|Embedded Systems}}
Individuals working in this area design technology for enhancing the speed, reliability, and performance of systems. Embedded systems are found in many devices from a small FM radio to the space shuttle. According to the Sloan Cornerstone Career Center, ongoing developments in embedded systems include &quot;automated vehicles and equipment to conduct search and rescue, automated transportation systems, and human-robot coordination to repair equipment in space.&quot;&lt;ref name=&quot;SCCC&quot; /&gt;

===Integrated circuits, VLSI design, testing and CAD===
{{Main|Integrated circuit|Very-large-scale integration}}
This specialty of computer engineering requires adequate knowledge of electronics and electrical systems. Engineers working in this area work on enhancing the speed, reliability, and energy efficiency of next-generation very-large-scale integrated ([[VLSI]]) circuits and microsystems. An example of this specialty is work done on reducing the power consumption of VLSI algorithms and architecture.&lt;ref name=&quot;SCCC&quot; /&gt;

===Signal, image and speech processing===
{{Main| Signal processing| Image processing| Speech processing}}
Computer engineers in this area develop improvements in human–computer interaction, including speech recognition and synthesis, medical and scientific imaging, or communications systems. Other work in this area includes computer vision development such as recognition of human facial features.&lt;ref name=&quot;SCCC&quot; /&gt;

==Education==
Most entry-level computer engineering jobs require at least a bachelor's degree in computer engineering. Sometimes a degree in [[electrical engineering]] is accepted, due to the similarity of the two fields. Because hardware engineers commonly work with computer software systems, a background in computer programming usually is needed. According to BLS, &quot;a computer engineering major is similar to electrical engineering but with some computer science courses added to the curriculum&quot;.&lt;ref name = &quot;CHE&quot; /&gt; Some large firms or specialized jobs require a master's degree. It is also important for computer engineers to keep up with rapid advances in technology. Therefore, many continue learning throughout their careers.

==Job outlook in the United States==

===Computer software engineering===
According to the U.S. [[Bureau of Labor Statistics]] (BLS), &quot;computer applications software engineers and computer systems software engineers are projected to be among the faster than average growing occupations from 2012 to 2022&quot;.&lt;ref name=&quot;C.S.E.&quot; /&gt; BLS reports an expected growth of 22% for software developers from 2012 to 2022 &lt;ref&gt;http://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm Retrieved 10/01/2014&lt;/ref&gt;(down from the 30% 2010 to 2020 estimate).&lt;ref name = &quot;CSE2&quot;&gt;{{cite web |title=Software Developers |url=http://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm |date=January 8, 2014 |publisher=Bureau of Labor Statistics |accessdate=July 21, 2012}}&lt;/ref&gt; In addition, growing concerns over cyber security add up to put computer software engineering high above the average rate of increase for all fields. However, some of the work will be outsourced in foreign countries. Due to this, job growth will not be as fast as during the last decade{{how|date=November 2012}}.&lt;ref name=&quot;C.S.E.&quot; /&gt;

===Computer hardware engineering===
According to the [[Bureau of Labor Statistics|BLS]], &quot;employment of computer hardware engineers is expected to only increase 7% from 2012 to 2022 (&quot;Slower than average&quot; in their own words when compared to other occupations)&lt;ref&gt;http://www.bls.gov/ooh/architecture-and-engineering/computer-hardware-engineers.htm Retrieved 10/01/2014&lt;/ref&gt; and is down from 9 percent in the BLS 2010 to 2020 estimate.&quot; Today, computer hardware is somehow equal to Electronic and Computer Engineering (ECE) and has divided to many subcategories, the most significant of them is Embedded system design.&lt;ref name = &quot;CHE&quot; /&gt;

==Similar occupations and field==
* [[Computer programming]]
* [[Electrical engineering]]
* [[Software development]]
* [[Systems analyst]]

==References==
{{Reflist|30em}}

{{Engineering fields}}
{{Technology-footer}}
{{Academic degrees}}

{{DEFAULTSORT:Computer Engineering}}
[[Category:Electrical engineering]]
[[Category:Electronic engineering]]
[[Category:Computer science]]
[[Category:Computer engineering| ]]
[[Category:Engineering disciplines]]

[[es:Ingeniería en computación]]
[[zh:计算机工程]]</text>
      <sha1>ey1zjh4eo68npjjg1wtpnmdytvnq00n</sha1>
    </revision>
  </page>
  <page>
    <title>Logic in computer science</title>
    <ns>0</ns>
    <id>1151991</id>
    <revision>
      <id>656287233</id>
      <parentid>650748219</parentid>
      <timestamp>2015-04-13T15:38:00Z</timestamp>
      <contributor>
        <username>FrescoBot</username>
        <id>9021902</id>
      </contributor>
      <minor/>
      <comment>Bot: [[User:FrescoBot/Links|link syntax]] and minor changes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="12762">{{for|the [[academic conference]] LICS|IEEE Symposium on Logic in Computer Science}}
[[File:Logic Gates.svg|thumbnail|right|Diagrammatic representation of computer logic gates]]
'''Logic in computer science''' covers the overlap between the field of [[logic]] and that of [[computer science]]. The topic can essentially be divided into three main areas:
* Theoretical foundations and analysis
* Use of computer technology to aid logicians
* Use of concepts from logic for computer applications

== Theoretical foundations and analysis ==
The most essential foundations for computer science are grounded in logic and set theory. The logician [[Gottlob Frege]] who defined the first propositional calculus essentially created the first programming language. The language he defined has all the formal requirements for a powerful computer programming and specification language. The [[theory of computation]] is based on concepts defined by logicians and mathematicians such as [[Alonzo Church]] and [[Alan Turing]].&lt;ref&gt;{{cite book|last=Lewis|first=Harry R.|title=Elements of the Theory of Computation|year=1981|publisher=Prentice-Hall|location=Englewood Cliffs, New Jersey|isbn=0-13-273417-6|author2=Christos H. Papadimitriou|authorlink1=Harry R. Lewis|authorlink2=Christos Papadimitriou }}&lt;/ref&gt;&lt;ref&gt;{{cite book|last=Davis|first=Martin|title=The Universal Turing Machine|publisher=Springer Verlag|url=http://books.google.com/books?id=YafIDVd1Z68C&amp;pg=PA290#v=onepage&amp;q&amp;f=false|editor=Rolf Herken|accessdate=26 December 2013|chapter=Influences of Mathematical Logic on Computer Science|authorlink=Martin Davis}}&lt;/ref&gt;   In addition some other major areas of theoretical overlap between logic and computer science are:
*[[Godel's incompleteness theorem]] proves that any logical system powerful enough to characterize arithmetic will contain statements that can neither be proven true nor false within that system.  This has direct application to theoretical issues relating to the feasibility of proving the completeness and correctness of software.&lt;ref&gt;{{cite book|last=Hofstadter|first=Douglas R.|title=Gödel, Escher, Bach: An Eternal Golden Braid|publisher=Basic Books|isbn=978-0465026562|authorlink=Douglas Hofstadter}}&lt;/ref&gt;  
*The [[Frame problem]] is a basic problem which must be overcome when using first order logic to represent the goals and state of an artificial intelligence agent.&lt;ref&gt;{{cite journal|last=McCarthy|first=J|author2=P.J. Hayes |title=Some philosophical problems from the standpoint of artificial intelligence|journal=Machine Intelligence|year=1969|volume=4|pages=463–502|authorlink1=John McCarthy (computer scientist)}}&lt;/ref&gt; 
&lt;!-- *[[Category theory]] is the formal analysis and transformation of [[Graph theory|directed graphs]], an area with some applications in computer science, most notably programming languages and compilers.&lt;ref&gt;{{cite journal|last=DeLoach|first=Scott|author2=Thomas Hartrum |title=A Theory Based Representation for Object-Oriented Domain Models|journal=IEEE Transactions on Software Engineering|date=June 2000|volume=25|issue=6}}&lt;/ref&gt; --&gt;
*The [[Curry-Howard correspondence]] is a proof about the relation between logical systems and software. This theory established the theoretical foundation for viewing a computer program as a formal logical statement that could be proven to be correct and consistent.

== Computers to Assist Logicians ==
One of the first applications to use the term [[Artificial Intelligence]] was the Logic Theorist system developed by [[Allen Newell]], J.C. Shaw, and [[Herbert A. Simon|Herbert Simon]] in 1956. One of the things that a Logician does is to take a set of statements in Logic and deduce the conclusions (additional statements) that must be true by the laws of logic. For example If given a logical system that states &quot;All humans are mortal&quot; and &quot;Socrates is human&quot; a valid conclusion is &quot;Socrates is mortal&quot;.  Of course this is a trivial example. In actual logical systems the statements can be numerous and complex. It was realized early on that this kind of analysis could be significantly aided by the use of computers. The Logic Theorist validated the theoretical work of [[Bertrand Russell]] and [[Alfred North Whitehead]] in their influential work on mathematical logic called [[Principia Mathematica]]. In addition subsequent systems have been utilized by logicians to validate and discover new logical theorems and proofs.&lt;ref&gt;{{cite book|last=Newell|first=Allen|title=Computers and Thought|year=1963|publisher=McGraw Hill|isbn=978-0262560924|pages=109–133|coauthors=J.C. Shaw and H.C. Simon|editor=Ed Feigenbaum|chapter=Empirical explorations with the logic theory machine}}&lt;/ref&gt;

== Logic applications for computers ==
There has always been a strong influence from mathematical logic on the field of [[Artificial Intelligence|Artificial Intelligence (AI)]]. From the beginning of the field it was realized that technology to automate logical inferences could have great potential to solve problems and draw conclusions from facts. Ron Brachman has described [[First Order Logic]] (FOL) as metric by which all AI knowledge representation formalism should be evaluated. There is no more general or powerful known method for describing and analyzing information than FOL. The reason FOL itself is simply not used as a computer language is that it is actually too expressive, in the sense that FOL can easily express statements that no computer, no matter how powerful, could ever solve. For this reason every form of knowledge representation is in some sense a trade off between expressivity and computability. The more expressive the language is, the closer it is to FOL, the more likely it is to be slower and prone to an infinite loop.&lt;ref&gt;{{cite book|last=Levesque|first=Hector|title=Reading in Knowledge Representation|year=1985|publisher=Morgan Kaufmann|isbn=0-934613-01-X|page=49|author2=Ronald Brachman |editor=Ronald Brachman and Hector J. Levesque|chapter=A Fundamental Tradeoff in Knowledge Representation and Reasoning|quote=The good news in reducing KR service to theorem proving is that we now have a very clear, very specific notion of what the KR system should do; the bad new is that it is also clear that the services can not be provided... deciding whether or not a sentence in FOL is a theorem... is unsolvable.}}&lt;/ref&gt;

For example, IF THEN rules used in [[Expert system|Expert Systems]] are a very limited subset of FOL. Rather than arbitrary formulas with the full range of logical operators the starting point is simply what logicians refer to as [[Modus Ponens]]. As a result the computability of [[Rule-based system|rule based systems]] can be quite good, especially if they take advantage of optimization algorithms and compilation.&lt;ref&gt;{{cite journal|last=Forgy|first=Charles|title=Rete: A Fast Algorithm for the Many Pattern/Many Object Pattern Match Problem*|journal=Artificial Intelligence|year=1982|volume=19|pages=17–37|url=http://web.yonsei.ac.kr/yusong/lecture/data/BI/Materials/1.1.Rete%20-%20A%20Fast%20Algorithm%20for%20the%20Many%20Pattern,%20Many%20Object%20Pattern%20Match%20Problem.pdf|accessdate=25 December 2013|doi=10.1016/0004-3702(82)90020-0}}&lt;/ref&gt;

Another major area of research for logical theory was software engineering. Research projects such as the [[Knowledge Based Software Assistant|Knowledge-Based Software Assistant]] and Programmer's Apprentice programs applied logical theory to validate the correctness of software specifications. They also used them to transform the specifications into efficient code on diverse platforms and to prove the equivalence between the implementation and the specification.&lt;ref&gt;{{cite journal|last=Rich|first=Charles|author2=Richard C. Waters |title=The Programmer's Apprentice Project: A Research Overview|journal=IEE Expert Special Issue on the Interactions between Expert Systems and Software Engineering|date=November 1987|url=ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-1004.pdf|accessdate=26 December 2013}}&lt;/ref&gt;  This formal transformation driven approach is often far more effort than traditional software development. However, in specific domains with appropriate formalisms and reusable templates the approach has proven viable for commercial products. The appropriate domains are usually those such as weapons systems, security systems, and real time financial systems where failure of the system has excessively high human or financial cost. An example of such a domain is [[Very-large-scale integration|Very Large Scale Integrated (VLSI) Design]]—the process for designing the chips used for the CPU's and other critical components of digital devices. An error in a chip is catastrophic. Unlike software chips can't be patched or updated. As a result there is commercial justification for using formal methods to prove that the implementation corresponds to the specification.&lt;ref&gt;{{cite book|last=Stavridou|first=Victoria|title=Formal Methods in Circuit Design|year=1993|publisher=Press Syndicate of the University of Cambridge|isbn=0-521-443369|url=http://books.google.com/books?id=Hf_AZfW2YWsC&amp;pg=PA14&amp;lpg=PA14&amp;dq=VLSI+chip+design+formal+methods&amp;source=bl&amp;ots=KzTJ7IrWmm&amp;sig=jUvF19wOzfMqUGh4YQl5XzZrEfY&amp;hl=en&amp;sa=X&amp;ei=W1K8Uu7YItXloASPsoCwCw&amp;ved=0CDkQ6AEwAQ#v=onepage&amp;q=VLSI%20chip%20design%20formal%20methods&amp;f=false|accessdate=26 December 2013}}&lt;/ref&gt;

Another important application of logic to computer technology has been in the area of [[Frame language]]s and automatic classifiers. [[Frame language]]s such as [[KL-ONE]] have a rigid semantics. Definitions in KL-ONE can be directly mapped to set theory and the predicate calculus. This allows specialized theorem provers called classifiers to analyze the various declarations between sets, subsets, and relations in a given model. In this way the model can be validated and any inconsistent definitions flagged. The classifier can also infer new information, for example define new sets based on existing information and change the definition of existing sets based on new data. The level of flexibility is ideal for handling the ever changing world of the Internet. Classifier technology is built on top of languages such as the [[Web Ontology Language]] to allow a logical semantic level on to the existing Internet. This layer of is called the [[Semantic web]].&lt;ref&gt;{{cite journal|last=MacGregor|first=Robert|title=Using a description classifier to enhance knowledge representation|journal=IEEE Expert|date=June 1991|volume=6|issue=3|url=http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=87683&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D87683|accessdate=10 November 2013}}&lt;/ref&gt;&lt;ref&gt;{{cite journal|last=Berners-Lee|first=Tim|coauthors=James Hendler and Ora Lassila|title=The Semantic Web A new form of Web content that is meaningful to computers will unleash a revolution of new possibilities|journal=Scientific American|date=May 17, 2001|url=http://www.cs.umd.edu/~golbeck/LBSC690/SemanticWeb.html|authorlink=Tim Berners-Lee}}&lt;/ref&gt;

[[Temporal logic]] is used for reasoning in [[concurrency (computing)|concurrent systems]].&lt;ref&gt;{{cite conference | author = Colin Stirling | year = 1992
 | title = Modal and Temporal Logics |pages=477–563| 
booktitle = Handbook of Logic in Computer Science | 
editor = S. Abramsky, D. M. Gabbay, T. S. E. Maibaum, editors, | volume = II| 
publisher = Oxford University Press | isbn = 0-19-853761-1 }}&lt;/ref&gt;

== References ==
{{reflist}}

== Books ==
* {{cite book|title=Mathematical Logic for Computer Science|first1=Mordechai|last1=Ben-Ari|publisher=[[Springer Science+Business Media|Springer-Verlag]]|edition=2nd|year=2003|isbn=1-85233-319-7}}
* {{cite book|url=http://www.cs.bham.ac.uk/research/lics/|title=Logic in Computer Science: Modelling and Reasoning about Systems|first1=Michael|last1=Huth|first2=Mark|last2=Ryan|publisher=[[Cambridge University Press]]|edition=2nd|year=2004|isbn=0-521-54310-X}}
* {{cite book|title=Logic for Mathematics and Computer Science|first1=Stanley N.|last1=Burris|publisher=[[Prentice Hall]]|year=1997|isbn=0-13-285974-2}}

== See also ==
* [[Computational logic]]
* [[Logic Programming]]
* [[Automated theorem proving]]

==External links==
*[http://plato.stanford.edu/entries/logic-ai/ Article on ''Logic and Artificial Intelligence''] at the [[Stanford Encyclopedia of Philosophy]].
*[http://www.informatik.hu-berlin.de/lics/ IEEE Symposium on Logic in Computer Science] (LICS)
*Alwen Tiu, [http://videolectures.net/ssll09_tiu_intlo/ Introduction to logic] video recording of a lecture at ANU Logic Summer School '09 (aimed mostly at computer scientists)

{{logic}}
[[Category:Computer science]]
[[Category:Formal methods]]
[[Category:Logic in computer science]]</text>
      <sha1>r5k1r401xsqpiuptzuptu3i6ogajjli</sha1>
    </revision>
  </page>
  <page>
    <title>Cloud robotics</title>
    <ns>0</ns>
    <id>44628427</id>
    <revision>
      <id>646950271</id>
      <parentid>646948632</parentid>
      <timestamp>2015-02-13T13:13:38Z</timestamp>
      <contributor>
        <username>Ebraminio</username>
        <id>1355960</id>
      </contributor>
      <comment>/* External links */ moved to wikidata</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="21092">'''Cloud robotics''' is a field of [[robotics]] that attempts to invoke cloud technologies such as [[cloud computing]], cloud storage, and other Internet technologies centred around the benefits of converged infrastructure and shared services for robotics. When connected to the cloud, robots can benefit from the powerful computational, storage, and communications resources of modern data centre in the cloud, which can process and share information from various robots or agent (other machines, smart objects, humans, etc.). Humans can also delegate tasks to robots remotely through networks. Cloud computing technologies enable robot systems to be endowed with powerful capability whilst reducing costs through cloud technologies. Thus, it is possible to build lightweight, low cost, smarter robots have intelligent &quot;brain&quot; in the cloud. The &quot;brain&quot; consists of [[data center]], [[knowledge base]], task planners, [[deep learning]], information processing, environment models, communication support etc.&lt;ref name=RASrobot&gt;{{cite web|title=Cloud Robotics and Automation A special issue of the IEEE Transactions on Automation Science and Engineering.|url=http://www.ieee-ras.org/publications/t-ase/special-issues/special-issue-on-cloud-robotics-and-automation|publisher=IEEE|accessdate=7 December 2014}}&lt;/ref&gt;&lt;ref&gt;{{cite web|title=RoboEarth|url=http://roboearth.org/cloud_robotics/}}&lt;/ref&gt;&lt;ref name=kengoldburge&gt;{{cite web|last1=Goldberg|first1=Ken|title=Cloud Robotics and Automation|url=http://goldberg.berkeley.edu/cloud-robotics}}&lt;/ref&gt;&lt;ref name=&quot;sites.google.com&quot;&gt;{{cite web|last1=Li|first1=R|title=Cloud Robotics-Enable cloud computing for robots|url=https://sites.google.com/site/ruijiaoli/blogs/page|accessdate=7 December 2014}}&lt;/ref&gt;
[[File:Cloud assitive robots.jpg|thumbnail|right|Cloud Robots Paradigm]]

==Components==
A cloud for robots potentially has at least six significant components:&lt;ref name=cloudsurvey&gt;{{cite journal|last1=Kehoe|first1=Ben|last2=Patil|first2=Sachin|last3=Abbeel|first3=Pieter|last4=Goldburg|first4=Ken|title=A Survey of Research on Cloud Robotics and Automation|journal=IEEE TRANSACTIONS ON AUTOMATION SCIENCE AND ENGINEERING|date=13 September 2014|url=http://goldberg.berkeley.edu/pubs/2015-T-ASE-Cloud-Robotics-Survey.pdf}}&lt;/ref&gt;

* Offering a global library of images, maps, and object data, often with geometry and mechanical properties, expert system, knowledge base (i.e. semantic web, data centres)；
* Massively-parallel computation on demand for sample-based statistical modelling and motion planning, task planning, multi-robot collaboration, scheduling and coordination of system；
* Robot sharing of outcomes, trajectories, and dynamic control policies and robot learning support；
* Human sharing of &quot;open-source&quot; code, data, and designs for programming, experimentation, and hardware construction；
* On-demand human guidance and assistance for evaluation, learning, and error recovery;
* Augmented human robot interaction through various way (Semantics knowledge base, Apple SIRI like service etc.).

== Applications ==

'''Autonomous Mobile Robots''': [[Google driverless car|Google's self-driving cars]] are cloud robots. The cars use the network to access Google's enormous database of maps and satellite and environment model (like Streetview) and combines it with streaming data from GPS, cameras, and 3D sensors to monitor its own position within centimetres, and with past and current traffic patterns to avoid collisions. Each car can learn something about environments, roads, or driving, or conditions, and it sends the information to the Google cloud, where it can be used to improve the performance of other cars. [[File:Cloudcar.jpg|thumbnail|Cloud Self-driving Car]]

'''Cloud Medical Robots''': a medical cloud (also called heathcare cluster) consists of various service such as disease archive, electronic medical records, patient health management system, practice service, analytics service, clinic solutions, expert system etc. A robot can connect to the cloud to provide clinic service to penitents as well as delivery assistance to doctors such as co-surgery robot. Moreover, it also provides collaboration service by sharing information for doctors, care giver in clinic treatment.&lt;ref&gt;{{cite web|title=Impact of Cloud Computing on Healthcare|url=http://www.cloudstandardscustomercouncil.org/cscchealthcare110512.pdf}}&lt;/ref&gt;
[[File:Cliniccloud.jpg|thumbnail|Cloud Clinic Robot Paradigm]]

'''Assistive Robots''': A domestic robot can be employed for healthcare and life monitoring for elderly people. The system collects the health status of users and exchange information with cloud expert system or doctors to facilitate elderly peoples life, especially for those with chronic diseases. For example, the robots are able to provide support to prevent the elderly from falling down, emergency healthy support such as heart disease, blooding disease. Care givers of elderly people can also get notification when in emergency from the robot through network.&lt;ref name=smc&gt;{{cite journal|last1=Li|first1=Ruijiao|last2=Hu|first2=Huosheng|title=Towards ROS Based Multi-robot Architecture for Ambient Assisted Living|journal=Systems, Man, and Cybernetics (SMC), 2013 IEEE International Conference on|date=16 October 2013|pages=3458–3463|doi=10.1109/SMC.2013.590|accessdate=7 December 2014}}&lt;/ref&gt;

'''Industrial Robots''': As highlighted by the Germany [[Industry 4.0]] Plan &quot;Industry is on the threshold of the fourth industrial revolution. Driven by the Internet, the real and virtual worlds are growing closer and closer together to form the Internet of Things. Industrial production of the future will be characterised by the strong individualisation of products under the conditions of highly flexible (large series) production, the extensive integration of customers and business partners in business and value-added processes, and the linking of production and high-quality services leading to so-called hybrid products.&quot; &lt;ref name=ind4.0&gt;{{cite web|title=Project of the Future: Industry 4.0|url=http://www.bmbf.de/en/19955.php|accessdate=9 December 2014}}&lt;/ref&gt; In manufacturing, such cloud based robot systems could learn to handle tasks such as threading wires or cables, or aligning gaskets from professional knowledge base. A group of robots can share information for some collaborative tasks. Even more, a consumer is able to order customised product to manufacturing robots directly with online order system.&lt;ref name=rcrush&gt;{{cite web|last1=LaSelle|first1=Rush|title=Automation in the Cloud|url=http://www.robotics.org/content-detail.cfm/Industrial-Robotics-Industry-Insights/Automation-in-the-Cloud/content_id/2826|publisher=Robotic Industries Association|accessdate=9 December 2014}}&lt;/ref&gt; Another potential paradigm is shopping-delivery robot system- once an order is placed, a warehouse robot dispatches the item to an autonomous car or autonomous drone to delivery it to its recipient (see Figure [[:File:Cloudcar.jpg|Cloud Self-driving Car]] ).

== Research  ==
'''RoboEarth''' &lt;ref name=roboearth&gt;{{cite web|title=roboearth|url=http://roboearth.org|website=|accessdate=7 December 2014}}&lt;/ref&gt; was funded by the European Union's Seventh Framework Programme for research, technological development projects, specifically to explore the field of cloud robotics. The goal of RoboEarth is to allow robotic systems to benefit from the experience of other robots, paving the way for rapid advances in machine cognition and behaviour, and ultimately, for more subtle and sophisticated human-machine interaction.  RoboEarth offers a Cloud Robotics infrastructure. RoboEarth’s World-Wide-Web style database stores knowledge generated by humans – and robots – in a machine-readable format. Data stored in the RoboEarth knowledge base include software components, maps for navigation (e.g., object locations, world models), task knowledge (e.g., action recipes, manipulation strategies), and object recognition models (e.g., images, object models).  The RoboEarth Cloud Engine includes support for mobile robots, autonomous vehicles, and drones, which require lots of computation for navigation.&lt;ref name=robieee&gt;{{cite journal|last1=Waibel|first1=M|last2=Tenorth|first2=M|last3=D'Andrea|first3=R|title=RoboEarth|journal=IEEE Robotics &amp; Automation Magazine|volume=18|issue=2|pages=69–82|url=http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=5876227&amp;tag=1|doi=10.1109/MRA.2011.941632}}&lt;/ref&gt;

'''Rapyuta''' &lt;ref name=rapyuta&gt;{{cite web|title=Rapyuta|url=http://rapyuta.org/welcome|accessdate=7 December 2014}}&lt;/ref&gt; is an open source cloud robotics framework based on RoboEarth Engine developed by the robotics researcher at ETHZ. Within the framework, each robot connected to Rapyuta can have a secured computing environment (rectangular boxes) giving them the ability to move their heavy computation into the cloud. In addition, the computing environments are tightly interconnected with each other and have a high bandwidth connection to the RoboEarth knowledge repository.&lt;ref&gt;{{cite journal|last1=Hunziker|first1=D|last2=D'Andrea|first2=R|last3=Gajamohan|first3=M|last4=Waibel|first4=M|title=Rapyuta: The RoboEarth Cloud Engine|journal=Robotics and Automation (ICRA), 2013 IEEE International Conference on|date=May 2013|pages=438–444|doi=10.1109/ICRA.2013.6630612|url=http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6630612}}&lt;/ref&gt;

'''KnowRob''' &lt;ref name=knowrob&gt;{{cite web|title=KnowRob|url=http://ias.in.tum.de/research/knowledge|accessdate=8 December 2014}}&lt;/ref&gt; is an extensional project of RoboEarth. It is a knowledge processing system that combines knowledge representation and reasoning methods with techniques for acquiring knowledge and for grounding the knowledge in a physical system and can serve as a common semantic framework for integrating information from different sources.

'''RoboBrain''' &lt;ref name=robobrain&gt;{{cite web|title=RoboBrain Project|url=http://robobrain.me|website=|accessdate=7 December 2014}}&lt;/ref&gt;  is a large-scale computational system that learns from publicly available Internet resources, computer simulations, and real-life robot trials. It accumulates everything robotics into a comprehensive and interconnected knowledge base. Applications include prototyping for robotics research, household robots, and self-driving cars. The goal is as direct as the project's name—to create a centralised, always-online brain for robots to tap into. The project is dominated by Stanford University and Cornel University. And the project is supported by the National Science Foundation, the Office of Naval Research, the Army Research Office, Google, Microsoft, Qualcomm, the Alfred P. Sloan Foundation and the National Robotics Initiative, whose goal is to advance robotics to help make the United States more competitive in the world economy.&lt;ref name=robocornel&gt;{{cite web|title=Robo Brain' mines the Internet to teach robots|url=http://www.news.cornell.edu/stories/2014/08/robo-brain-mines-internet-teach-robots}}&lt;/ref&gt;

'''[[MyRobots]]''' is a service for connecting robots and intelligent devices to the Internet.&lt;ref name=myrob&gt;{{cite web|title=MyRobots|url=http://www.myrobots.com/wiki/About|accessdate=9 December 2014}}&lt;/ref&gt; It can be regarded as a social network for robots and smart objects (i.e. Facebook for robots). With socialising, collaborating and sharing, robots can benefit from those interactions too by sharing their sensor information giving insight on their perspective of their current state.

'''COALAS''' &lt;ref name=coalas&gt;{{cite web|last1=Hu|first1=Huosheng|last2=McDonald-Maier|first2=Klaus D|last3=Gu|first3=Dongbing|last4=Li|first4=Ruijiao|title=COLAS|url=http://coalas-project.eu/indexen.php?p=team|accessdate=7 December 2014}}&lt;/ref&gt; is funded by the INTERREG IVA France (Channel) – England European cross-border co-operation programme. The project aims to develop new technologies for handicapped people through social and technological innovation and through the users' social and psychological integrity. Objectives is to produce a cognitive ambient assistive living system with Healthcare cluster in cloud with domestic service robots like humanoid, intelligent wheelchair which connect with the cloud.&lt;ref name=&quot;smc&quot;/&gt;

'''[[Robot Operating System|ROS]]'''(Robot Operating System) provides an eco-system to support cloud robotics. ROS is a flexible and distributed framework for robot software development. It is a collection of tools, libraries, and conventions that aim to simplify the task of creating complex and robust robot behaviour across a wide variety of robotic platforms. A library for ROS that is a pure Java implementation, called rosjava, allows Android applications to be developed for robots. Since Android has a booming market and billion users, it would be significant in the field of Cloud Robotics.&lt;ref name=rosjava&gt;{{cite web|title=ROSjava-Cloud Robotics|url=http://docs.rosjava.googlecode.com/hg/rosjava_core/html/index.html|accessdate=9 December 2014}}&lt;/ref&gt;

== Limitations of Cloud Robotics ==
Though robots can benefit from various advantages of cloud computing, cloud is not the solution to all of robotics.&lt;ref name=roadmap&gt;{{cite web|last1=Robotics-vo|title=A Roadmap for U.S. Robotics From Internet to Robotics 2013 Edition|url=https://robotics-vo.us/sites/default/files/2013%20Robotics%20Roadmap-rs.pdf|website=|accessdate=8 December 2014}}&lt;/ref&gt;

* Controlling a robot’s motion which relies heavily on sensors and feedback of controller won’t benefit much from the cloud.
* Cloud-based applications can get slow or unavailable due to low-latency responses or network hitch. If a robot relies too much on the cloud, a fault in the network could leave it “brainless.”
* Tasks that involve real-time execution require on-board processing.

== Challenges ==
The research and development of cloud robotics has following potential issues and challenges:&lt;ref name=&quot;roadmap&quot;/&gt;

*Scalable parallelisation-grid-based computing, parallelisation schemes scale with the size of automation infrastructure.
*Effective load balancing: Balancing operations between local and cloud computation.
*Knowledge bases and representations
*Collective learning for automation in cloud
*Infrastructure/Platform or Software as a Service
*Internet of Things for robotics
*Integrated and collaborative fault tolerant control
*Big Data: Data, collected and/or disseminated over large, accessible networks can enable decisions for classification problems or reveal patterns.
*Wireless communication, Connectivity to the cloud
*System architectures of robot cloud
*Open-source, open-access infrastructures
* Workload Sharing
* Standards and Protocol

== Risks ==

'''Environmental security''' - The concentration of computing resources and users in a cloud computing environment also represents a concentration of security threats. Because of their size and significance, cloud environments are often targeted by virtual machines and bot malware, brute force attacks, and other attacks.

'''Data privacy and security''' - Hosting confidential data with cloud service providers involves the transfer of a considerable amount of an organisation's control over data security to the provider. For example, every cloud contains a huge information from the clients include personal data. If a household robot is hacked, users could have risk of their personal privacy and security, like house layout, life snapshot, home-view, etc. It may be accessed and leaked to the world around by criminals. Another problems is once a robot is hacked and controlled by someone else, which may put the user in danger.

'''Ethic Problems''' - Some ethics of robotics, especially for cloud based robotics must be considered. Since a robot is connected via networks, it has risk to be accessed by other people. If a robot is out of control and carries out illegal activities, who should be responsible for it.

== History ==
Special Issue on Cloud Robotics and Automation- A special issue of the IEEE Transactions on Automation Science and Engineering, April 2015.&lt;ref name=&quot;RASrobot&quot;/&gt;

2013 IEEE IROS Workshop on Cloud Robotics. Tokyo. November 2013.&lt;ref&gt;{{cite web|title=2013 IEEE IROS Workshop on Cloud Robotics. Tokyo. November 2013|url=http://roboearth.org/iros2013/}}&lt;/ref&gt;

NRI Workshop on Cloud Robotics: Challenges and Opportunities- February 2013.&lt;ref name=nri&gt;{{cite web|title=http://cloud-robotics.cs.umn.edu/|url=http://cloud-robotics.cs.umn.edu/|accessdate=7 December 2014}}&lt;/ref&gt;

Robot APP Store Robot Applications in Cloud, provide applications for robot just like computer/phone app.&lt;ref name=robotapp&gt;{{cite web|title=RobotApp|url=http://www.robotappstore.com|accessdate=7 December 2014}}&lt;/ref&gt;

DARPA Cloud Robotics.&lt;ref&gt;{{cite web|title=DARPA-Cloud-Robotics|url=http://robohub.org/darpas-gill-pratt-on-googles-robotics-investments/|accessdate=7 December 2014}}&lt;/ref&gt;

A Roadmap for U.S. Robotics From Internet to Robotics 2013 Edition- by Georgia Institute of Technology, Carnegie Mellon University Robotics Technology Consortium, University of Pennsylvania, University of Southern California, Stanford University, University of California–Berkeley, University of Washington, Massachusetts Institute of TechnologyUS and Robotics OA US. The Roadmap highlighted “Cloud” Robotics and Automation for Manufacturing in the future years.&lt;ref name=&quot;roadmap&quot;/&gt;

Cloud-Based Robot Grasping with the Google Object Recognition Engine.&lt;ref&gt;{{cite journal|last1=Goldberg|first1=Ken|title=Cloud-based robot grasping with the google object recognition engine|journal=Robotics and Automation (ICRA), 2013 IEEE International Conference on|doi=10.1109/ICRA.2013.6631180}}&lt;/ref&gt;

National Robotics Initiative of US  announced in 2011 aimed to explore how robots can enhance the work of humans rather than replacing them. It claims that next generation of robots are more aware than oblivious, more social than solitary.&lt;ref name=nfs&gt;{{cite web|title=Big NSF grant funds research into training robots to work with humans|url=https://newscenter.berkeley.edu/2012/12/17/ken-goldbergs-latest-big-adventure-cloud-robotics/}}&lt;/ref&gt;

James J. Kuffner, a former CMU robotics professor, and now research scientist at Google, spoke on cloud robotics in IEEE/RAS International Conference on Humanoid Robotics 2010. It describes &quot;a new approach to robotics that takes advantage of the Internet as a resource for massively parallel computation and sharing of vast data resources.&quot;&lt;ref&gt;{{cite web|last1=Kuffner|first1=James|title=Cloud Enabled Humanoid Robots|url=http://i61www.ira.uka.de/users/asfour/Workshop-Humanoids2010/talks/James-Kuffner-Humanoids2010.pdf|publisher=IEEE-RAS International Conference on Humanoid Robotics}}&lt;/ref&gt;

Ryan Hickman, a Google Product Manager, led an internal volunteer effort in 2010 to connect robots with the Google's cloud services.This work was later expanded to include open source ROS support and was demonstrated on stage by Ryan Hickman, Damon Kohler, Brian Gerkey, and Ken Conley at Google I/O 2011.&lt;ref&gt;{{cite web|title=Google I/O 2011: Cloud Robotics, ROS for Java and Android|url=http://www.ros.org/news/2011/05/google-io-2011-cloud-robotics-ros-for-java-and-android.html|accessdate=9 December 2014}}&lt;/ref&gt;

Cloud Robotics-Enable cloud computing for robots. The author proposed some paradigms of using cloud computing in robotics. Some potential field and challenges were coined. R. Li 2009.&lt;ref name=&quot;sites.google.com&quot;/&gt;

The IEEE RAS Technical Committee on Internet and Online Robots was founded by Ken Goldberg and Roland Siegwart et al. in May 2001. The committee then expanded to IEEE Society of Robotics and Automation's Technical Committee on Networked Robots in 2004.&lt;ref name=nrc&gt;{{cite web|title=Networked Robots Committee|url=http://www-users.cs.umn.edu/~isler/tc/|accessdate=8 December 2014}}&lt;/ref&gt;

==See also==
*[[List of mergers and acquisitions by Google]]
*[[Outline of robotics]]
*[[Internet of Things]]
*[[Multi agent system]]
*[[Transcendence (2014 film)|Transcendence]]

== References ==
{{Reflist|2}}

==External links==
*[http://www.roboticsnews.co.uk Robotics News]
*[http://www.roboticsportal.it Robotics Portal]
*[http://www.roboticsbusinessreview.com/articles/view/the-age-of-cloud-robotics/ The age of cloud robotics - Robotics business review.]
*[http://spectrum.ieee.org/automaton/robotics/robotics-software/cloud-robotics Cloud Robotics - IEEE Spectrum]
*[http://robohub.org/tag/cloud-robotics/ Cloud robotics on RoboHub]
*[http://link.springer.com/article/10.1007/s13174-010-0007-6 Cloud computing: state-of-the-art and research challenges]
*[http://www.expo21xx.com/automation21xx/university.htm Automation EXPO21XX]
*[https://www.youtube.com/watch?v=ODF3W_14fgM Cloud Robotics with Ken Goldberg (Video)]
*[http://roboticshackathon.com/ Cloud Robotics Hackathon]

[[Category:Robotics]]
[[Category:Artificial intelligence]]
[[Category:Computer science]]
[[Category:Technology]]
[[Category:Cloud computing]]
[[Category:Assistive technology]]</text>
      <sha1>2aoekhtijchucms3ka3hj5ctg21gxx4</sha1>
    </revision>
  </page>
  <page>
    <title>Energy informatics</title>
    <ns>0</ns>
    <id>44689684</id>
    <revision>
      <id>640322201</id>
      <parentid>640031392</parentid>
      <timestamp>2014-12-31T01:51:11Z</timestamp>
      <contributor>
        <username>Mojo Hand</username>
        <id>1453997</id>
      </contributor>
      <comment>AfD closed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1632">{{multiple issues|
{{refimprove|date=December 2014}}
{{Underlinked|date=December 2014}}
}}

== Definition ==
Energy informatics is a research field covering the use of [[Information and communications technology|information and communication technology]] to address energy challenges.&lt;ref&gt;{{cite book|last1=Watson|first1=Richard|last2=Boudreau|first2=Marie-Claude|title=Energy Informatics|publisher=Green ePress|pages=163 pages}}&lt;/ref&gt;

== Application Areas ==
The field among other consider application areas within:

* Smart Buildings by developing ICT-centred solutions for improving the energy-efficiency of buildings.
* [[Smart city|Smart Cities]] by investigating the synergies between demand patterns and supply availability of energy flows in cities and communities to improve energy efficiency, increase integration of renewable sources, and provide resilience towards system faults caused by extreme situations, like hurricanes and flooding.
* Smart Industries including the development of ICT-centred solutions for improving the energy efficiency and predictability of energy intensive industrial processes, without compromising process and product quality.
* Smart Energy Networks by developing ICT-centred solutions for coordinating the supply and demand in environmentally sustainable energy networks.

== Research centers ==
[http://www.sdu.dk/EnergyInformatics Center for Energy Informatics] at University of Southern Denmark

[http://cei.usc.edu Center For Energy Informatics] at USC

==References==
{{Reflist}}

[[Category:Computer science]]
[[Category:Information science]]
[[Category:Energy]]


{{Comp-sci-stub}}</text>
      <sha1>6hdxu3eu9lwqdy467j5n021l8szng8o</sha1>
    </revision>
  </page>
  <page>
    <title>BadBIOS</title>
    <ns>0</ns>
    <id>44892240</id>
    <revision>
      <id>656390460</id>
      <parentid>656294271</parentid>
      <timestamp>2015-04-14T05:15:58Z</timestamp>
      <contributor>
        <username>BG19bot</username>
        <id>14508071</id>
      </contributor>
      <minor/>
      <comment>[[WP:CHECKWIKI]] error fix for #64.  Do [[Wikipedia:GENFIXES|general fixes]] if a problem exists. - using [[Project:AWB|AWB]] (10901)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2797">'''BadBIOS''' is an alleged [[advanced persistent threat]] reported by [[network security]] researcher [[Dragos Ruiu]] in October 2013&lt;ref name=regbreaking&gt;{{cite news|last1=Leyden|first1=John|title=Indestructible, badass rootkit BadBIOS: Is this tech world's Loch Ness Monster? VOTE NOW|url=http://www.theregister.co.uk/2013/11/01/breaking_badbios|accessdate=30 December 2014|date=1 Nov 2013}}&lt;/ref&gt; with the ability to be replicate itself across [[Air gap (networking)|air gaps]] using [[Ultrasound|ultrasonic]] communication between a computer's speakers and microphone.&lt;ref&gt;{{cite news|last1=A. Grimes|first1=Roger|title=4 reasons BadBIOS isn't real|url=http://www.infoworld.com/article/2609622/security/4-reasons-badbios-isn-t-real.html|accessdate=30 December 2014|date=Nov 12, 2013}}&lt;/ref&gt;&lt;ref name=arstech&gt;{{cite news|last1=Goodin|first1=Dan|title=Meet &quot;badBIOS,&quot; the mysterious Mac and PC malware that jumps airgaps|url=http://arstechnica.com/security/2013/10/meet-badbios-the-mysterious-mac-and-pc-malware-that-jumps-airgaps/|accessdate=31 December 2014|date=31 Oct 2013}}&lt;/ref&gt; To date, there have been no proven occurrences of this malware.

Ruiu claims the virus is able to infect the [[BIOS]] of [[Windows]], [[Mac OS X]], [[BSD]] and [[Linux]] as well as spreading infection over [[USB flash drive]]&lt;ref name=arstech /&gt; Rob Graham of Errata Security produced a detailed analysis&lt;ref&gt;{{cite web|last1=Graham|first1=Robert|title=#badBIOS features explained|url=http://blog.erratasec.com/2013/10/badbios-features-explained.html|accessdate=30 December 2014}}&lt;/ref&gt; of each element of the claims about BadBIOS's capabilities describing the software as 'plausible' where as Paul Ducklin on the [[Sophos]] Naked Security blog&lt;ref&gt;{{cite web|last1=Ducklin|first1=Paul|title=The &quot;BadBIOS&quot; virus that jumps airgaps and takes over your firmware - what's the story?|url=https://nakedsecurity.sophos.com/2013/11/01/the-badbios-virus-that-jumps-airgaps-and-takes-over-your-firmware-whats-the-story/|accessdate=30 December 2014}}&lt;/ref&gt; suggested 'It's possible, of course, that this is an elaborate hoax'.&lt;ref name=regbreaking /&gt;

In December 2013 computer scientists Michael Hanspach and Michael Goetz released a paper to the [[Journal of Communication]] demonstrating the possibility of an acoustic mesh networking at a slow 20 [[Bit rate|bits per second]] using a speakers and microphone for ultrasonic communication in a fashion similar to BadBIOS.&lt;ref&gt;{{cite news|last1=Leyden|first1=John|title=Hear that? It's the sound of BadBIOS wannabe chatting over air gaps|url=http://www.theregister.co.uk/2013/12/05/airgap_chatting_malware/|accessdate=30 December 2014|date=5 Dec 2013}}&lt;/ref&gt;

== References ==
{{Reflist}}

[[Category:Computer science]]
[[Category:Computer viruses]]


{{malware-stub}}</text>
      <sha1>c0gae3xsyk6lr33vdj4z650z353on0q</sha1>
    </revision>
  </page>
  <page>
    <title>Visual computing</title>
    <ns>0</ns>
    <id>45350085</id>
    <revision>
      <id>650901541</id>
      <parentid>650897287</parentid>
      <timestamp>2015-03-11T13:44:48Z</timestamp>
      <contributor>
        <username>David Biddulph</username>
        <id>399540</id>
      </contributor>
      <comment>Remove randomly scattered capitals, &amp; unnecessarily piped links, see [[WP:MOSCAPS]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6764">'''Visual computing''' is a generic term for all computer science disciplines handling with images and 3D models, i.e. computer graphics, image processing, visualization, computer vision, virtual und augmented reality, video processing, but also includes aspects of pattern recognition, human computer interaction, machine learning and digital libraries. The core challenges are the acquisition, processing, analysis and rendering of visual information (mainly images and video). Application areas include industrial quality control, medical image processing and visualization, surveying, robotics, multimedia systems, virtual heritage, special effects in movies and television, and computer games.

==History and overview==
Visual computing is a relatively newly coined term, which got its current meaning around 2005,&lt;ref&gt;[http://www.isvc.net/ International Symposium on Visual Computing]&lt;/ref&gt; when the established computer science disciplines [[computer graphics]], [[image processing]], [[computer vision]] and others noticed that their methods and applications overlapped more and more, so that a new generic term was needed. Many of the used mathematical and algorithmic methods are the same in all areas dealing with images: image formats, filtering methods, color models, image metrics and others. And also the programming methods on graphics hardware, the manipulation tricks to handle huge data, textbooks and conferences, the scientific communities of these disciplines and working groups at companies intermixed more and more.

Furthermore, applications increasingly needed techniques from more than one of these fields concurrently. To generate very detailed models of complex objects you need image recognition, 3D sensors and reconstruction algorithms, and to display these models believably you need realistic rendering techniques with complex lighting simulation. Real-time graphics is the basis for usable virtual and augmented reality software. A good segmentation of the organs is the basis for interactive manipulation of 3D visualizations of medical scans. Robot control needs the recognition of objects just as a model of its environment. And all devices (computers) need ergonomic graphical user interfaces.

Although many problems are considered solved within the scientific communities of the sub-disciplines making up visual computing (mostly under idealistic assumptions), one major challenge of visual computing as a whole is the integration of these partial solutions into applicable products. This includes dealing with many practical problems like addressing a multitude of hardware, the use of real data (that is often erroneous and/or gigantic in size), and the operation by untrained users. In this respect, '''Visual computing is more than just the sum of its sub-disciplines''', it is the next step towards systems fit for real use in all areas using images or 3D objects on the computer.

== Visual computing disciplines ==
At least the following disciplines are sub-fields of visual computing. More detailed descriptions of each of these fields can be found on the linked special pages.
* Computer graphics and computer animation
[[Computer graphics (computer science)|Computer graphics]] is a general term for all techniques that produce images as result with the help of a computer. To transform the description of objects to nice images is called [[Rendering (computer graphics)|rendering]] which is always a compromise between image quality and run-time.
* Image analysis and computer vision
Techniques that can extract content information from images are called [[image analysis]] techniques. [[Computer vision]] is the ability of computers (or of robots) to recognize their environment and to interpret it correctly.
* Visualization and visual analytics
[[Visualization (computer graphics)|Visualization]] is used to produce images that shall communicate messages. Data may be abstract or concrete, often with no a priori geometrical components. [[Visual analytics]] describes the discipline of interactive visual analysis of data, also described as “the science of analytical reasoning supported by the interactive visual interface”.&lt;ref&gt;[Thomas, J.J., and Cook, K.A. (Eds) (2005). An Illuminated Path: The Research and Development Agenda for Visual Analytics, IEEE Computer Society Press, ISBN 0-7695-2323-4]&lt;/ref&gt;
* Geometric modeling and 3D-printing
To represent objects for rendering it needs special methods and data structures, which subsumed with the term [[geometric modeling]]. In addition to describing and interactive geometric techniques, sensor data are more and more used to reconstruct geometrical models. Algorithms for the efficient control of [[3D printing|3D printers]] also belong to the field of visual computing.
* Image processing and image editing
In contrast to image analysis [[image processing]] manipulates images to produce better images. “Better” can have very different meanings subject to the respective application. Also, it has to be discriminated from [[image editing]] which describes interactive manipulation of images based on human validation.
* Virtual and augmented reality
Techniques that produce the feeling of immersion into a fictive world are called [[virtual reality]] (VR). Requirements for VR include [[head-mounted display]]s, real-time tracking, and high-quality real-time rendering. [[Augmented reality]] enables the user to see the real environment in addition to the virtual objects, which augment this reality. Accuracy requirements on rendering speed and tracking precision are significantly higher here.
* Human computer interaction
The planning, design and uses of interfaces between people and computers is not only part of every system involving images. Due to the high bandwidth of the human visual channel (eye), images are also a preferred part of ergonomic user interfaces in any system, so that [[human-computer interaction]] is also an integral part of visual computing.

== Footnotes ==
&lt;references /&gt;

== External links ==
* [http://research.microsoft.com/en-us/groups/vc/ Microsoft Research Group Visual Computing]
* [http://www.nvidia.de/object/visual-computing-de.html Visual Computing at NVidia]
* [http://vcg.seas.harvard.edu/ Visual Computing Group at Harvard University]
* [http://vcc.kaust.edu.sa/Pages/Home.aspx Visual Computing Center at KAUST]
* [http://www.igd.fraunhofer.de/ Applied Research in Visual Computing] (Fraunhofer IGD)
* [http://www.ivc.h-brs.de/ Institute of Visual Computing] (Hochschule Bonn-Rhein-Sieg, Sankt Augustin)
* [http://www.vrvis.at  VRVis Research Center for Virtual Reality and Visualisation] (Vienna, Austria)

[[Category:Computer science]]
[[Category:Image processing]]
[[Category:Computer graphics]]</text>
      <sha1>60qxxq5gasntcdh3huq9dqtw8rblxrj</sha1>
    </revision>
  </page>
  <page>
    <title>Portal:Computer science</title>
    <ns>100</ns>
    <id>1472580</id>
    <revision>
      <id>652985664</id>
      <parentid>652789716</parentid>
      <timestamp>2015-03-22T08:10:49Z</timestamp>
      <contributor>
        <ip>2602:306:BC90:CE30:B060:8804:BF19:B07F</ip>
      </contributor>
      <comment>Changed inconsistent terminology, computing-&gt;computer.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4753">&lt;!-- This portal was created using subst:box portal skeleton  --&gt;
{{Portals browsebar}}
{| width=&quot;100%&quot; cellpadding=&quot;5&quot; cellspacing=&quot;10&quot; style=&quot;background:#FFFFFF; border-style:solid; border-width:1px; border-color:#FFFF33;&quot;
| width=&quot;55%&quot; style=&quot;vertical-align:top;padding: 0; margin:0;&quot; | 
{{Shortcut|P:CS}}

:{{resize|95%|This portal is for the [[List of academic disciplines|academic discipline]] of '''computer science'''. For other related portals such as [[Portal:Computer networking|computer networking]], [[Portal:Computer security|computer security]] and [[Portal:Information technology|information technology]], please see '''[[Portal:Contents/Portals#Technology and applied sciences|portals: technology and applied sciences]]'''.''
}}
&lt;div style=&quot;clear:both; width:100%&quot;&gt;
{{/box-header|&lt;big&gt;The Computer Science Portal&lt;/big&gt;|{{FULLPAGENAME}}/Intro|}}
{{{{FULLPAGENAME}}/Intro}}
{{/box-footer|}}
&lt;/div&gt;

&lt;div style=&quot;text-align:center; margin:0.25em auto 0.75em&quot;&gt;{{purge|'''Show new selections'''}}&lt;/div&gt;

&lt;div class=&quot;portal-column-left&quot;&gt; &lt;!-- Switch to one column on narrow screens --&gt;

{{/box-header|''Selected quote''|{{FULLPAGENAME}}/Selected quote|}}
{{Selected quote
| quote = ...the unfactored criterion &quot;A program is good (enough) as long as it satisfies your customers.&quot; is too woolly to be of '''any''' help.
| quoted = Edsger W. Dijkstra
| dates = 1930-2002
| source = http://www.cs.utexas.edu/~EWD/transcriptions/EWD06xx/EWD603.html EWD603: Tripreport, E.W.Dijkstra Archive
}}
{{/box-footer|}}

{{Random portal component|max=6|header=''Featured article''|subpage=Featured article|seed=3}}

{{/box-header|''Selected picture''|{{FULLPAGENAME}}/Selected picture|}}
{{{{FULLPAGENAME}}/Selected picture}}
{{/box-footer|}}

{{/box-header|''Categories''|{{FULLPAGENAME}}/Categories|}}
{{{{FULLPAGENAME}}/Categories}}
{{/box-footer|}}

{{/box-header|''Related WikiProjects''|{{FULLPAGENAME}}/WikiProjects|}}
{{{{FULLPAGENAME}}/WikiProjects}}
{{/box-footer|}}

&lt;/div&gt;

&lt;div class=&quot;portal-column-right&quot;&gt; &lt;!-- Switch to one column on narrow screens --&gt;

{{/box-header|''Selected biography''|{{FULLPAGENAME}}/Selected person|}}
{{Selected biography
| image = Vint_Cerf_-_2010.jpg
| size = 150px
| side = right
| caption = Vint Cerf was elected as the president of the [[Association for Computing Machinery]] in May 2012, and in August 2013 he joined the Council on CyberSecurity's Board of Advisors..
| name = Vinton Gray Cerf
| born = 1943
| link = Vint Cerf
| text = Vinton Gray &quot;Vint&quot; Cerf[1] (/ˈsɜrf/; born June 23, 1943) is an American computer scientist, who is recognized as one of &quot;the fathers of the Internet&quot;, sharing this title with American computer scientist Bob Kahn. His contributions have been acknowledged and lauded, repeatedly, with honorary degrees and awards that include the National Medal of Technology, the [[Turing Award]], the Presidential Medal of Freedom, and membership in the National Academy of Engineering.

In the early days, Cerf was a program manager for the United States Department of Defense Advanced Research Projects Agency (DARPA) funding various groups to develop TCP/IP technology. When the Internet began to transition to a commercial opportunity during the late 1980s, Cerf moved to MCI where he was instrumental in the development of the first commercial email system (MCI Mail) connected to the Internet.

Cerf was instrumental in the funding and formation of ICANN from the start. He waited in the wings for a year before he stepped forward to join the ICANN Board, eventually becoming chairman.

Cerf went to Van Nuys High School along with Jon Postel and Steve Crocker; he wrote the former's obituary. Both were also instrumental in the creation of the Internet.

Cerf is also known for his sartorial style, typically appearing in three-piece suit—a rarity in an industry known for its casual dress norms.
}}
{{/box-footer|}}

{{/box-header|''Related portals''|{{FULLPAGENAME}}/Related portals|}}
{{{{FULLPAGENAME}}/Related portals}}
{{/box-footer|}}

{{/box-header|''Things you can do''|{{FULLPAGENAME}}/Things you can do|}}
{{{{FULLPAGENAME}}/Things you can do}}
{{/box-footer|}}

&lt;/div&gt;

&lt;div style=&quot;clear:both; width:100%&quot;&gt;

{{/box-header|''{{PAGENAME}} topics''|{{FULLPAGENAME}}/{{PAGENAME}} topics|}}
{{{{FULLPAGENAME}}/{{PAGENAME}} topics}}
{{/box-footer|}}

{{/box-header|''Associated Wikimedia''|Template:WikimediaForPortals|}}
{{WikimediaForPortals}}
{{/box-footer|}}

&lt;center&gt;[[Special:PrefixIndex/Portal:Computer_science|Directory of pages for ''Portal:Computing_science'']]
&lt;/center&gt;

&lt;/div&gt;

{{portals}}
{{purge page}}

__NOTOC__ __NOEDITSECTION__

[[Category:{{PAGENAME}} portal|*]]
[[Category:Computing portals]]
[[Category:Science portals]]
[[Category:Computer science|ρ]]</text>
      <sha1>ozu56p7i4r55870kfzhztuheqtzblbg</sha1>
    </revision>
  </page>
  <page>
    <title>+Greythorne the Technomancer (+gthorne)</title>
    <ns>0</ns>
    <id>46242815</id>
    <revision>
      <id>655460595</id>
      <parentid>654609198</parentid>
      <timestamp>2015-04-08T05:44:56Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Removing &quot;Greythorne's_Logo.jpg&quot;, it has been deleted from Commons by [[commons:User:Fastily|Fastily]] because: No license since 30 March 2015: you may [[:c:Special:Upload|re-upload]] the file, but please include a [[:c:COM:CT|license tag]].</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="9985">{{primary sources|date=March 2015}}
{{unreliable sources|date=March 2015}}
&lt;!-- Please do not remove or change this AfD message until the issue is settled --&gt;
{{Article for deletion/dated|page=+Greythorne the Technomancer (+gthorne)|timestamp=20150328161611|year=2015|month=March|day=28|substed=yes|help=off}}
&lt;!-- For administrator use only: {{Old AfD multi|page=+Greythorne the Technomancer (+gthorne)|date=28 March 2015|result='''keep'''}} --&gt;
&lt;!-- End of AfD message, feel free to edit beyond this point --&gt;
{{Infobox scientist
|name        = +Greythorne (+gthorne)
| known_for   = Software reversing, Internet Anonymity, Internet Security
}} '''+Greythorne the Technomancer''', also known by the shortened form of his name +gthorne, is a reverse engineer, one of the original members/professors of [[Old_Red_Cracker|The Old Red Cracker's (+ORC)]] Higher Cracking University (+HCU). 

Greythorne's Personal Logo is shown here, apparently reproduced in triplicate (found reposted at http://www.krasizlatev.com/lonestar/)

+Greythorne worked as partner with the now legendary reverser [[Fravia]], another +HCU founder, on reverse engineering topics and internet privacy &amp; security. See  [http://gthorne.reteam.org/ +Greythorne's Privacy Nexus.] Tools used included debuggers, deadlisting tools, assemblers and disassemblers.

The +HCU was the only resource of its kind, founded by +ORC in 1995 and has been the inspiration and starting point for untold numbers of students in reverse engineering and computer information security fields in all corners of the globe, as described in the book [http://www.amazon.com/Security-Warrior-Cyrus-Peikari/dp/0596005458/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1427809053&amp;sr=1-1&amp;keywords=security+warrior &quot;Security Warrior&quot; (O'reilly Press):]

&quot;One of the legendary figures of those heady days was the Old Red Cracker, (+ORC). Not only was +ORC a genius sofware reverser, he was a prolific author and teacher of the subject. His classic texts are still considered mandatory reading for RCE students.
In order to further RCE research, +ORC founded the High Cracking University, or +HCU. The &quot;+&quot; sign next to a nichname, or &quot;handle,&quot; designated members of the +HCU. The +HCU students included the most elite Windows reversers in the world. Each year the +HCU published a new reverse engineering challenge, and the authors of a handful of the best written responses were invited as students for the new school year.&quot;

For this purpose, Greythorne published the +orcpacks with tools and lessons for people to have what they needed to get into the reverse engineering field. The lessons of the Higher Cracking University were posted with a deadline to the +HCU professors for review and grading. One such example was the &quot;Millennium Strainer&quot; with a December 1999 Deadline. Excerpt, found still alive on the internet at [http://www.darkridge.com/~jpr5/mirror/fravia.org/millen1.htm another good mirror of their lessons and materials] in a quote from Fravia: 

&quot;Dear readers, I'm proud to introduce the Millennium strainer, for the +HCU 2000 courses. I know that we are late: due to the problems that are listed elsewhere we have had a three-months delay in the presentation of the strainer this year. I would therefore propose that all your answers for admission should be presented either to +Aesculapius, to +ORC, to +Greythorne, or to me BEFORE THE 15 December 1999, so that you will have four months and two weeks to solve the strainer and we will have some time for the evaluation of all results. We hope that +ORC will send his contribute very soon, but we will anyway publish the fourth challenge of this strainer before the end of August.&quot;

In addition to working with the +HCU, he wrote and published many tutorials, which have been copied, reposted and translated around the internet since the 1990s, to train newer users how to get into the field of Reverse Engineering under the title &quot;Assembly and Cracking from the Ground Up.&quot; One such article in the series is on the topic of [http://www.woodmann.com/krobar/beginner/03.htm How to set up SoftIce] from the Windows'95 days, a software debugging program. Another was [http://www.pablin.com.ar/computer/info/cracking/moebius/win32api.txt his article with source code on win32 (Windows 32-bit) api debugging] once SoftIce is up and running.

One of Greythorne's original programming contributions to the world of reverse engineering in the 1990s was his symbiote -- a handy tool that allowed programmers to add functionality to other programs. The symbiote was written in [[Turbo_Assembler|TASM (Borland's Turbo Assembler)]] and the full source was provided by +Greythorne. Other programmers followed with versions written for Windows applications. Quoted by another +HCU member, +Mammon_: [https://github.com/mammon/mammon.github.com/blob/master/Old/old.html &quot;Greythorne the Technomancer, whose  Symbiote program is not only an excellent cracking tool, but a perfectly-commented example for learning assembly language.&quot;]
 
According to the late reverser [[Fravia]] in [http://www.woodmann.com/fravia/links.htm this page] in 1999: &quot;Greythorne the Technomancer has a series of assembler essays and a lot of &quot;orcpacks&quot;, i.e. +ORC's lesson with ALL (yes, all) the targets (i.e. the programs) that +ORC uses in his tutorial. On his site you'll find very important introductions to assembly language and many other goodies. Since he spreads real knowledge, Greythorne has been censored a lot on the web. +Greythorne is an Unix guru, a System administrator, a wizard of knowledge and my web_brother since 1996. 
Don't let the &quot;poor&quot; graphic design of his sites fool you! +gthorne is in reality a famous web-designer!
This is one of the BEST KNOWLEDGE SITES of the whole web. Visiting +gthorne's pages you'll find EVEN MORE than on my own ones... he is one of the few good crackers which give away his (very deep) knowledge without even thinking about compensation&quot; 

According to [[Fravia's wiki,]] Greythorne's partner Fravia died in 2009.

A student by the handle of 'Watchdog' at examnotes.net stated it best in 2001: &quot;What led me to start win32 programming in assembly were the reverse engineering tutorials located at Fravia and Greythorne sites....I learned a lot from those reverse engineering tutorials and they were a great stress reliever when I was working in the auditing field.&quot;

The best resource for information about Greythorne, Fravia, +ORC and the +HCU is [http://www.woodmann.com/fravia/ the last known mirror of Fravia's massive data archive at woodman.com.] There are literally hundreds of pages of reverse engineering data and code lessons &amp; examples.

For reference, the woodmann site was the source used live at ReCon 2006 (Fravia speaking live in video): https://archive.org/movies/thumbnails.php?identifier=Fravia_Reversing_our_searching_habits_Power_searching_without_google

==References==
{{reflist}}

*http://www.amazon.com/Security-Warrior-Cyrus-Peikari/dp/0596005458/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1427809053&amp;sr=1-1&amp;keywords=security+warrior Security Warrior, Copright 2004, by Cyrus Peikari  (Author), Anton Chuvaki, O'Reilly Press
*http://www.woodmann.com/fravia/ The last known mirror of Fravia's reverse engineering archives
*http://set-ezine.org/index.php?num=16&amp;art=11 Set 39 Technical Guide &quot;Call for Papers&quot; - References +gthorne's tools &quot;orcpacks&quot; (Spanish, 2014)
*http://davide.eynard.it/malawiki/HcuStory Article about +HCU and +gthorne &quot;another mighty reverser&quot; and &quot;home of the great +orcpacks&quot; (2014)
*http://www.gladerebooted.org/viewtopic.php?f=2&amp;t=2363 Fravia's Last Challenge (2008, reposted in 2011)
*http://egloos.zum.com/ieee/v/8985264 Greythorne's win32api guide (2006 Korean Translation)
*http://gthorne.reteam.org/ +Greythorne's Privacy Nexus - Greythorne's anonymity tools reposted by the Reverse Engineering Team (2003)
*http://computer-programming-forum.com/46-asm/0c3f575642bb9167.htm Adding code to programs with TASM (2003)
*http://www.woodmann.com/fravia/links.htm &quot;Cast&quot; (Founding) members and contributors to the +HCU (2001)
*http://www.examnotes.net/index.php?topic=17662.0 Examnotes.net student describes Fravia and Greythorne's contributions (2001)
*http://www.woodmann.com/fravia/orc1.htm History of First Contact with Fravia and the Old Red Cracker (1997, Republished in 1999)
*http://servv89pn0aj.sn.sourcedns.com/~gbpprorg/2600 &quot;Clampdown&quot; Article Archives $2600 Magazine Volume 15, Number 1 (Spring 1998)
*http://eidanyoson.8k.com/xelemental.htm Greythorne's Tutoriales de Assembly y cracking básico (1998 Spanish Translation)
*http://acrigs.com/FRAVIA/greysice.htm Softice's breakpoints, an interesting list - Article by +Greythorne (October 30,1997)
*http://www.home.aone.net.au/~byzantium/king.html Record of postings regarding possible death of +ORC (June 1997)
*http://www.home.aone.net.au/~byzantium/lost.html +ORC hints that he knows the identities of +gthorne and Fravia (May 1997)
*http://www.woodmann.com/krobar/beginner/03.htm Greythorne's Article on How to set up SoftIce (1997)
*http://eidan.ar.tripod.com/assemg1.htm Greythorne's Binary and Hexadecimal Number System Guide (1997 Spanish Translation)
*http://www.pablin.com.ar/computer/info/cracking/moebius/win32api.txt Greythorne's guide on win32api (1997)

==+ORC Cracking Tutorial Archives (Including work by +gthorne and fravia+)==

*http://www.geocities.ws/macjesusc/ocr/howto41.html WLCheck Lesson including source code (Greythorne and Fravia, 1997)
*http://www.geocities.ws/macjesusc/ocr/howto42.html Microsoft Lesson including source code (Fravia, 1997)
*http://www.it-docs.net/ddata/786.pdf HowTo3.1 (Fravia/Greythorne/Orc Tutorial stored at IT-Docs.Net)
*http://packetstormsecurity.com/files/17930/howto93.htm.html Greythorne's work documented at PacketStormSecurity.com

==See also==
*[[Reverse engineering]]
*[[Hacker (computer security)]]
*[[Software cracking]]

[[Category:Living people]]
[[Category:Computer science]]
[[Category:Software engineering]]</text>
      <sha1>707c3axxz5xdvtqrmr1623s0saw7h7n</sha1>
    </revision>
  </page>
  <page>
    <title>Klaus Tochtermann</title>
    <ns>0</ns>
    <id>45634432</id>
    <revision>
      <id>654308301</id>
      <parentid>654308256</parentid>
      <timestamp>2015-03-31T08:53:57Z</timestamp>
      <contributor>
        <username>DieZBW</username>
        <id>23164053</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="6436">[[File:Klaus Tochtermann1.jpg|thumb|Klaus Tochtermann in the ZBW - Leibniz Information Centre for Economics, Kiel branch]]

'''Klaus Tochtermann''' (* 22. August [[1964]] in [[Heidelberg]]) is a professor in the Institute for Computer Science at [[Kiel University]] and also the director of the [[German National Library of Economics|ZBW – German National Library of Economics – Leibniz Information Centre for Economics]].&lt;ref&gt;[http://www.zbw.eu/presse/pressemitteilungen/2010_06_01.htm ''Informatikprofessor übernimmt Ruder der weltgrößten Wirtschaftsbibliothek''], Press release ZBW, 2010-06-01.&lt;/ref&gt;&lt;ref&gt;[http://www.kn-online.de/lokales/kiel/154531-Der-neue-Herr-der-Buecher.html Martina Drexler: ''Der neue Herr der Bücher''] In: [[Kieler Nachrichten]], 2010-05-31.&lt;/ref&gt;

== Education and Career ==
Klaus Tochtermann is the son of [[Werner Tochtermann]]. He graduated from the Kieler Gelehrtenschule in 1983. From 1985 to 1991 he studied computer science at the Kiel University and [[Dortmund University]]. At Dortmund University he received his doctorate in computer science with a thesis on ''A model for hypermedia: description and integrated formalisation of essential hypermedia concepts''. Klaus Tochtermann spent the following year as a post-doc at [[Texas A&amp;M University]], Center for the Studies of Digital Libraries, USA with a grant from the Max-Kade-Foundation. His key activities in this time were in the field of web-based tools and services for [[digital libraries]]. From 1997 until 2000 he was division head at the FAW Ulm (Research Institute for Application-oriented Knowledge Processing at Ulm University).

From 2001 until 2010 he was the scientific director of the research institute Know-Center, a competence center for information technology-based knowledge management located in Austria. In 2001 founded the I-KNOW conference series in cooperation with [[Hermann Maurer]]. In 2002 he received his habilitation in the field of ''Applied information processing'' with the thesis ''Personalisation in the Context of Digital Libraries and Knowledge Management''. From 2004 until 2010 he held the chair for Knowledge Management, at the [[TU Graz]] (Austria).&lt;ref&gt;[http://www.community-of-knowledge.de/benutzer/klaus-tochtermann/ Prof. Klaus Tochtermann], In: community of knowledge.&lt;/ref&gt; From 2007 until 2010, he was also head of the Institute for Networked Media at [[Joanneum Research]], an application-oriented research institution located in Graz. Since 2010, Klaus Tochtermann has been the director of the [[German National Library of Economics|ZBW – Leibniz Information Centre for Economics]] and has held a chair for Media Informatics at Kiel University.

In 2012, Klaus Tochtermann initiated the Leibniz Research Alliance Science 2.0.&lt;ref&gt;[http://www.zbw.eu/en/about-us/press/press-releases/single-view/news/zbw-initiates-leibniz-research-network-science-20// ZBW initiates Leibniz Research Network Science 2.0, ZBW press release, 2012-10-09 ]&lt;/ref&gt; This research alliance addresses the question of how the participatory Internet (e.g. Social Media) changes research and publishing processes, and how information infrastructure institutions can participate in the shaping of these changes.

In 2014, the ZBW – Leibniz Information Centre for Economics headed by Klaus Tochtermann received the national “Library of the Year 2014” award &lt;ref&gt;[http://www.zbw.eu/en/about-us/press/press-releases/single-view/news/german-national-library-of-economics-named-as-library-of-the-year-2014-excellence-and-radical-innov/ German National Library of Economics named as Library of the Year 2014: excellence and radical innovation convince the jury, ZBW press release, 2014-07-01 ]&lt;/ref&gt;  from the German Library Association (dbv).

Klaus Tochtermann is married and lives in Kiel.

== Main research focus ==
* [http://www.leibniz-science20.de/en/ Science 2.0]
* [[Knowledge management]] and knowledge provision
* Semantic technologies

== Selected professional activities==
* Member of the ITA Advisory Board at the Federal Ministry for Education and Science, topic “Participation in research and innovation”
* Member of the Council for Information-Infrastructures
* Member of the Committee on Scientific Library Services and Information Systems of the German Research Foundation [http://www.dfg.de/en/index.jsp (DFG)] 
* Member of the board of the [http://www.know-center.tugraz.at/en/ Know-Center] – Graz (Austria)
* Member of the scientific advisory council of [http://www.mimos.my/ Mimos] (IT research institition of Malaysia)
* Visiting Professor at the [[Universiti Teknologi MARA]] (Malaysia)
* Member of the advisory board “Information and Library” of the [https://www.goethe.de/en/index.html Goethe-Institute]

== Selected publications ==
* ''How Science 2.0 will impact on Scientific Libraries''. In: it-information Technology, Volume 56, Number 5 (2014), pp.&amp;nbsp;224–229, ISSN (Online) 2196-7032, ISSN (Print) 1611-2776; DOI: [http://dx.doi.org/10.1515/itit-2014-1050 10.1515/itit-2014-1050], September 2014

* co-authored with Atif Latif and Timo Borst: ''Exposing data from an Open Access Repository for economics as linked data''. D-Lib Magazine, September/October 2014, Volume 20, Number 9/10; DOI: [http://dx.doi.org/10.1045/september2014-latif 10.1045/september2014-latif]

* co-authored with Atif Latif: ''Exploring Scientific Publication and Cross-domain Linked Dataset for Similarity – A Case Study''. International Journal of Advancements in Computing Technology, ISSN 2005-8039, Vol. 5, No. 11, pp.&amp;nbsp;179–187, 2013

* co-authored with Joachim Neubert: ''Linked Library Data: Offering a Backbone for the Semantic Web''. In: Communications in Computer and Information Sciences; Semantic Technology and Knowledge Engineering Conference (STAKE 2011), Conference Proceedings Springer, Berlin, 2011

== External links ==

* {{DNB-Portal|133792811}}
* [http://www.zbw.eu/en/research/klaus-tochtermann/ CV]

== References ==
&lt;references /&gt;

{{Authority control|TYP=p|GND=133792811|LCCN=n/95/82646|VIAF=85191819}}

{{Persondata
|NAME=Tochtermann, Klaus
|ALTERNATIVE NAMES=
|SHORT DESCRIPTION=German Computer Scientist
|DATE OF BIRTH=22. August 1964
|PLACE OF BIRTH=[[Heidelberg]]
|DATE OF DEATH=
|PLACE OF DEATH=
}}
{{DEFAULTSORT:Tochtermann, Klaus}}
[[Category:Computer science]]
[[Category:Information technology]]
[[Category:German people]]

[[de:Klaus Tochtermann]]</text>
      <sha1>evafrcja4vr6biwetg3dwy7t9oo0hj2</sha1>
    </revision>
  </page>
  <page>
    <title>Computer science</title>
    <ns>0</ns>
    <id>5323</id>
    <revision>
      <id>655782760</id>
      <parentid>655623299</parentid>
      <timestamp>2015-04-10T04:26:39Z</timestamp>
      <contributor>
        <username>Banedon</username>
        <id>1124632</id>
      </contributor>
      <minor/>
      <comment>/* The great insights of computer science */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="59546">{{use mdy dates|date=December 2014}}
'''Computer science''' is the [[science|scientific]] and practical approach to [[computation]] and its applications. It is the systematic study of the feasibility, structure, expression, and mechanization of the methodical [[Procedure (computer science)|procedures]] (or [[algorithm]]s) that underlie the acquisition, representation, processing, storage, communication of, and access to [[information]], whether such information is encoded as [[bit]]s in a [[computer memory]] or transcribed in [[gene]]s and [[protein]] structures in a biological [[cell (biology)|cell]].&lt;ref&gt;{{cite web |title=What is Computer Science? |publisher=Boston University Department of Computer Science |date=Spring 2003 |url=http://www.cs.bu.edu/AboutCS/WhatIsCS.pdf |accessdate=December 12, 2014}}&lt;/ref&gt; An alternate, more succinct definition of computer science is the study of automating algorithmic processes that scale. A [[computer scientist]] specializes in the theory of computation and the design of computational systems.&lt;ref&gt;{{cite web |url=http://wordnetweb.princeton.edu/perl/webwn?s=computer%20scientist |title=WordNet Search - 3.1 |publisher=Wordnetweb.princeton.edu |accessdate=2012-05-14}}&lt;/ref&gt;
 
Its subfields can be divided into a variety of theoretical and practical disciplines. Some fields, such as [[computational complexity theory]] (which explores the fundamental properties of [[Computational problem|computational]] and intractable problems), are highly abstract, while fields such as [[Computer graphics (computer science)|computer graphics]] emphasize real-world visual applications. Still other fields focus on the challenges in implementing computation. For example, [[programming language theory]] considers various approaches to the description of computation, while the study of [[computer programming]] itself investigates various aspects of the use of [[programming language]] and [[complex systems]]. [[Human–computer interaction]] considers the challenges in making computers and computations useful, usable, and [[Computer accessibility|universally accessible]] to [[human]]s.

&lt;div class=&quot;thumb tright&quot;&gt;
&lt;div class=&quot;thumbinner&quot; style=&quot;width:300px;&quot;&gt;
{| style=&quot;border:1px solid #ccc;&quot;
|-
| [[File:Lambda lc.svg|144px|alt=large capital lambda|Programming language theory|link=Programming language theory]]
| [[File:Sorting quicksort anim frame.png|144px|alt=Plot of a quicksort algorithm|Computational complexity theory|link=Computational complexity theory]]
|-
| [[File:Utah teapot simple 2.png|144px|alt=Utah teapot representing computer graphics|Computer graphics|link=Computer graphics (computer science)]]
| [[File:3-Tastenmaus Microsoft.jpg|144px|alt=Microsoft Tastenmaus mouse representing human-computer interaction|Human–computer interaction|link=Human–computer interaction]]
|}
&lt;div class=&quot;thumbcaption&quot;&gt;Computer science deals with the theoretical foundations of information and computation, together with practical techniques for the implementation and application of these foundations&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

==History==
{{Main|History of computer science }}
[[File:Babbage40.png|upright|thumb|[[Charles Babbage]] is credited with inventing the first mechanical computer.]]
[[File:Ada lovelace.jpg|upright|thumb|[[Ada Lovelace]] is credited with writing the first [[algorithm]] intended for processing on a computer.]]
The earliest foundations of what would become computer science predate the invention of the modern [[digital computer]]. Machines for calculating fixed numerical tasks such as the [[abacus]] have existed since antiquity, aiding in computations such as multiplication and division. Further, [[algorithms]] for performing computations have existed since antiquity, even before sophisticated computing equipment were created. The ancient [[Sanskrit]] treatise [[Shulba Sutras]], or &quot;Rules of the Chord&quot;, is a book of algorithms written in 800 BCE for constructing geometric objects like altars using a peg and chord, an early precursor of the modern field of [[computational geometry]].

[[Blaise Pascal]] designed and constructed the first working mechanical calculator, [[Pascal's calculator]], in 1642.&lt;ref&gt;{{cite web|title=Blaise Pascal|url=http://www-history.mcs.st-andrews.ac.uk/Biographies/Pascal.html|publisher=School of Mathematics and Statistics University of St Andrews, Scotland}}&lt;/ref&gt; In 1673 [[Gottfried Leibniz]] demonstrated a digital mechanical calculator, called the '[[Stepped Reckoner]]'.&lt;ref&gt;{{cite web|title=A Brief History of Computing|url=http://blogs.royalsociety.org/history-of-science/2012/06/25/history-of-computing/}}&lt;/ref&gt; He may be considered the first computer scientist and information theorist, for, among other reasons, documenting the binary number system. In 1820, [[Thomas de Colmar]] launched the [[mechanical calculator]] industry&lt;ref group=note&gt;In 1851&lt;/ref&gt; when he released his simplified [[arithmometer]], which was the first calculating machine strong enough and reliable enough to be used daily in an office environment. [[Charles Babbage]] started the design of the first ''automatic mechanical calculator'', his [[difference engine]], in 1822, which eventually gave him the idea of the first ''programmable mechanical calculator'', his [[Analytical Engine]].&lt;ref&gt;{{cite web |url=http://www.sciencemuseum.org.uk/on-line/babbage/index.asp |title=Science Museum - Introduction to Babbage |accessdate=2006-09-24 |archiveurl=https://web.archive.org/web/20060908054017/http://www.sciencemuseum.org.uk/on-line/babbage/index.asp |archivedate=2006-09-08}}&lt;/ref&gt; He started developing this machine in 1834 and &quot;in less than two years he had sketched out many of the salient features of the modern [[computer]]. A crucial step was the adoption of a punched card system derived from the Jacquard loom&quot;&lt;ref&gt;{{cite book |author=Anthony Hyman |title=Charles Babbage, pioneer of the computer |year=1982}}&lt;/ref&gt; making it infinitely programmable.&lt;ref&gt;&quot;The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine.&quot; [[#COLLIER|Bruce Collier]], 1970&lt;/ref&gt; In 1843, during the translation of a French article on the ''analytical engine'', [[Ada Lovelace]] wrote, in one of the many notes she included, an algorithm to compute the [[Bernoulli numbers]], which is considered to be the first computer program.&lt;ref&gt;{{cite web |url=http://www.scottlan.edu/Lriddle/women/ada-love.htm |title=A Selection and Adaptation From Ada's Notes found in Ada, The Enchantress of Numbers,&quot; by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA |accessdate=2006-05-04}}{{dead link|date=December 2014}}&lt;/ref&gt; Around 1885, [[Herman Hollerith]] invented the [[tabulating machines|tabulator]], which used [[punched card]]s to process statistical information; eventually his company became part of [[IBM]]. In 1937, one hundred years after Babbage's impossible dream, [[Howard Aiken]] convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business&lt;ref&gt;&quot;In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another&quot;, [[#AIKEN|Bernard Cohen]], p.44 (2000)&lt;/ref&gt; to develop his giant programmable calculator, the [[Harvard Mark I|ASCC/Harvard Mark I]], based on Babbage's ''analytical engine'', which itself used cards and a central computing unit. When the machine was finished, some hailed it as &quot;Babbage's dream come true&quot;.&lt;ref&gt;[[#ORIGINS|Brian Randell]], p. 187, 1975&lt;/ref&gt;

During the 1940s, as new and more powerful [[computing]] machines were developed, the term ''computer'' came to refer to the machines rather than their human predecessors.&lt;ref&gt;The [[Association for Computing Machinery]] (ACM) was founded in 1947.&lt;/ref&gt; As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study [[computation]] in general. Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.&lt;ref name=&quot;Denning_cs_discipline&quot;/&gt;&lt;ref&gt;{{cite web |url=http://www.cl.cam.ac.uk/conference/EDSAC99/statistics.html |title=Some EDSAC statistics |publisher=Cl.cam.ac.uk |accessdate=2011-11-19}}&lt;/ref&gt; The world's first computer science degree program, the [[Cambridge Diploma in Computer Science]], began at the [[University of Cambridge]] [[Cambridge Computer Lab|Computer Laboratory]] in 1953. The first computer science degree program in the United States was formed at [[Purdue University]] in 1962.&lt;ref&gt;{{cite web |url=http://www.cs.purdue.edu/about/conte.html |title=Computer science pioneer Samuel D. Conte dies at 85 |date=July 1, 2002 |publisher=Purdue Computer Science |accessdate=December 12, 2014}}&lt;/ref&gt; Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.

Although many initially believed it was impossible that computers themselves could actually be a scientific field of study, in the late fifties it gradually became accepted among the greater academic population.&lt;ref name=&quot;Levy1984&quot;&gt;{{cite book |authorlink=Steven Levy |last=Levy |first=Steven |title=[[Hackers: Heroes of the Computer Revolution]] |year=1984 |isbn=0-385-19195-2 |publisher=Doubleday }}&lt;/ref&gt;&lt;ref name=&quot;Tedre2014&quot;&gt;{{cite book |last=Tedre |first=Matti |title=The Science of Computing: Shaping a Discipline |year=2014 |publisher=Taylor and Francis / CRC Press }}&lt;/ref&gt; It is the now well-known [[IBM]] brand that formed part of the computer science revolution during this time. IBM (short for International Business Machines) released the IBM 704&lt;ref&gt;{{cite web|url=http://www.computerhistory.org/revolution/computer-graphics-music-and-art/15/222/633 |title=IBM 704 Electronic Data Processing System - CHM Revolution |publisher=Computerhistory.org |accessdate=2013-07-07}}&lt;/ref&gt; and later the IBM 709&lt;ref&gt;{{cite web |title=IBM 709: a powerful new data processing system |publisher=Computer History Museum |url=http://archive.computerhistory.org/resources/text/IBM/IBM.709.1957.102646304.pdf |accessdate=December 12, 2014}}&lt;/ref&gt; computers, which were widely used during the exploration period of such devices. &quot;Still, working with the IBM [computer] was frustrating ... if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again&quot;.&lt;ref name=&quot;Levy1984&quot;/&gt; During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace.&lt;ref name=&quot;Tedre2014&quot;/&gt;

Time has seen significant improvements in the usability and effectiveness of computing technology. Modern society has seen a significant shift in the users of computer technology, from usage only by experts and professionals, to a near-ubiquitous user base. Initially, computers were quite costly, and some degree of human aid was needed for efficient use - in part from professional computer operators. As computer adoption became more widespread and affordable, less human assistance was needed for common usage.

===Contributions===
[[File:Enigma.jpg|thumb|The [[Germany|German]] military used the [[Enigma machine]] (shown here) during [[World War II]] for communication they thought to be secret. The large-scale decryption of Enigma traffic at [[Bletchley Park]] was an important factor that contributed to Allied victory in WWII.&lt;ref name=&quot;kahnbook&quot;/&gt;]]

Despite its short history as a formal academic discipline, computer science has made a number of fundamental contributions to [[science]] and [[society]] - in fact, along with [[electronics]], it is a founding science of the current epoch of human history called the [[Information Age]] and a driver of the [[information revolution|Information Revolution]], seen as the third major leap in human technological progress after the [[Industrial Revolution]] (1750-1850 CE) and the [[Neolithic Revolution|Agricultural Revolution]] (8000-5000 BCE).

These contributions include:
* The start of the &quot;[[digital revolution]]&quot;, which includes the current [[Information Age]] and the [[Internet]].&lt;ref name=&quot;bgu&quot;&gt;http://www.cis.cornell.edu/Dean/Presentations/Slides/bgu.pdf{{dead link|date=December 2014}}&lt;/ref&gt;
* A formal definition of [[computation]] and [[computability]], and proof that there are computationally [[Undecidable problem|unsolvable]] and [[Intractably|intractable]] problems.&lt;ref&gt;{{Cite journal |author=Constable, R. L. |date=March 2000 |url=http://www.cs.cornell.edu/cis-dean/bgu.pdf | title=Computer Science: Achievements and Challenges circa 2000 |format=PDF}}&lt;/ref&gt;
* The concept of a [[programming language]], a tool for the precise expression of methodological information at various levels of abstraction.&lt;ref&gt;{{cite book |last=Abelson |first=H. |authorlink=Hal Abelson |author2=G.J. Sussman with J. Sussman |year=1996 |title=Structure and Interpretation of Computer Programs |edition=2nd |publisher=MIT Press |isbn=0-262-01153-0 |quote=The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called ''procedural epistemology'' — the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects.}}&lt;/ref&gt;
* In [[cryptography]], [[Cryptanalysis of the Enigma|breaking the Enigma code]] was an important factor contributing to the Allied victory in World War II.&lt;ref name=&quot;kahnbook&quot;&gt;[[David Kahn (writer)|David Kahn]], [[The Codebreakers]], 1967, ISBN 0-684-83130-9.&lt;/ref&gt;
* [[Scientific computing]] enabled practical evaluation of processes and situations of great complexity, as well as experimentation entirely by software. It also enabled advanced study of the mind, and mapping of the human genome became possible with the [[Human Genome Project]].&lt;ref name=&quot;bgu&quot;/&gt; [[Distributed computing]] projects such as [[Folding@home]] explore [[protein folding]].
* [[Algorithmic trading]] has increased the [[Economic efficiency|efficiency]] and [[Market liquidity|liquidity]] of financial markets by using [[artificial intelligence]], [[machine learning]], and other [[statistics|statistical]] and [[Numerical analysis|numerical]] techniques on a large scale.&lt;ref&gt;{{cite news |url=http://www.telegraph.co.uk/money/main.jhtml?xml=/money/2006/08/27/ccsoft27.xml |title=Black box traders are on the march |newspaper=The Telegraph |date=August 26, 2006}}{{dead link|date=December 2014}}&lt;/ref&gt; High frequency algorithmic trading can also exacerbate [[volatility (finance)|volatility]].&lt;ref&gt;{{cite web |url=http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1686004 |title=The Impact of High Frequency Trading on an Electronic Market |doi=10.2139/ssrn.1686004 |publisher=Papers.ssrn.com |accessdate=2012-05-14}}&lt;/ref&gt;
* [[Computer graphics]] and [[computer-generated imagery]] have become ubiquitous in modern [[entertainment]], particularly in [[television]], [[Filmmaking|cinema]], [[advertising]], [[animation]] and [[video game]]s. Even films that feature no explicit [[computer-generated imagery|CGI]] are usually &quot;filmed&quot; now on [[digital camera]]s, or [[video editing|edited]] or [[Video post-processing|postprocessed]] using a digital video editor. {{Citation needed|date=October 2010}}
* [[Simulation]] of various processes, including computational [[fluid dynamics]], physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are [[SPICE]], as well as software for physical realization of new (or modified) designs. The latter includes essential design software for [[integrated circuit]]s.{{Citation needed|date=October 2010}}
* [[Artificial intelligence]] is becoming increasingly important as it gets more efficient and complex. There are many applications of the AI, some of which can be seen at home, such as [[robotic vacuum cleaner]]s. It is also present in video games and on the modern battlefield in drones, anti-missile systems, and [[Legged Squad Support System|squad support robots]].

==Philosophy==
{{main|Philosophy of computer science}}
A number of computer scientists have argued for the distinction of three separate paradigms in computer science. [[Peter Wegner]] argued that those paradigms are science, technology, and mathematics.&lt;ref&gt;{{cite conference |author=Wegner, P. |title=Research paradigms in computer science |title=Proceedings of the 2nd international Conference on Software Engineering |location=San Francisco, California, United States |date=October 13–15, 1976 |publisher=IEEE Computer Society Press, Los Alamitos, CA}}&lt;/ref&gt; [[Peter J. Denning|Peter Denning]]'s working group argued that they are theory, abstraction (modeling), and design.&lt;ref&gt;{{Cite doi |10.1145/63238.63239}}&lt;/ref&gt; Amnon H. Eden described them as the &quot;rationalist paradigm&quot; (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs [[deductive reasoning]]), the &quot;technocratic paradigm&quot; (which might be found in [[engineering]] approaches, most prominently in [[software engineering]]), and the &quot;scientific paradigm&quot; (which approaches computer-related artifacts from the empirical perspective of [[natural science]]s, identifiable in some branches of [[artificial intelligence]]).&lt;ref&gt;{{cite doi |10.1007/s11023-007-9060-8}}&lt;/ref&gt;

===Name of the field===
Although first proposed in 1956,&lt;ref name=&quot;Tedre2014&quot;/&gt; the term &quot;computer science&quot; appears in a 1959 article in [[Communications of the ACM]],&lt;ref name=&quot;Fine_1959&quot;&gt;
{{cite journal
 |author=Louis Fine
 |year=1959
 |title=The Role of the University in Computers, Data Processing, and Related Fields
 |journal=Communications of the ACM
 |volume=2 |issue=9 |pages=7–14
 |doi=10.1145/368424.368427
}}&lt;/ref&gt;
in which Louis Fein argues for the creation of a ''Graduate School in Computer Sciences'' analogous to the creation of [[Harvard Business School]] in 1921,&lt;ref&gt;{{cite web|title=Stanford University Oral History|url=http://library.stanford.edu/guides/stanford-university-oral-history|publisher=Stanford University|accessdate=May 30, 2013}}&lt;/ref&gt; justifying the name by arguing that, like [[management science]], the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.&lt;ref name=&quot;Fine_1959&quot;/&gt;
His efforts, and those of others such as [[numerical analysis|numerical analyst]] [[George Forsythe]], were rewarded: universities went on to create such programs, starting with Purdue in 1962.&lt;ref&gt;[[Donald Knuth]] (1972). ''[http://www.stanford.edu/dept/ICME/docs/history/forsythe_knuth.pdf &quot;George Forsythe and the Development of Computer Science&quot;]. ''Comms. ACM''.{{dead link|date=December 2014}}&lt;/ref&gt; Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.&lt;ref&gt;{{cite web |author=Matti Tedre |date=2006 |url=http://epublications.uef.fi/pub/urn_isbn_952-458-867-6/urn_isbn_952-458-867-6.pdf |title=The Development of Computer Science: A Sociocultural Perspective |page=260 |accessdate=December 12, 2014}}&lt;/ref&gt; Certain departments of major universities prefer the term ''computing science'', to emphasize precisely that difference. Danish scientist [[Peter Naur]] suggested the term ''datalogy'',&lt;ref&gt;
{{cite journal
 |author=Peter Naur
 |year=1966
 |title=The science of datalogy
 |journal=Communications of the ACM
 |volume=9 |issue=7 |page=485
 |doi=10.1145/365719.366510
}}&lt;/ref&gt; to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the ''Communications of the ACM'' – ''turingineer'', ''turologist'', ''flow-charts-man'', ''applied meta-mathematician'', and ''applied [[epistemology|epistemologist]]''.&lt;ref&gt;{{cite journal |title=&lt;!-- missing! --&gt; |date=&lt;!-- missing! --&gt; |journal=Communications of the ACM |volume=1 |issue=4 |page=6}}&lt;/ref&gt; Three months later in the same journal, ''comptologist'' was suggested, followed next year by ''hypologist''.&lt;ref&gt;Communications of the ACM 2(1):p.4&lt;/ref&gt; The term ''computics'' has also been suggested.&lt;ref&gt;IEEE Computer 28(12):p.136&lt;/ref&gt; In Europe, terms derived from contracted translations of the expression &quot;automatic information&quot; (e.g. &quot;informazione automatica&quot; in Italian) or &quot;information and mathematics&quot; are often used, e.g. ''informatique'' (French), ''Informatik'' (German), ''informatica'' (Italy, The Netherlands), ''informática'' (Spain, Portugal), ''informatika'' ([[Slavic languages]] and [[Hungarian language|Hungarian]]) or ''pliroforiki'' (''πληροφορική'', which means informatics) in [[Greek language|Greek]]. Similar words have also been adopted in the UK (as in ''the School of Informatics of the University of Edinburgh'').&lt;ref&gt;P. Mounier-Kuhn, ''L'Informatique en France, de la seconde guerre mondiale au Plan Calcul. L'émergence d'une science'', Paris, PUPS, 2010, ch. 3 &amp; 4.&lt;/ref&gt;

A folkloric quotation, often attributed to—but almost certainly not first formulated by—[[Edsger Dijkstra]], states that &quot;computer science is no more about computers than astronomy is about telescopes.&quot;&lt;ref group=note&gt;See the entry
&quot;[[q:Computer science|Computer science]]&quot; on Wikiquote for the history of this quotation.&lt;/ref&gt; The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of [[computer hardware]] is usually considered part of [[computer engineering]], while the study of commercial [[computer system]]s and their deployment is often called [[information technology]] or [[information systems]]. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as [[philosophy]], [[cognitive science]], [[computational linguistics|linguistics]], [[mathematics]], [[physics]], [[biology]], [[computational statistics|statistics]], and [[logic]].

Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.&lt;ref name=&quot;Denning_cs_discipline&quot; /&gt; Early computer science was strongly influenced by the work of mathematicians such as [[Kurt Gödel]] and [[Alan Turing]], and there continues to be a useful interchange of ideas between the two fields in areas such as [[mathematical logic]], [[category theory]], [[domain theory]], and [[algebra]].&lt;ref name=&quot;Tedre2014&quot;/&gt;

The relationship between computer science and [[software engineering]] is a contentious issue, which is further muddied by [[Debates within software engineering|disputes]] over what the term &quot;software engineering&quot; means, and how computer science is defined.&lt;ref&gt;{{cite doi|10.1007/s11023-011-9240-4}}&lt;/ref&gt; [[David Parnas]], taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.&lt;ref&gt;{{Cite doi|10.1023/A:1018949113292}}, p. 19: &quot;Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, [...]&quot;&lt;/ref&gt;

The academic, political, and funding aspects of computer science tend to depend on whether a department formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with [[computational science]]. Both types of departments tend to make efforts to bridge the field educationally if not across all research.

==Areas of computer science==
As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.&lt;ref name=&quot;CSAB1997&quot;&gt;{{cite web|author=Computing Sciences Accreditation Board|title=Computer Science as a Profession|url=http://www.csab.org/comp_sci_profession.html |date=May 28, 1997| accessdate=2010-05-23 |archiveurl = https://web.archive.org/web/20080617030847/http://www.csab.org/comp_sci_profession.html |archivedate = 2008-06-17}}&lt;/ref&gt;&lt;ref&gt;{{cite book |author=Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council |title=Computer Science: Reflections on the Field, Reflections from the Field|url=http://www.nap.edu/catalog.php?record_id=11106#toc|publisher=National Academies Press|isbn=978-0-309-09301-9|year=2004}}&lt;/ref&gt;
[[CSAB (professional organization)|CSAB]], formerly called ''Computing Sciences Accreditation Board'' – which is made up of representatives of the [[Association for Computing Machinery]] (ACM), and the [[IEEE Computer Society]] (IEEE-CS)&lt;ref&gt;{{cite web |url=http://www.csab.org/ |title=CSAB Leading Computer Education |publisher=CSAB |date=2011-08-03 |accessdate=2011-11-19}}&lt;/ref&gt; – identifies four areas that it considers crucial to the discipline of computer science: ''theory of computation'', ''algorithms and data structures'', ''programming methodology and languages'', and ''computer elements and architecture''. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and telecommunications, database systems, parallel computation, distributed computation, computer-human interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.&lt;ref name=&quot;CSAB1997&quot;/&gt;

===Theoretical computer science===
{{main|Theoretical computer science}}
The broader field of [[theoretical computer science]] encompasses both the classical theory of computation and a wide range of other topics that focus on the more abstract, logical, and mathematical aspects of computing.

====Theory of computation====
{{main|Theory of computation}}
According to [[Peter J. Denning]], the fundamental question underlying computer science is, ''&quot;What can be (efficiently) automated?&quot;''&lt;ref name=&quot;Denning_cs_discipline&quot;&gt;{{cite journal | last=Denning | first=P.J. | authorlink=Peter J. Denning | year=2000 | title=Computer Science: The Discipline | url=http://www.idi.ntnu.no/emner/dif8916/denning.pdf | journal=Encyclopedia of Computer Science|format=PDF |archiveurl = https://web.archive.org/web/20060525195404/http://www.idi.ntnu.no/emner/dif8916/denning.pdf |archivedate = 2006-05-25}}&lt;/ref&gt; The study of the [[theory of computation]] is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, [[Computability theory (computer science)|computability theory]] examines which computational problems are solvable on various theoretical [[models of computation]]. The second question is addressed by [[computational complexity theory]], which studies the time and space costs associated with different approaches to solving a multitude of computational problems.

The famous &quot;[[P = NP problem|P=NP?]]&quot; problem, one of the [[Millennium Prize Problems]],&lt;ref&gt;[http://www.claymath.org/millennium/P_vs_NP/ Clay Mathematics Institute] P=NP{{dead link|date=December 2014}}&lt;/ref&gt; is an open problem in the theory of computation.

{| style=&quot;border:1px solid #ccc; text-align:center; margin:auto;&quot; cellspacing=&quot;15&quot;
|-
| [[File:DFAexample.svg|96px]]
| [[File:Wang tiles.png|96px]]
| '''P = NP''' ?
| '''GNITIRW-TERCES'''
| [[File:Blochsphere.svg|96px]]
|-
| [[Automata theory]]
| [[Computability theory]]
| [[Computational complexity theory]]
| [[Cryptography]]
| [[Quantum computer|Quantum computing theory]]
|}

====Information and coding theory====
{{main|Information theory|Coding theory}}

Information theory is related to the quantification of information. This was developed by [[Claude Shannon|Claude E. Shannon]] to find fundamental limits on [[signal processing]] operations such as compressing data and on reliably storing and communicating data.&lt;ref&gt;{{cite web |date=October 14, 2002 |last=P. Collins |first=Graham |title=Claude E. Shannon: Founder of Information Theory |url=http://www.scientificamerican.com/article.cfm?id=claude-e-shannon-founder |publisher=Scientific American |accessdate=December 12, 2014}}&lt;/ref&gt;
Coding theory is the study of the properties of [[code]]s (systems for converting information from one form to another) and their fitness for a specific application. Codes are used for [[data compression]], [[cryptography]], [[error detection and correction]], and more recently also for [[network coding]]. Codes are studied for the purpose of designing efficient and reliable [[data transmission]] methods.

====Algorithms and data structures====
Algorithms and data structures is the study of commonly used computational methods and their computational efficiency.

{| style=&quot;border:1px solid #ccc; text-align:center; margin:auto;&quot; cellspacing=&quot;15&quot;
|-
| &lt;math&gt;O(n^2)&lt;/math&gt;
| [[File:Sorting quicksort anim.gif|96px]]
| [[File:Singly linked list.png|96px]]
| [[File:TSP Deutschland 3.png|96px]]
| [[File:SimplexRangeSearching.png|96px]]
|-
| [[Analysis of algorithms]]
| [[Algorithm]]s
| [[Data structures]]
| [[Combinatorial optimization]]
| [[Computational geometry]]
|}

====Programming language theory====
{{main|Programming language theory}}
Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of [[programming language]]s and their individual [[Programming language#Elements|features]]. It falls within the discipline of computer science, both depending on and affecting [[mathematics]], [[software engineering]] and [[linguistics]]. It is an active research area, with numerous dedicated academic journals.

{| style=&quot;border:1px solid #ccc; text-align:center; margin:auto;&quot; cellspacing=&quot;15&quot;
|-
| &lt;math&gt;\Gamma\vdash x: \text{Int}&lt;/math&gt;
| [[File:Compiler.svg|96px]]
| [[File:Python add5 syntax.svg|96px]]
|-
| [[Type theory]]
| [[Compiler design]]
| [[Programming languages]]
|}

====Formal methods====
{{main|Formal methods}}
Formal methods are a particular kind of [[mathematically]] based technique for the [[formal specification|specification]], development and [[formal verification|verification]] of [[software]] and [[computer hardware|hardware]] systems. The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and [[life-critical system]]s, where [[safety]] or [[computer security|security]] is of utmost importance. Formal methods are best described as the application of a fairly broad variety of [[theoretical computer science]] fundamentals, in particular [[logic in computer science|logic]] calculi, [[formal language]]s, [[automata theory]], and [[program semantics]], but also [[type systems]] and [[algebraic data types]] to problems in software and hardware specification and verification.

===Applied computer science===
Applied computer science aims at identifying certain computer science concepts that can be used directly in solving real world problems.

====Artificial intelligence====
{{main|Artificial intelligence}}
This branch of computer science aims to or is required to synthesise goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning and communication found in humans and animals. From its origins in [[cybernetics]] and in the [[History of artificial intelligence|Dartmouth Conference]] (1956), artificial intelligence (AI) research has been necessarily cross-disciplinary, drawing on areas of expertise such as [[applied mathematics]], [[Mathematical logic|symbolic logic]], [[semiotics]], [[electrical engineering]], [[philosophy of mind]], [[neurophysiology]], and [[social intelligence]]. AI is associated in the popular mind with [[Robotics|robotic development]], but the main field of practical application has been as an embedded component in areas of [[software development]], which require computational understanding and modeling such as finance and economics, data mining and the physical sciences.{{Citation needed|date=May 2014}} The starting-point in the late 1940s was [[Alan Turing]]'s question &quot;Can computers think?&quot;, and the question remains effectively unanswered although the &quot;[[Turing Test]]&quot; is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.

{| style=&quot;border:1px solid #ccc; text-align:center; margin:auto;&quot; cellspacing=&quot;15&quot;
|-
| [[File:Nicolas P. Rougier's rendering of the human brain.png|96px]]
| [[File:Human eye, rendered from Eye.png|96px]]
| [[File:Corner.png|96px]]
| [[File:KnnClassification.svg|96px]]
|-
| [[Machine learning]]
| [[Computer vision]]
| [[Image processing]]
| [[Pattern recognition]]
|-
| [[File:User-FastFission-brain.gif|96px]]
| [[File:Julia iteration data.png|96px]]
| [[File:sky.png|96px]]
| [[File:earth.png|96px]]
|-
| [[Cognitive science]]
| [[Data mining]]
| [[Evolutionary computation]]
| [[Information retrieval]]
|-
| [[File:neuron.svg|96px]]
| [[File:english.png|96px]]
| [[File:HONDA ASIMO.jpg|64px]]
| [[File:MeningiomaMRISegmentation.png|96px]]
|-
| [[Knowledge representation]]
| [[Natural language processing]]
| [[Robotics]]
| [[Medical Image Computing|Medical image computing]]
|}

====Computer architecture and engineering====
{{main|Computer architecture|Computer engineering}}

Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.&lt;ref&gt;{{cite web|last=A. Thisted|first=Ronald|title=Computer Architecture |url=http://galton.uchicago.edu/~thisted/Distribute/comparch.pdf|publisher=The University of Chicago|accessdate=April 7, 1997}}&lt;/ref&gt; The field often involves disciplines of computer engineering and electrical engineering, selecting and interconnecting hardware components to create computers that meet functional, performance, and cost goals.

{| style=&quot;border:1px solid #ccc; text-align:center; margin:auto;&quot; cellspacing=&quot;15&quot;
|-
| [[File:NOR ANSI.svg|96px]]
| [[File:Fivestagespipeline.png|96px]]
| [[File:SIMD.svg|96px]]
|-
| [[Boolean algebra|Digital logic]]
| [[Microarchitecture]]
| [[Multiprocessing]]
|-
| [[File:Operating system placement.svg|96px]]
| [[File:Network Library LAN.svg|96px]]
| [[File:Emp Tables (Database).PNG|96px]]
| [[File:Padlock.svg|96px]]
|-
| [[Operating systems]]
| [[Computer networking|Computer networks]]
| [[Databases]]
| [[Information security]]
|-
| [[File:Roomba original.jpg|96px]]
| [[File:flowchart.png|96px]]
| [[File:Ideal compiler.png|96px]]
| [[File:Python add5 syntax.svg|96px]]
|-
| [[Ubiquitous computing]]
| [[Systems architecture]]
| [[Compiler design]]
| [[Programming languages]]
|}

====Computer Performance Analysis====
{{main|Computer performance}}
Computer Performance Analysis is the study of work flowing through computers with the general goals of improving [[throughput]], controlling [[Response time (technology)|response time]], using resources efficiently, eliminating [[bottleneck (disambiguation)#Computing|bottlenecks]], and predicting performance under anticipated peak loads.&lt;ref&gt;{{cite book | last = Wescott | first = Bob | title = The Every Computer Performance Book, Chapter 3: Useful laws  | publisher = [[CreateSpace]] | date = 2013 | isbn = 1482657759}}&lt;/ref&gt;

====Computer graphics and visualization====
{{main|Computer graphics (computer science)}}
Computer graphics is the study of digital visual contents, and involves synthese and manipulations of image data. The study is connected to many other fields in computer science, including [[computer vision]], [[image processing]], and [[computational geometry]], and is heavily applied in the fields of [[special effects]] and [[video games]].

====Computer security and cryptography====
{{main|Computer security|Cryptography}}
Computer security is a branch of computer technology, whose objective includes protection of information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users. Cryptography is the practice and study of hiding (encryption) and therefore deciphering (decryption) information. Modern cryptography is largely related to computer science, for many encryption and decryption algorithms are based on their computational complexity.

====Computational science====
[[Computational science]] (or [[scientific computing]]) is the field of study concerned with constructing [[scientific modelling|mathematical models]] and [[numerical analysis|quantitative analysis]] techniques and using computers to analyze and solve [[scientific]] problems. In practical use, it is typically the application of [[computer simulation]] and other forms of [[computation]] to problems in various scientific disciplines.

{| style=&quot;border:1px solid #ccc; text-align:center; margin:auto;&quot; cellspacing=&quot;15&quot;
|-
| [[File:Lorenz attractor yb.svg|96px]]
| [[File:Quark wiki.jpg|96px]]
| [[File:Naphthalene-3D-balls.png|96px]]
| [[File:1u04-argonaute.png|96px]]
|-
| [[Numerical analysis]]
| [[Computational physics]]
| [[Computational chemistry]]
| [[Bioinformatics]]
|}

====Computer networks====
{{main|Computer network}}
This branch of computer science aims to manage networks between computers worldwide.

====Concurrent, parallel and distributed systems====
{{main|Concurrency (computer science)|Distributed computing}}
Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. A number of mathematical models have been developed for general concurrent computation including [[Petri nets]], [[process calculi]] and the [[Parallel Random Access Machine]] model. A distributed system extends the idea of concurrency onto multiple computers connected through a network. Computers within the same distributed system have their own private memory, and information is often exchanged among themselves to achieve a common goal.

====Databases====
{{main|Database|Database management systems}}
A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through [[database models]] and [[query languages]].

====Health informatics====
{{main|Health Informatics }}
Health Informatics in computer science deals with computational techniques for solving problems in health care.

====Information science====
{{main|Information science}}

{| style=&quot;border:1px solid #ccc; text-align:center; margin:auto;&quot; cellspacing=&quot;15&quot;
|-
| [[File:earth.png|96px]]
| [[File:neuron.png|96px]]
| [[File:english.png|96px]]
| [[File:Wacom graphics tablet and pen.png|96px]]
|-
| [[Information retrieval]]
| [[Knowledge representation]]
| [[Natural language processing]]
| [[Human–computer interaction]]
|}

====Software engineering====
{{main|Software engineering}}
Software engineering is the study of designing, implementing, and modifying software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software— it doesn't just deal with the creation or manufacture of new software, but its internal maintenance and arrangement. Both computer applications software engineers and computer systems software engineers are projected to be among the fastest growing occupations from 2008 and 2018.

{{see also|computer programming}}

==The great insights of computer science==
The philosopher of computing Bill Rapaport noted three ''Great Insights of Computer Science''&lt;ref&gt;{{cite web|url=http://www.cse.buffalo.edu/~rapaport/computation.html|title=What Is Computation?|work=buffalo.edu}}&lt;/ref&gt;
* [[Gottfried Wilhelm Leibniz|Leibniz]]'s, [[George Boole|Boole]]'s, [[Alan Turing]]'s, [[Claude Shannon|Shannon]]'s, &amp; [[Samuel Morse|Morse]]'s insight: There are only '''2 objects''' that a computer has to deal with in order to represent &quot;anything&quot;
:All the information about any computable problem can be represented using only 0 &amp; 1 (or any other bistable pair that can flip-flop between two easily distinguishable states, such as &quot;on&quot;/&quot;off&quot;, &quot;magnetized/de-magnetized&quot;, &quot;high-voltage/low-voltage&quot;, etc.).
{{see also|digital physics}}
* [[Alan Turing]]'s insight: There are only '''5 actions''' that a computer has to perform in order to do &quot;anything&quot;
: Every algorithm can be expressed in a language for a computer consisting of only 5 basic instructions:
:: * move left one location
:: * move right one location
:: * read symbol at current location
:: * print 0 at current location
:: * print 1 at current location
{{see also|Turing machine}}
* [[Corrado Böhm|Böhm]] and [[Jacopini]]'s insight: There are only '''3 ways of combining''' these actions (into more complex ones) that are needed in order for a computer to do &quot;anything&quot;
:Only 3 rules are needed to combine any set of basic instructions into more complex ones:
: '''sequence''':
:: first do this; then do that
: ''' selection ''':
:: IF such-&amp;-such is the case,
:: THEN do this
:: ELSE do that
: '''repetition''':
:: WHILE such &amp; such is the case DO this

Note that the 3 rules of Boehm's and Jacopini's insight can be further simplified with the use of [[goto]] (which means it's more elementary than [[structured programming]]).

{{see also|Elementary function arithmetic#Friedman's grand conjecture}}

==Academia==

===Conferences===
{{further|List of computer science conferences}}
Conferences are strategic events of the Academic Research in computer science. During those conferences, researchers from the public and private sectors present their recent work and meet. [[Proceedings]] of these conferences are an important part of the computer science literature.

===Journals===
{{further|:Category:Computer science journals}}

==Education==
Academic curricula in computer science include the following areas of study:

# 	[[Structured_programming|Structured]] and [[Object Oriented]] programming&lt;ref&gt;Booch, Grady (1997). ''Object-Oriented Analysis and Design with Applications''. Addison-Wesley.&lt;/ref&gt;
# 
# 	[[Data structures]]&lt;ref&gt;Peter Brass. (2008) ''Advanced Data Structures'', Cambridge University Press&lt;/ref&gt;
# 
# 	[[Analysis_of_algorithms|Analysis of Algorithms]]&lt;ref&gt;Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L. &amp; Stein, Clifford. (2001) ''Introduction to Algorithms'', MIT Press and McGraw-Hill.&lt;/ref&gt;
# 
# 	[[Formal languages]]&lt;ref&gt;Hopcroft, John E. and Jeffrey D. Ullman, (1979) ''Introduction to Automata Theory, Languages, and Computation''&lt;/ref&gt; and [[History_of_compiler_construction|compiler construction]]&lt;ref&gt;Aho, Alfred V., Sethi, Ravi, and Ullman, Jeffrey D. (1988). ''Compilers — Principles, Techniques, and Tools''. Addison-Wesley.&lt;/ref&gt;
#       
#         [[Computer_graphics|Computer Graphics Algorithms]]&lt;ref&gt;Shirley, Peter. (2009) ''Fundamentals of Computer Graphics'' - 3rd edition&lt;/ref&gt;
# 
#         [[Sorting]] and Searching&lt;ref&gt;Knuth, Donald. (1998) ''The Art of Computer Programming: Volume 3: Sorting and Searching''&lt;/ref&gt;
# 
#         [[Numerical methods|Numerical Methods]],&lt;ref&gt;Press, William H., Saul A. Teukolsky, William T. Vetterling, Brian P. Flannery. (2007) ''Numerical Recipes 3rd Edition: The Art of Scientific Computing''&lt;/ref&gt; [[Optimization (computer science)|Optimization]] and Statistics&lt;ref&gt;Baron, Michael. (2006) ''Probability and Statistics for Computer Scientists''&lt;/ref&gt;
# 
#         [[Artificial Intelligence]]&lt;ref&gt;Russell, Stuart. (2009) ''Artificial Intelligence: A Modern Approach (3rd Edition)''&lt;/ref&gt; and [[Machine Learning]]&lt;ref&gt;Mitchell, Tom. (1997) ''Machine Learning''.&lt;/ref&gt;
# 

Some universities teach computer science as a theoretical study of computation and algorithmic reasoning. These programs often feature the [[theory of computation]], [[analysis of algorithms]], [[formal methods]], [[Concurrency (computer science)|concurrency theory]], [[databases]], [[computer graphics]], and [[systems analysis]], among others. They typically also teach [[computer programming]], but treat it as a vessel for the support of other fields of computer science rather than a central focus of high-level study. The ACM/IEEE-CS Joint Curriculum Task Force &quot;Computing Curriculum 2005&quot; (and 2008 update)&lt;ref&gt;{{cite web|url=http://www.acm.org/education/curricula-recommendations|title=ACM Curricula Recommendations|accessdate=2012-11-18}}&lt;/ref&gt; gives a guideline for university curriculum.

Other colleges and universities, as well as [[secondary school]]s and vocational programs that teach computer science, emphasize the practice of advanced programming rather than the theory of algorithms and computation in their computer science curricula. Such curricula tend to focus on those skills that are important to workers entering the software industry. The process aspects of computer programming are often referred to as [[software engineering]].

While computer science professions increasingly drive the U.S. economy, computer science education is absent in most American K-12 curricula. A report entitled [http://www.acm.org/runningonempty/ &quot;Running on Empty: The Failure to Teach K-12 Computer Science in the Digital Age&quot;] was released in October 2010 by [http://www.acm.org/ Association for Computing Machinery (ACM)] and [http://csta.acm.org/ Computer Science Teachers Association (CSTA)], and revealed that only 14 states have adopted significant education standards for high school computer science. The report also found that only nine states count high school computer science courses as a core academic subject in their graduation requirements. In tandem with &quot;Running on Empty&quot;, a new non-partisan advocacy coalition - [http://www.computinginthecore.org/ Computing in the Core (CinC)] - was founded to influence federal and state policy, such as the [http://www.govtrack.us/congress/bill.xpd?bill=h111-5929&amp;tab=summary Computer Science Education Act], which calls for grants to states to develop plans for improving computer science education and supporting computer science teachers.

Within the United States a gender gap in computer science education has been observed as well. Research conducted by the WGBH Educational Foundation and the [[Association for Computing Machinery|Association for Computing Machinery (ACM)]] revealed that more than twice as many high school boys considered computer science to be a &quot;very good&quot; or &quot;good&quot; college major than high school girls.&lt;ref&gt;{{cite web |title=New Image for Computing Report on Market Research |date=April 2009 |publisher=WGBH Educational Foundation and the Association for Computing Machinery (ACM) |url=http://www.acm.org/membership/NIC.pdf |accessdate=December 12, 2014}}&lt;/ref&gt; In addition, the high school [[Advanced Placement]] (AP) exam for computer science has displayed a disparity in gender. Compared to other AP subjects it has the lowest number of female participants, with a composition of about 15 percent women.&lt;ref&gt;{{cite web|last=Gilbert|first=Alorie|title=Newsmaker: Computer science's gender gap|url=http://news.cnet.com/2008-1082-833090.html|publisher=CNET News}}&lt;/ref&gt; This gender gap in computer science is further witnessed at the college level, where 31 percent of undergraduate computer science degrees are earned by women and only 8 percent of computer science faculty consists of women.&lt;ref&gt;{{cite web|last=Dovzan|first=Nicole|title=Examining the Gender Gap in Technology|url=http://sitemaker.umich.edu/356.dovzan/evidence_and_explanations_of_the_gender_gap|publisher=University of Michigan}}&lt;/ref&gt; According to an [http://edgaps.org/gaps/number-of-women-in-computer-science-fields-shrinking-can-epistemic-games-help-solve-the-problem/ article] published by the [http://edgaps.org/gaps/ Epistemic Games Group] in August 2012, the number of women graduates in the computer science field has declined to 13 percent.&lt;ref&gt;{{cite web|title=Encouraging the next generation of women in computing|url=http://blogs.msdn.com/b/msr_er/archive/2013/09/03/encouraging-the-next-generation-of-women-in-computing.aspx|publisher=Microsoft Research Connections Team|accessdate=September 3, 2013}}&lt;/ref&gt;

A 2014 ''[[Mother Jones (magazine)|Mother Jones]]'' article, &quot;We Can Code It&quot;, advocates for adding computer literacy and coding to the K-12 curriculum in the United States, and notes that computer science is not incorporated into the requirements for the [[Common Core State Standards Initiative]].&lt;ref&gt;{{Cite news
| last = Raja
| first = Tasneem
| title = Is Coding the New Literacy?
| work = [[Mother Jones (magazine)|Mother Jones]]
| accessdate = 2014-06-21
| date = August 2014
| url = http://www.motherjones.com/media/2014/06/computer-science-programming-code-diversity-sexism-education
}}&lt;/ref&gt;
In fact, there has been a trend in the direction of removing advanced placement tests and classes in American schools.&lt;ref&gt;http://arstechnica.com/business/2014/12/to-address-techs-diversity-woes-start-with-the-vanishing-comp-sci-classroom/ Casey Johnston. Ars Technica. Dec 4 2014.&lt;/ref&gt;&lt;ref&gt;http://apcentral.collegeboard.com/apc/members/exam/exam_information/1999.html&lt;/ref&gt;


==See also==
{{Main|Outline of computer science}}
{{Portal|Computer science}}
{{colbegin|2}}
* [[Academic genealogy of computer scientists]]
* [[Informatics (academic field)]]
* [[List of academic computer science departments]]
* [[List of computer science conferences]]
* [[List of computer scientists]]
* [[List of important publications in computer science|List of publications in computer science]]
* [[List of pioneers in computer science]]
* [[Technology transfer in computer science]]
* [[List of software engineering topics]]
* [[List of unsolved problems in computer science]]
* [[Women in computing]]
{{Wikipedia books link|Computer science}}
{{colend}}

==Notes==
{{reflist|group=note}}

==References==
{{Reflist|30em}}
&quot;Computer Software Engineer&quot;. U.S. Bureau of Labor Statistics. U.S. Bureau of Labor Statistics, n.d. Web. February 5, 2013.

==Further reading==
{{refbegin|30em}}
; Overview
* {{cite book|first=Allen B.|last=Tucker|authorlink=Allen B. Tucker|title=Computer Science Handbook|edition=2nd|publisher=Chapman and Hall/CRC|year=2004|isbn=1-58488-360-X}}
** &quot;Within more than 70 chapters, every one new or significantly revised, one can find any kind of information and references about computer science one can imagine. [...] all in all, there is absolute nothing about Computer Science that can not be found in the 2.5 kilogram-encyclopaedia with its 110 survey articles [...].&quot; (Christoph Meinel, ''[[Zentralblatt MATH]]'')
* {{cite book|first=Jan|last=van Leeuwen|authorlink=Jan van Leeuwen|title=Handbook of Theoretical Computer Science|publisher=The MIT Press|year=1994|isbn=0-262-72020-5}}
** &quot;[...] this set is the most unique and possibly the most useful to the [theoretical computer science] community, in support both of teaching and research [...]. The books can be used by anyone wanting simply to gain an understanding of one of these areas, or by someone desiring to be in research in a topic, or by instructors wishing to find timely information on a subject they are teaching outside their major areas of expertise.&quot; (Rocky Ross, ''[[SIGACT News]]'')
* {{cite book|title=Encyclopedia of Computer Science|edition=4th|first1=Anthony|last1=Ralston|authorlink=Anthony Ralston|first2=Edwin D.|last2=Reilly|authorlink2=Edwin D. Reilly|first3=David|last3=Hemmendinger|authorlink3=David Hemmendinger|publisher=Grove's Dictionaries|year=2000|isbn=1-56159-248-X|url=http://portal.acm.org/ralston.cfm}}
** &quot;Since 1976, this has been the definitive reference work on computer, computing, and computer science. [...] Alphabetically arranged and classified into broad subject areas, the entries cover hardware, computer systems, information and data, software, the mathematics of computing, theory of computation, methodologies, applications, and computing milieu. The editors have done a commendable job of blending historical perspective and practical reference information. The encyclopedia remains essential for most public and academic library reference collections.&quot; (Joe Accardin, Northeastern Illinois Univ., Chicago)
* {{cite book|url=http://books.google.com/books?id=JTYPKxug49IC&amp;printsec=frontcover#v=onepage&amp;q&amp;f=false|title=Milestones in Computer Science and Information Technology|author=Edwin D. Reilly| publisher=Greenwood Publishing Group|year=2003|isbn=978-1-57356-521-9}}
;Selected papers
* {{cite book|first=Donald E.|last=Knuth|authorlink=Donald Knuth|title=Selected Papers on Computer Science|publisher=CSLI Publications, [[Cambridge University Press]]|year=1996}}
* {{cite book|ref=COLLIER|last=Collier|first=Bruce|title=The little engine that could've: The calculating machines of Charles Babbage|publisher=Garland Publishing Inc|isbn=0-8240-0043-9|url=http://robroy.dyndns.info/collier/index.html}}
* {{cite book|ref=HAIKEN|first=Bernard|last=Cohen|title=Howard Aiken, Portrait of a computer pioneer|publisher=The MIT press|year=2000|isbn=978-0-2625317-9-5}}
* {{cite book|first=Matti|last=Tedre|title=The Science of Computing: Shaping a Discipline|publisher=CRC Press, [[Taylor &amp; Francis]]|year=2014}}
* {{cite book|title=The origins of Digital computers, Selected Papers|last=Randell|first=Brian |year=1973|publisher=Springer-Verlag|isbn=3-540-06169-X}}
** &quot;Covering a period from 1966 to 1993, its interest lies not only in the content of each of these papers — still timely today — but also in their being put together so that ideas expressed at different times complement each other nicely.&quot; (N. Bernard, ''Zentralblatt MATH'')
;Articles
* Peter J. Denning. ''[http://portal.acm.org/citation.cfm?id=1053309&amp;coll=&amp;dl=ACM&amp;CFID=15151515&amp;CFTOKEN=6184618 Is computer science science?]'', Communications of the ACM, April 2005.
* Peter J. Denning, ''[http://portal.acm.org/citation.cfm?id=971303&amp;dl=ACM&amp;coll=&amp;CFID=15151515&amp;CFTOKEN=6184618 Great principles in computing curricula]'', Technical Symposium on Computer Science Education, 2004.
* Research evaluation for computer science, Informatics Europe [http://www.eqanie.eu/media/Como%20Conference/Tanca-Research_Assessment_A_new_Initiative_by_Informatics_Europe.pdf report]. Shorter journal version: Bertrand Meyer, Christine Choppy, Jan van Leeuwen and Jorgen Staunstrup, ''Research evaluation for computer science'', in [[Communications of the ACM]], vol. 52, no. 4, pp.&amp;nbsp;31–34, April 2009.
; Curriculum and classification
* [[Association for Computing Machinery]]. [http://www.acm.org/class/1998/overview.html 1998 ACM Computing Classification System]. 1998.
* Joint Task Force of Association for Computing Machinery (ACM), [[Association for Information Systems]] (AIS) and [[IEEE Computer Society]] (IEEE-CS). [http://www.acm.org/education/curric_vols/CC2005-March06Final.pdf Computing Curricula 2005: The Overview Report]. September 30, 2005.
* [[Norman Gibbs]], [[Allen Tucker]]. &quot;A model curriculum for a liberal arts degree in computer science&quot;. ''Communications of the ACM'', Volume 29 Issue 3, March 1986.
{{refend}}

==External links==
{{Sister project links}}
{{Library resources box}}
* {{dmoz|Computers/Computer_Science/}}
* [http://www.lib.uwaterloo.ca/society/compsci_soc.html Scholarly Societies in Computer Science]
* [http://jeffhuang.com/best_paper_awards.html Best Papers Awards in Computer Science since 1996]
* [http://se.ethz.ch/~meyer/gallery/ Photographs of computer scientists] by [[Bertrand Meyer]]
* [http://www.eecs.berkeley.edu/department/history.shtml EECS.berkeley.edu]
; Bibliography and academic search engines
* [http://citeseerx.ist.psu.edu/ CiteSeer&lt;sup&gt;''x''&lt;/sup&gt;] ([[CiteSeerX|article]]): search engine, digital library and repository for scientific and academic papers with a focus on computer and information science.
* [http://dblp.uni-trier.de/ DBLP Computer Science Bibliography] ([[Digital Bibliography &amp; Library Project|article]]): computer science bibliography website hosted at Universität Trier, in Germany.
* [http://liinwww.ira.uka.de/bibliography/ The Collection of Computer Science Bibliographies] ([[Collection of Computer Science Bibliographies|article]])
; Professional organizations
* [http://www.acm.org/ Association for Computing Machinery]
* [http://www.computer.org/ IEEE Computer Society]
* [http://www.informatics-europe.org/ Informatics Europe]
* [http://www.aaai.org/home.html AAAI]
* [http://membercentral.aaas.org/categories/computer-science AAAS Computer Science]
; Misc
* [http://cs.stackexchange.com/ Computer Science - Stack Exchange] a community run question and answer site for computer science
* [http://www.cs.bu.edu/AboutCS/WhatIsCS.pdf What is computer science]
* [http://www.cs.mtu.edu/~john/jenning.pdf Is computer science science?]

{{Computer science}}
{{Technology}}

[[Category:Electrical engineering]]
[[Category:Electronic engineering]]
[[Category:Computer engineering]]
[[Category:Computer science]]</text>
      <sha1>dd0t750pbflhzt7ucisywmcm70damph</sha1>
    </revision>
  </page>
</mediawiki>
